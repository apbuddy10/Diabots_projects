def DiabotsUrp():
  step_count_139acd7f_3943_495c_8e2c_77f4b3cedf6e = 0.0
  thread Step_Counter_Thread_a3d7b0b4_f5be_44cb_9454_df5e39876bb8():
    while (True):
      step_count_139acd7f_3943_495c_8e2c_77f4b3cedf6e = step_count_139acd7f_3943_495c_8e2c_77f4b3cedf6e + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_a3d7b0b4_f5be_44cb_9454_df5e39876bb8()
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  set_target_payload(1.300000, [-0.002000, 0.000000, 0.053000], [0.002384, 0.002384, 0.002384, 0.000000, 0.000000, 0.000000])
  set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
  set_tool_communication(True, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(24)
  set_gravity([0.0, 0.0, 9.82])
  global stn1_plane=p[0.0587889580460367,-0.9846837046920666,0.02501504743499558,-1.8953659381550853E-4,-2.7641850798923185E-4,-3.136265531617691]
  global stn2_plane=p[0.14521691168335926,-0.6869457846407173,-0.13892235403787895,0.008721928164152818,-0.022313263546519614,-3.1314337123188762]
  global stn3_plane=p[-0.10552503144439138,0.7605184167657131,-0.2509443088338632,-3.6305878332566755E-4,-5.226804325748233E-4,0.002816727209503049]
  global stn5_plane=p[0.8803179851136919,0.4068350354928251,-0.21578490918740578,0.0027689078272385283,-0.0018076042304057027,-1.5686276119832754]
  global stn6_plane=p[0.8760494065946539,0.7798568004406025,-0.2479640473276889,0.0016056845615764544,-0.009314448336054403,-1.5656297251054465]
  global stn7_plane=p[0.7435622934546545,-0.7133212182946149,0.15943866985729604,-0.0030487026415242885,0.008599620440869163,-2.4421925814041443]
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Unterdruck
  #################################################
  # Vacuum Grip Check
  #################################################
  
  vacuumGripCheckThread1 = 0
  vacuumGripCheckThread2 = 0
  vacuumGripCheckThread3 = 0
  vacuumGripCheckThread4 = 0
  vacuumGripCheckThread1Running = False
  vacuumGripCheckThread2Running = False
  vacuumGripCheckThread3Running = False
  vacuumGripCheckThread4Running = False
  vacuumGripCheckSocketId = "1"
  vacuumGripCheckThreadStarted = False
  
  thread vacuumGripCheck():
    gripper_socket = vacuumGripCheckSocketId
    vacuumGripCheckThreadStarted = True
  
    while (True):
      objectDetectedDebounceCtr = 0
  
      while (objectDetectedDebounceCtr < 3):
        if(rq_is_vacuum_obj_detected(gripper_socket="1")):
          objectDetectedDebounceCtr = objectDetectedDebounceCtr + 1
        else:
          objectDetectedDebounceCtr = 0
        end
        sleep(0.1)
      end
  
      objectNotDetectedDebounceCtr = 0
  
      while objectNotDetectedDebounceCtr < 3:
        if (not rq_is_vacuum_obj_detected(gripper_socket="1")):
          objectNotDetectedDebounceCtr = objectNotDetectedDebounceCtr + 1
        else:
          objectNotDetectedDebounceCtr = 0
        end
        sleep(0.1)
      end
  
      socket_open("127.0.0.1",29999,"dashboardServerSocket")
      socket_send_line("pause","dashboardServerSocket")
      socket_send_string("popup Vacuum grip check has detected an object drop.", "dashboardServerSocket")
      socket_send_byte(10, "dashboardServerSocket")
      socket_close("dashboardServerSocket")
  
      sleep(0.008)
    end
  end
  
  def startVacuumGripCheckThread(gripperId="1"):
    vacuumGripCheckSocketId = gripperId
    threadHandle = run vacuumGripCheck()
    waitForVacuumGripCheckThreadStarted()
    return threadHandle
  end
  
  def stopVacuumGripCheckThread(threadHandle):
    kill threadHandle
  end
  
  def waitForVacuumGripCheckThreadStarted():
    while (not(vacuumGripCheckThreadStarted)):
      sleep(0.008)
    end
    vacuumGripCheckThreadStarted = False
  end
  #################################################
  # End - Vacuum Grip Check
  #################################################
  
  #################################################
  # Stops the pump on a distance travelled
  #################################################
  global stopPumpDistance = 100
  global stopPumpSocketId = "0"
  global stopPumpThreadStarted = [False, False, False, False]
  global stopPumpThreadHandles = [0, 0, 0, 0]
  
  thread stopPumpOnDistanceTravelled():
    distance = stopPumpDistance
    socketId = stopPumpSocketId
    stopPumpThreadStarted[rq_socket_to_index(socketId)] = True
  
    measuredDistance = waitForDistanceTravelled(distance)
  
    rq_stop(socketId)
  
    stopPumpThreadStarted[rq_socket_to_index(socketId)] = False
  end
  
  def waitForDistanceTravelled(distance):
    startingPose = get_actual_tcp_pose()
    measuredDistance = 0
    while (measuredDistance < distance):
      sleep(0.1)
      measuredDistance = point_dist(get_actual_tcp_pose(), startingPose)
    end
  
    return measuredDistance
  end
  
  def startStopPumpOnDistanceTravelledThread(distance, gripper_socket="1"):
    if (stopPumpThreadStarted[rq_socket_to_index(gripper_socket)]):
      return 0
    end
  
    global stopPumpDistance = distance
    global stopPumpSocketId = gripper_socket
    stopPumpThreadHandles[rq_socket_to_index(gripper_socket)] = run stopPumpOnDistanceTravelled()
    waitForStopPumpOnDistanceTravelledThreadStarted(gripper_socket)
    return stopPumpThreadHandles[rq_socket_to_index(gripper_socket)]
  end
  
  def waitForStopPumpOnDistanceTravelledThreadStarted(gripper_socket="1"):
    while (not(stopPumpThreadStarted[rq_socket_to_index(gripper_socket)])):
      sleep(0.008)
    end
  end
  
  def stopStopPumpOnDistanceTravelledThread(gripper_socket="1"):
    handle = stopPumpThreadHandles[rq_socket_to_index(gripper_socket)]
    threadIsRunning = stopPumpThreadStarted[rq_socket_to_index(gripper_socket)]
    if (threadIsRunning):
      kill handle
      clear_socket_buffer(gripper_socket, 0.01)
      stopPumpThreadHandles[rq_socket_to_index(gripper_socket)] = 0
    end
  end
  #################################################
  # End - Stops the pump on a distance travelled
  #################################################
  
  #################################################
  # Vacuum general functions
  #################################################
  def rq_wait_for_vacuum_object_detected(gripper_socket="1"):
      while (not rq_is_vacuum_obj_detected(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
          sleep(0.008)
      end
      return True
  end
  
  def rq_wait_for_vacuum_object_secured(gripper_socket="1"):
      while (not rq_is_vacuum_obj_secured(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
          sleep(0.008)
      end
      return True
  end
  
  def rq_wait_for_vacuum_object_suction_complete(gripper_socket="1"):
      remaining_retries = 50
  
       # Wait for suction started
      while (not rq_is_vacuum_obj_in_suction(gripper_socket) and
             not rq_is_vacuum_obj_detected(gripper_socket) and
             remaining_retries > 0):
          sleep(0.01)
          remaining_retries = remaining_retries - 1
      end
  
      # Wait for suction completed
      while (rq_is_vacuum_obj_in_suction(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
          sleep(0.01)
      end
  
      return True
  end
  
  def rq_wait_for_vacuum_object_not_detected(gripper_socket="1"):
      while (rq_is_vacuum_obj_detected(gripper_socket)):
          sleep(0.01)
      end
  end
  
  def rq_is_vacuum_obj_detected(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_vacuum_OBJ_object_detected(gOBJ)
  end
  
  def rq_is_vacuum_obj_secured(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_vacuum_OBJ_object_secured(gOBJ)
  end
  
  def rq_is_vacuum_obj_in_suction(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
  
      if(is_vacuum_OBJ_object_in_motion(gOBJ)):
          return True
      else:
          return False
      end
  end
  
  def rq_is_vacuum_timeout(gripper_socket="1"):
      gFLT = rq_get_var("FLT", 2, gripper_socket)
      sleep(0.008)
  
      if(gFLT ==6):
          return True
      end
  
      return False
  end
  
  def is_vacuum_OBJ_object_in_motion(gOBJ):
      if (gOBJ == 0):
          return True
      end
  
      return False
  end
  
  def is_vacuum_OBJ_object_detected(gOBJ):
      if (gOBJ == 1 or gOBJ == 2):
          return True
      end
  
      return False
  end
  
  def is_vacuum_OBJ_object_secured(gOBJ):
      if (gOBJ == 2):
          return True
      end
  
      return False
  end
  
  def rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket="1"):
      rq_set_pos_spd_for(pressure, timeout, minimum, gripper_socket)
  end
  
  def rq_set_vacuum_and_wait(pressure, timeout, minimum, mode, gripper_socket="1"):
      rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket)
      gPRE = rq_get_var("PRE", 3, gripper_socket)
      while (gPRE != pressure):
          rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket)
          sleep(0.008)
          gPRE = rq_get_var("PRE", 3, gripper_socket)
      end
  
      rq_set_gripper_mode(mode, gripper_socket)
      gMOD = rq_get_var("MOD", 3, gripper_socket)
      while (gMOD != mode):
          rq_set_gripper_mode(mode, gripper_socket)
          sleep(0.008)
          gMOD = rq_get_var("MOD", 3, gripper_socket)
     end
  end
  
  def is_FLT_vacuum_timeout(gFLT):
    if (gFLT == 6):
        return True
    end
  
    return False
  end
  
  def is_continuous_grip(maximum_vacuum):
    return maximum_vacuum == 0
  end
  
  def rq_vacuum_release(advanced_mode=False, shutoff_distance_cm=5, wait_for_object_released=True, gripper_socket="1"):
    local shutoff_distance = scale(shutoff_distance_cm, [0, 99], [0.00, 0.99])
    local pressure = 255
    local minimum = 0
    local timeout = 255
    rq_vacuum_release_raw(advanced_mode, pressure, minimum, timeout, shutoff_distance, wait_for_object_released, gripper_socket)
  end
  
  def rq_vacuum_release_raw(advanced_mode, pressure, minimum, timeout, shutoff_distance, wait_for_object_released, gripper_socket):
    rq_reset_fault_and_activate(gripper_socket)
  
    if advanced_mode:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 1, gripper_socket)
    else:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 0, gripper_socket)
    end
  
    # The following patch is for Robotiq's Camera issue when communication is lost, but not the activation
    # the communication driver reset the GTO bit
    rq_set_GTO_and_wait(1, gripper_socket)
  
    if wait_for_object_released:
      while (rq_is_vacuum_obj_detected(gripper_socket)):
  
        if advanced_mode:
          rq_set_vacuum_and_wait(pressure, timeout, minimum, 1, gripper_socket)
        else:
          rq_set_vacuum_and_wait(pressure, timeout, minimum, 0, gripper_socket)
        end
  
        # The following patch is for Robotiq's Camera issue when communication is lost, but not the activation
        # the communication driver reset the GTO bit
        rq_set_GTO_and_wait(1, gripper_socket)
        sleep(0.01)
      end
    end
  
    if advanced_mode:
      startStopPumpOnDistanceTravelledThread(shutoff_distance, gripper_socket)
    end
  end
  
  def rq_vacuum_grip(advanced_mode=False, maximum_vacuum=60, minimum_vacuum=40, timeout_ms=3000, wait_for_object_detected=True, gripper_socket="1"):
    local pressure = scale(maximum_vacuum, [0, 100], [100, 0])
    local minimum = scale(minimum_vacuum, [0, 100], [100, 0])
    local timeout = scale(timeout_ms, [0, 25500], [0, 255])
    rq_vacuum_grip_raw(advanced_mode, pressure, minimum, timeout, gripper_socket)
    if wait_for_object_detected:
          suction_completed = rq_wait_for_vacuum_object_suction_complete(gripper_socket)
          if(not suction_completed):
              rq_set_var("GTO", 0, gripper_socket)
          end
    end
  end
  
  def rq_vacuum_grip_raw(advanced_mode, pressure, minimum, timeout, gripper_socket):
    stopStopPumpOnDistanceTravelledThread(gripper_socket)
    rq_reset_fault_and_activate(gripper_socket)
  
    if advanced_mode:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 1, gripper_socket)
    else:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 0, gripper_socket)
    end
  
    rq_set_GTO_and_wait(1, gripper_socket)
  end
  
  def rq_reset_fault_and_activate(gripper_socket):
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      if(not is_FLT_no_fault(gFLT)):
          if(is_FLT_vacuum_timeout(gFLT)):
              rq_set_GTO_and_wait(0, gripper_socket)
          elif(is_FLT_faulted(gFLT)):
              rq_set_GTO_and_wait(0, gripper_socket)
              rq_set_var("ACT", 1, gripper_socket)
          end
      elif(not rq_is_gripper_activated(gripper_socket)):
          rq_set_GTO_and_wait(0, gripper_socket)
          rq_set_var("ACT", 1, gripper_socket)
      end
  end
  #################################################
  # End - Vacuum general functions
  #################################################
  vacuumGripCheckWarningTitle = "Überprüfung des Unterdruckgreifers"
  vacuumGripCheckWarningMessage = "Unterdruckgreifer hat Objekt verloren"
  vacuumGripTimeoutTitle = "Fehler am Unterdruckgreifer"
  vacuumGripTimeoutMessage = "Zeitüberschreitung beim Greifvorgang"
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Greifer
  rq_gripper_socket_ip_address = "127.0.0.1"
  rq_gripper_socket_port = 63352
  
  rq_comm_check_fail_counter = [0, 0, 0, 0]
  
  rq_read_act = [-1, -1, -1, -1]
  rq_read_gto = [-1, -1, -1, -1]
  rq_read_for = [-1, -1, -1, -1]
  rq_read_spe = [-1, -1, -1, -1]
  rq_read_obj = [-1, -1, -1, -1]
  rq_read_sta = [-1, -1, -1, -1]
  rq_read_flt = [-1, -1, -1, -1]
  rq_read_pos = [-1, -1, -1, -1]
  rq_read_pre = [-1, -1, -1, -1]
  rq_read_lbp = [-1, -1, -1, -1]
  rq_read_lrd = [-1, -1, -1, -1]
  rq_read_lbl = [-1, -1, -1, -1]
  rq_read_lgn = [-1, -1, -1, -1]
  rq_read_msc = [-1, -1, -1, -1]
  rq_read_mod = [-1, -1, -1, -1]
  rq_read_cou = [-1, -1, -1, -1]
  rq_read_ncy = [-1, -1, -1, -1]
  rq_read_dst = [-1, -1, -1, -1]
  rq_read_pco = [-1, -1, -1, -1]
  
  rq_string_initial_value = "N/A"
  
  rq_read_snu_1 = rq_string_initial_value
  rq_read_snu_2 = rq_string_initial_value
  rq_read_snu_3 = rq_string_initial_value
  rq_read_snu_4 = rq_string_initial_value
  
  rq_read_fwv_1 = rq_string_initial_value
  rq_read_fwv_2 = rq_string_initial_value
  rq_read_fwv_3 = rq_string_initial_value
  rq_read_fwv_4 = rq_string_initial_value
  
  rq_read_ver_1 = rq_string_initial_value
  rq_read_ver_2 = rq_string_initial_value
  rq_read_ver_3 = rq_string_initial_value
  rq_read_ver_4 = rq_string_initial_value
  
  rq_read_act_req = [True, True, True, True]
  rq_read_gto_req = [True, True, True, True]
  rq_read_for_req = [True, True, True, True]
  rq_read_spe_req = [True, True, True, True]
  rq_read_obj_req = [True, True, True, True]
  rq_read_sta_req = [True, True, True, True]
  rq_read_flt_req = [True, True, True, True]
  rq_read_pos_req = [True, True, True, True]
  rq_read_pre_req = [True, True, True, True]
  rq_read_lbp_req = [True, True, True, True]
  rq_read_lrd_req = [True, True, True, True]
  rq_read_lbl_req = [True, True, True, True]
  rq_read_lgn_req = [True, True, True, True]
  rq_read_msc_req = [True, True, True, True]
  rq_read_mod_req = [True, True, True, True]
  rq_read_cou_req = [True, True, True, True]
  rq_read_ncy_req = [True, True, True, True]
  rq_read_dst_req = [True, True, True, True]
  rq_read_pco_req = [True, True, True, True]
  
  rq_read_snu_1_req = False
  rq_read_snu_2_req = False
  rq_read_snu_3_req = False
  rq_read_snu_4_req = False
  
  rq_read_fwv_1_req = False
  rq_read_fwv_2_req = False
  rq_read_fwv_3_req = False
  rq_read_fwv_4_req = False
  
  rq_read_ver_1_req = False
  rq_read_ver_2_req = False
  rq_read_ver_3_req = False
  rq_read_ver_4_req = False
  
  rq_write_act_request = [False, False, False, False]
  rq_write_gto_request = [False, False, False, False]
  rq_write_atr_request = [False, False, False, False]
  rq_write_ard_request = [False, False, False, False]
  rq_write_pos_request = [False, False, False, False]
  rq_write_lbp_request = [False, False, False, False]
  rq_write_lrd_request = [False, False, False, False]
  rq_write_lbl_request = [False, False, False, False]
  rq_write_lgn_request = [False, False, False, False]
  rq_write_msc_request = [False, False, False, False]
  rq_write_mod_request = [False, False, False, False]
  
  rq_write_act = [-1, -1, -1, -1]
  rq_write_gto = [-1, -1, -1, -1]
  rq_write_atr = [-1, -1, -1, -1]
  rq_write_ard = [-1, -1, -1, -1]
  rq_write_for = [-1, -1, -1, -1]
  rq_write_spe = [-1, -1, -1, -1]
  rq_write_pos = [-1, -1, -1, -1]
  rq_write_lbp = [-1, -1, -1, -1]
  rq_write_lrd = [-1, -1, -1, -1]
  rq_write_lbl = [-1, -1, -1, -1]
  rq_write_lgn = [-1, -1, -1, -1]
  rq_write_msc = [-1, -1, -1, -1]
  rq_write_mod = [-1, -1, -1, -1]
  
  rq_write_act_previous = rq_write_act
  rq_write_gto_previous = rq_write_gto
  rq_write_atr_previous = rq_write_atr
  rq_write_ard_previous = rq_write_ard
  rq_write_for_previous = rq_write_for
  rq_write_spe_previous = rq_write_spe
  rq_write_pos_previous = rq_write_pos
  rq_write_lbp_previous = rq_write_lbp
  rq_write_lrd_previous = rq_write_lrd
  rq_write_lbl_previous = rq_write_lbl
  rq_write_lgn_previous = rq_write_lgn
  rq_write_msc_previous = rq_write_msc
  rq_write_mod_previous = rq_write_mod
  
  gripper_connected = [False, False, False, False]
  gripper_socket_open = [False, False, False, False]
  rq_comm_clear_socket_buffer_enabled = [True, True, True, True]
  rq_comm_check_counter = 0
  rq_gripper_communication_thread_started = False
  
  thread rq_gripper_communication():
      rq_comm_read_constants()
      rq_comm_read_variables()
      rq_comm_initialize_write_values()
  
      while(True):
          rq_comm_clear_socket_buffer()
          rq_comm_check()
          rq_comm_read_variables()
          rq_comm_write_variables()
  
          rq_gripper_communication_thread_started = True
          sleep(0.008)
      end
  end
  
  def rq_socket_to_index(gripper_socket="1"):
      # Patch in case gripper_socket is an integer
      gripper_socket_string = str_cat("", gripper_socket)
  
      if(gripper_socket_string == "1"):
          return 0
      elif(gripper_socket_string == "2"):
          return 1
      elif(gripper_socket_string == "3"):
          return 2
      elif(gripper_socket_string == "4"):
          return 3
      end
      return 0
  end
  
  def rq_index_to_socket(index=0):
      if(index == 0):
          return "1"
      elif(index == 1):
          return "2"
      elif(index == 2):
          return "3"
      elif(index == 3):
          return "4"
      end
      return "1"
  end
  
  def rq_comm_check():
      index = 0
      rq_comm_check_fail_counter_max = 99999
  
      if(rq_comm_check_counter < 50):
          rq_comm_check_counter = rq_comm_check_counter + 1
      else:
          rq_comm_check_counter = 0
  
          while(index <= 3):
              socket = rq_index_to_socket(index)
  
              if(gripper_connected[index]):
                  # Patch in case gripper_socket is an integer
                  gripper_socket_string = str_cat("", socket)
  
                  sid_list = rq_get_sid(socket)
                  is_gripper_in_sid_list = rq_is_gripper_in_sid_list(gripper_socket_string, sid_list)
  
                  if(is_gripper_in_sid_list):
                      rq_comm_check_fail_counter[index] = 0
                  else:
                      rq_comm_check_fail_counter[index] = rq_comm_check_fail_counter[index] + 1
                  end
  
                  if(rq_comm_check_fail_counter[index] > rq_comm_check_fail_counter_max):
                      message = str_cat("Communication lost with Robotiq's Gripper Slave ID ", gripper_socket_string)
                      popup(message, "Communication Error", False, True, True)
                  end
              end
              index = index + 1
          end
      end
  end
  
  def rq_init_comm_if_connected(gripper_sid=9, gripper_socket="1"):
      if(not is_gripper_socket_open(gripper_socket)):
        open_gripper_socket(gripper_socket)
      end
  
      socket_sid_set = rq_set_sid(gripper_sid, gripper_socket)
  
      if(socket_sid_set):
          # Patch in case gripper_socket is an integer
          gripper_socket_string = str_cat("", gripper_socket)
  
          sid_list = rq_get_sid(gripper_socket)
          is_gripper_in_sid_list = rq_is_gripper_in_sid_list(gripper_socket_string, sid_list)
  
          if(is_gripper_in_sid_list):
              rq_set_gripper_connected(gripper_socket_string)
              return True
          end
      end
  
      return False
  end
  
  def open_gripper_socket(gripper_socket="1"):
      is_open = socket_open(rq_gripper_socket_ip_address, rq_gripper_socket_port, gripper_socket)
      set_gripper_socket_open(gripper_socket, is_open)
  end
  
  def rq_close_gripper_socket(gripper_socket="1"):
      socket_close(gripper_socket)
      set_gripper_socket_open(gripper_socket, False)
      rq_set_gripper_connected(gripper_socket, False)
  end
  
  
  def is_gripper_socket_open(gripper_socket="1"):
      return gripper_socket_open[rq_socket_to_index(gripper_socket)]
  end
  
  def set_gripper_socket_open(gripper_socket, is_open):
      gripper_socket_open[rq_socket_to_index(gripper_socket)] = is_open
  end
  
  def rq_set_gripper_connected(gripper_socket="1", connected = True):
      gripper_connected[rq_socket_to_index(gripper_socket)] = connected
  end
  
  def rq_is_gripper_connected(gripper_id="1"):
      return gripper_connected[rq_socket_to_index(gripper_id)]
  end
  
  def rq_set_sid(gripper_sid=9, gripper_socket="1"):
      socket_set_var("SID", gripper_sid,  gripper_socket)
      ack = socket_read_byte_list(3, gripper_socket)
      return is_ack(ack)
  end
  
  def rq_get_sid(gripper_socket="1"):
      socket_send_string("GET SID", gripper_socket)
      sid_list = socket_read_byte_list(17, gripper_socket)
      return sid_list
  end
  
  def rq_wait_for_gripper_connected():
      gripper_socket = "gripper_conn_socket"
      socket_open(rq_gripper_socket_ip_address, rq_gripper_socket_port, gripper_socket)
  
      remainingRetries = 2000
      sid_list = rq_get_sid(gripper_socket)
      gripper_is_connected = rq_is_any_gripper_connected(sid_list)
  
      while(not gripper_is_connected and remainingRetries > 0):
          remainingRetries = remainingRetries - 1
          sid_list = rq_get_sid(gripper_socket)
          gripper_is_connected = rq_is_any_gripper_connected(sid_list)
      end
  
      socket_close(gripper_socket)
  end
  
  def rq_is_any_gripper_connected(sid_list):
      is_gripper_1_connected = rq_is_gripper1_in_sid_list(sid_list)
      is_gripper_2_connected = rq_is_gripper2_in_sid_list(sid_list)
      is_gripper_3_connected = rq_is_gripper3_in_sid_list(sid_list)
      is_gripper_4_connected = rq_is_gripper4_in_sid_list(sid_list)
  
      return is_gripper_1_connected or is_gripper_2_connected or is_gripper_3_connected or is_gripper_4_connected
  end
  
  def rq_is_gripper_ascii_in_sid_list(gripper_ascii_sid, sid_list):
      sid_list_length = sid_list[0]
      sid_list_empty_length = 2
  
      if (sid_list_length <= sid_list_empty_length):
          return False
      end
  
      sid1 = sid_list[2]
      sid2 = sid_list[5]
      sid3 = sid_list[8]
      sid4 = sid_list[11]
  
      return sid1 == gripper_ascii_sid or sid2 == gripper_ascii_sid or sid3 == gripper_ascii_sid or sid4 == gripper_ascii_sid
  end
  
  def rq_is_gripper_in_sid_list(gripper_socket_string, sid_list):
      if(gripper_socket_string == "1"):
          return rq_is_gripper1_in_sid_list(sid_list)
      elif(gripper_socket_string == "2"):
          return rq_is_gripper2_in_sid_list(sid_list)
      elif(gripper_socket_string == "3"):
          return rq_is_gripper3_in_sid_list(sid_list)
      elif(gripper_socket_string == "4"):
          return rq_is_gripper4_in_sid_list(sid_list)
      end
      return False
  end
  
  def rq_is_gripper1_in_sid_list(sid_list):
      gripper_1_sid_ascii = 57
      return rq_is_gripper_ascii_in_sid_list(gripper_1_sid_ascii, sid_list)
  end
  
  def rq_is_gripper2_in_sid_list(sid_list):
      gripper_2_sid_ascii = 50
      return rq_is_gripper_ascii_in_sid_list(gripper_2_sid_ascii, sid_list)
  end
  
  def rq_is_gripper3_in_sid_list(sid_list):
      gripper_3_sid_ascii = 51
      return rq_is_gripper_ascii_in_sid_list(gripper_3_sid_ascii, sid_list)
  end
  
  def rq_is_gripper4_in_sid_list(sid_list):
      gripper_4_sid_ascii = 52
      return rq_is_gripper_ascii_in_sid_list(gripper_4_sid_ascii, sid_list)
  end
  
  def rq_comm_clear_socket_buffer():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index] and rq_comm_clear_socket_buffer_enabled[index]):
              byte_in_buffer = socket_read_byte_list(1, socket, 0.002)
              while(byte_in_buffer[0] >= 1):
                  byte_in_buffer = socket_read_byte_list(1, socket, 0.002)
              end
              rq_comm_clear_socket_buffer_enabled[index] = False
          end
          index = index + 1
      end
  end
  
  def rq_comm_initialize_write_values():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index]):
  
              if(rq_write_act[index] == -1 and rq_read_act[index] != -1):
                  rq_write_act[index] = rq_read_act[index]
                  rq_write_act_previous[index] = rq_read_act[index]
              elif(rq_write_act_previous[index] == -1 and rq_read_act[index] != -1):
                  rq_write_act_previous[index] = rq_read_act[index]
              end
  
              if(rq_write_gto[index] == -1 and rq_read_gto[index] != -1):
                  rq_write_gto[index] = rq_read_gto[index]
                  rq_write_gto_previous[index] = rq_read_gto[index]
              elif(rq_write_gto_previous[index] == -1 and rq_read_gto[index] != -1):
                  rq_write_gto_previous[index] = rq_read_gto[index]
              end
  
              if(rq_write_for[index] == -1 and rq_read_for[index] != -1):
                  rq_write_for[index] = rq_read_for[index]
                  rq_write_for_previous[index] = rq_read_for[index]
              elif(rq_write_for_previous[index] == -1 and rq_read_for[index] != -1):
                  rq_write_for_previous[index] = rq_read_for[index]
              end
  
              if(rq_write_spe[index] == -1 and rq_read_spe[index] != -1):
                  rq_write_spe[index] = rq_read_spe[index]
                  rq_write_spe_previous[index] = rq_read_spe[index]
              elif(rq_write_spe_previous[index] == -1 and rq_read_spe[index] != -1):
                  rq_write_spe_previous[index] = rq_read_spe[index]
              end
  
              if(rq_write_pos[index] == -1 and rq_read_pos[index] != -1):
                  rq_write_pos[index] = rq_read_pos[index]
                  rq_write_pos_previous[index] = rq_read_pos[index]
              elif(rq_write_pos_previous[index] == -1 and rq_read_pos[index] != -1):
                  rq_write_pos_previous[index] = rq_read_pos[index]
              end
  
              if(rq_write_lbp[index] == -1 and rq_read_lbp[index] != -1):
                  rq_write_lbp[index] = rq_read_lbp[index]
                  rq_write_lbp_previous[index] = rq_read_lbp[index]
              elif(rq_write_lbp_previous[index] == -1 and rq_read_lbp[index] != -1):
                  rq_write_lbp_previous[index] = rq_read_lbp[index]
              end
  
              if(rq_write_lrd[index] == -1 and rq_read_lrd[index] != -1):
                  rq_write_lrd[index] = rq_read_lrd[index]
                  rq_write_lrd_previous[index] = rq_read_lrd[index]
              elif(rq_write_lrd_previous[index] == -1 and rq_read_lrd[index] != -1):
                  rq_write_lrd_previous[index] = rq_read_lrd[index]
              end
  
              if(rq_write_lbl[index] == -1 and rq_read_lbl[index] != -1):
                  rq_write_lbl[index] = rq_read_lbl[index]
                  rq_write_lbl_previous[index] = rq_read_lbl[index]
              elif(rq_write_lbl_previous[index] == -1 and rq_read_lbl[index] != -1):
                  rq_write_lbl_previous[index] = rq_read_lbl[index]
              end
  
              if(rq_write_lgn[index] == -1 and rq_read_lgn[index] != -1):
                  rq_write_lgn[index] = rq_read_lgn[index]
                  rq_write_lgn_previous[index] = rq_read_lgn[index]
              elif(rq_write_lgn_previous[index] == -1 and rq_read_lgn[index] != -1):
                  rq_write_lgn_previous[index] = rq_read_lgn[index]
              end
  
              if(rq_write_msc[index] == -1 and rq_read_msc[index] != -1):
                  rq_write_msc[index] = rq_read_msc[index]
                  rq_write_msc_previous[index] = rq_read_msc[index]
              elif(rq_write_msc_previous[index] == -1 and rq_read_msc[index] != -1):
                  rq_write_msc_previous[index] = rq_read_msc[index]
              end
  
              if(rq_write_mod[index] == -1 and rq_read_mod[index] != -1):
                  rq_write_mod[index] = rq_read_mod[index]
                  rq_write_mod_previous[index] = rq_read_mod[index]
              elif(rq_write_mod_previous[index] == -1 and rq_read_mod[index] != -1):
                  rq_write_mod_previous[index] = rq_read_mod[index]
              end
  
          end
          index = index + 1
      end
  end
  
  def rq_comm_set_var(var, value=0, gripper_socket="1"):
      socket_set_var(var, value, gripper_socket)
      return socket_read_byte_list(3, gripper_socket)
  end
  
  def rq_comm_set_pos_spe_for(pos=0, speed=0, force=0, gripper_socket="1"):
      socket_send_string("SET POS", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(pos, gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string("SPE", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(speed, gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string("FOR", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(force, gripper_socket)
      socket_send_byte(10, gripper_socket)
      return socket_read_byte_list(3, gripper_socket)
  end
  
  def rq_comm_read_variables():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index]):
  
              if(rq_read_act_req[index]):
                  rq_read_act[index] = socket_get_var("ACT", socket)
                  rq_read_act_req[index] = False
              end
  
              if(rq_read_gto_req[index]):
                  rq_read_gto[index] = socket_get_var("GTO", socket)
                  rq_read_gto_req[index] = False
              end
  
              if(rq_read_pre_req[index]):
                  rq_read_pre[index] = socket_get_var("PRE", socket)
                  rq_read_pre_req[index] = False
              end
  
              if(rq_read_pos_req[index]):
                  rq_read_pos[index] = socket_get_var("POS", socket)
                  rq_read_pos_req[index] = False
              end
  
              if(rq_read_spe_req[index]):
                  rq_read_spe[index] = socket_get_var("SPE", socket)
                  rq_read_spe_req[index] = False
              end
  
              if(rq_read_for_req[index]):
                  rq_read_for[index] = socket_get_var("FOR", socket)
                  rq_read_for_req[index] = False
              end
  
              if(rq_read_obj_req[index]):
                  rq_read_obj[index] = socket_get_var("OBJ", socket)
                  rq_read_obj_req[index] = False
              end
  
              if(rq_read_sta_req[index]):
                  rq_read_sta[index] = socket_get_var("STA", socket)
                  rq_read_sta_req[index] = False
              end
  
              if(rq_read_mod_req[index]):
                  rq_read_mod[index] = socket_get_var("MOD", socket)
                  rq_read_mod_req[index] = False
              end
  
              if(rq_read_flt_req[index]):
                  rq_read_flt[index] = socket_get_var("FLT",socket)
                  rq_read_flt_req[index] = False
              end
  
              if(rq_read_lbp_req[index]):
                  rq_read_lbp[index] = socket_get_var("LBP", socket)
                  rq_read_lbp_req[index] = False
              end
  
              if(rq_read_lrd_req[index]):
                  rq_read_lrd[index] = socket_get_var("LRD", socket)
                  rq_read_lrd_req[index] = False
              end
  
              if(rq_read_lbl_req[index]):
                  rq_read_lbl[index] = socket_get_var("LBL",socket)
                  rq_read_lbl_req[index] = False
              end
  
              if(rq_read_lgn_req[index]):
                  rq_read_lgn[index] = socket_get_var("LGN", socket)
                  rq_read_lgn_req[index] = False
              end
  
              if(rq_read_msc_req[index]):
                  rq_read_msc[index] = socket_get_var("MSC", socket)
                  rq_read_msc_req[index] = False
              end
  
              if(rq_read_cou_req[index]):
                  rq_read_cou[index] = socket_get_var("COU", socket)
                  rq_read_cou_req[index] = False
              end
  
              if(rq_read_ncy_req[index]):
                  rq_read_ncy[index] = socket_get_var("NCY", socket)
                  rq_read_ncy_req[index] = False
              end
  
              if(rq_read_dst_req[index]):
                  rq_read_dst[index] = socket_get_var("DST", socket)
                  rq_read_dst_req[index] = False
              end
  
              if(rq_read_pco_req[index]):
                  rq_read_pco[index] = socket_get_var("PCO", socket)
                  rq_read_pco_req[index] = False
              end
          end
          index = index + 1
      end
  end
  
  def rq_comm_read_constants():
  
      if(gripper_connected[0]):
          while(rq_read_snu_1 == rq_string_initial_value):
              socket_send_string("GET SNU", "1")
              rq_read_snu_1 = socket_read_string("1")
          end
  
          while(rq_read_fwv_1 == rq_string_initial_value):
              socket_send_string("GET FWV", "1")
              rq_read_fwv_1 = socket_read_string("1")
          end
  
          while(rq_read_ver_1 == rq_string_initial_value):
              socket_send_string("GET VER", "1")
              rq_read_ver_1 = socket_read_string("1")
          end
      end
  
      if(gripper_connected[1]):
          while(rq_read_snu_2 == rq_string_initial_value):
              socket_send_string("GET SNU", "2")
              rq_read_snu_2 = socket_read_string("2")
          end
  
          while(rq_read_fwv_2 == rq_string_initial_value):
              socket_send_string("GET FWV", "2")
              rq_read_fwv_2 = socket_read_string("2")
          end
  
          while(rq_read_ver_2 == rq_string_initial_value):
              socket_send_string("GET VER", "2")
              rq_read_ver_2 = socket_read_string("2")
          end
      end
  
      if(gripper_connected[2]):
          while(rq_read_snu_3 == rq_string_initial_value):
              socket_send_string("GET SNU", "3")
              rq_read_snu_3 = socket_read_string("3")
          end
  
          while(rq_read_fwv_3 == rq_string_initial_value):
              socket_send_string("GET FWV", "3")
              rq_read_fwv_3 = socket_read_string("3")
          end
  
          while(rq_read_ver_3 == rq_string_initial_value):
              socket_send_string("GET VER", "3")
              rq_read_ver_3 = socket_read_string("3")
          end
      end
  
      if(gripper_connected[3]):
          while(rq_read_snu_4 == rq_string_initial_value):
              socket_send_string("GET SNU", "4")
              rq_read_snu_4 = socket_read_string("4")
          end
  
          while(rq_read_fwv_4 == rq_string_initial_value):
              socket_send_string("GET FWV", "4")
              rq_read_fwv_4 = socket_read_string("4")
          end
  
          while(rq_read_ver_4 == rq_string_initial_value):
              socket_send_string("GET VER", "4")
              rq_read_ver_4 = socket_read_string("4")
          end
      end
  end
  
  def rq_comm_write_variables():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index]):
  
              if(rq_write_act_request[index]):
                  if(is_ack(rq_comm_set_var("ACT", rq_write_act[index], socket))):
                      rq_write_act_previous[index] = rq_write_act[index]
                      rq_write_act_request[index] = False
                  end
              end
  
              if(rq_write_gto_request[index]):
                  if(is_ack(rq_comm_set_var("GTO", rq_write_gto[index], socket))):
                      rq_write_gto_previous[index] = rq_write_gto[index]
                      rq_write_gto_request[index] = False
                  end
              end
  
              if(rq_write_atr_request[index]):
                  if(is_ack(rq_comm_set_var("ATR", rq_write_atr[index], socket))):
                      rq_write_atr_previous[index] = rq_write_atr[index]
                      rq_write_atr_request[index] = False
                  end
              end
  
              if(rq_write_ard_request[index]):
                  if(is_ack(rq_comm_set_var("ARD", rq_write_ard[index], socket))):
                      rq_write_ard_previous[index] = rq_write_ard[index]
                      rq_write_ard_request[index] = False
                  end
              end
  
              if(rq_write_pos_request[index]):
                  if(is_ack(rq_comm_set_pos_spe_for(rq_write_pos[index], rq_write_spe[index], rq_write_for[index], socket))):
                      rq_write_pos_previous[index] = rq_write_pos[index]
                      rq_write_spe_previous[index] = rq_write_spe[index]
                      rq_write_for_previous[index] = rq_write_for[index]
                      rq_write_pos_request[index] = False
                  end
              end
  
              if(rq_write_lbp_request[index]):
                  if(is_ack(rq_comm_set_var("LBP", rq_write_lbp[index], socket))):
                      rq_write_lbp_previous[index] = rq_write_lbp[index]
                      rq_write_lbp_request[index] = False
                  end
              end
  
              if(rq_write_lrd_request[index]):
                  if(is_ack(rq_comm_set_var("LRD", rq_write_lrd[index], socket))):
                      rq_write_lrd_previous[index] = rq_write_lrd[index]
                      rq_write_lrd_request[index] = False
                  end
              end
  
              if(rq_write_lbl_request[index]):
                  if(is_ack(rq_comm_set_var("LBL", rq_write_lbl[index], socket))):
                      rq_write_lbl_previous[index] = rq_write_lbl[index]
                      rq_write_lbl_request[index] = False
                  end
              end
  
              if(rq_write_lgn_request[index]):
                  if(is_ack(rq_comm_set_var("LGN", rq_write_lgn[index], socket))):
                      rq_write_lgn_previous[index] = rq_write_lgn[index]
                      rq_write_lgn_request[index] = False
                  end
              end
  
              if(rq_write_msc_request[index]):
                  if(is_ack(rq_comm_set_var("MSC", rq_write_msc[index], socket))):
                      rq_write_msc_previous[index] = rq_write_msc[index]
                      rq_write_msc_request[index] = False
                  end
              end
  
              if(rq_write_mod_request[index]):
                  if(is_ack(rq_comm_set_var("MOD", rq_write_mod[index], socket))):
                      rq_write_mod_previous[index] = rq_write_mod[index]
                      rq_write_mod_request[index] = False
                  end
              end
          end
          index = index + 1
      end
  end
  
  def rq_activate(gripper_socket="1"):
      if (not rq_is_gripper_activated(gripper_socket)):
          rq_reset(gripper_socket)
  
          while(not rq_get_var("ACT", 1, gripper_socket) == 0 or not rq_get_var("STA", 1, gripper_socket) == 0):
              rq_reset(gripper_socket)
              sleep(0.008)
          end
  
          rq_set_var("ACT",1, gripper_socket)
      end
  end
  
  def rq_activate_and_wait(gripper_socket="1"):
      if (not rq_is_gripper_activated(gripper_socket)):
          rq_activate(gripper_socket)
          sleep(1.0)
  
          while(not rq_get_var("ACT", 1, gripper_socket) == 1 or not rq_get_var("STA", 1, gripper_socket) == 3):
              sleep(0.1)
          end
  
          sleep(0.5)
      end
  end
  
  def rq_activate_all_grippers(reset=False):
      if(gripper_connected[0]):
          rq_reset_and_activate("1", reset)
      end
  
      if(gripper_connected[1]):
          rq_reset_and_activate("2", reset)
      end
  
      if(gripper_connected[2]):
          rq_reset_and_activate("3", reset)
      end
  
      if(gripper_connected[3]):
          rq_reset_and_activate("4", reset)
      end
  end
  
  def rq_reset_and_activate(gripper_socket="1", reset=False):
      if(reset):
          rq_reset(gripper_socket)
          rq_activate_and_wait(gripper_socket)
      elif(not rq_is_gripper_activated(gripper_socket)):
          rq_activate_and_wait(gripper_socket)
      end
  end
  
  def rq_reset(gripper_socket="1"):
      rq_set_var("ACT", 0, gripper_socket)
      rq_set_var("ATR", 0, gripper_socket)
  
      while(not rq_get_var("ACT", 1, gripper_socket) == 0 or not rq_get_var("STA", 1, gripper_socket) == 0):
          rq_set_var("ACT", 0, gripper_socket)
          rq_set_var("ATR", 0, gripper_socket)
          sleep(0.008)
      end
  
      sleep(0.5)
  end
  
  def rq_auto_release_open_and_wait(gripper_socket="1"):
      rq_set_var("ATR",0, gripper_socket)
      rq_set_var("ARD",0, gripper_socket)
      rq_set_var("ACT",1, gripper_socket)
      sleep(0.1)
      rq_set_var("ATR",1, gripper_socket)
  
      rq_wait_autorelease_completed(gripper_socket)
  end
  
  def rq_auto_release_close_and_wait(gripper_socket="1"):
      rq_set_var("ATR",0, gripper_socket)
      rq_set_var("ARD",1, gripper_socket)
      rq_set_var("ACT",1, gripper_socket)
      sleep(0.1)
      rq_set_var("ATR",1, gripper_socket)
  
      rq_wait_autorelease_completed(gripper_socket)
  end
  
  def rq_wait_autorelease_completed(gripper_socket="1"):
      remainingRetries = 20
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      while(not is_FLT_autorelease_in_progress(gFLT) and remainingRetries > 0):
          remainingRetries = remainingRetries - 1
          gFLT = rq_get_var("FLT", 2, gripper_socket)
          sleep(0.1)
      end
  
      remainingRetries = 100
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      while(not is_FLT_autorelease_completed(gFLT) and remainingRetries > 0):
          remainingRetries = remainingRetries - 1
          gFLT = rq_get_var("FLT", 2, gripper_socket)
          sleep(0.1)
      end
  end
  
  def rq_set_force(force, gripper_socket="1"):
      force = floor(scale(force, [0, 255], [0.0, 255.0]))
      rq_set_var("FOR", force, gripper_socket)
  end
  
  def rq_set_speed(speed, gripper_socket="1"):
      speed = floor(scale(speed, [0, 255], [0.0, 255.0]))
      rq_set_var("SPE", speed, gripper_socket)
  end
  
  def rq_open(gripper_socket="1"):
      rq_move(0, gripper_socket)
  end
  
  def rq_close(gripper_socket="1"):
      rq_move(255, gripper_socket)
  end
  
  def rq_open_and_wait(gripper_socket="1"):
      rq_move_and_wait(0, gripper_socket)
  end
  
  def rq_close_and_wait(gripper_socket="1"):
      rq_move_and_wait(255, gripper_socket)
  end
  
  def rq_move(pos, gripper_socket="1"):
      rq_set_pos(pos, gripper_socket)
      rq_go_to(gripper_socket)
  end
  
  def rq_move_and_wait(pos, gripper_socket="1"):
      rq_move(pos, gripper_socket)
  
      while (not rq_is_motion_complete(gripper_socket)):
          # wait for motion completed
          sleep(0.008)
      end
  end
  
  def rq_wait_for_pos_request(pos, gripper_socket="1"):
      gPRE = rq_get_var("PRE", 3, gripper_socket)
  
      while (gPRE != pos):
          rq_set_var("POS", pos, gripper_socket)
          sleep(0.008)
          gPRE = rq_get_var("PRE", 3, gripper_socket)
      end
  end
  
  def rq_wait_pos_spe_for_request(pos, speed, force, gripper_socket="1"):
      gPRE = rq_get_var("PRE", 3, gripper_socket)
  
      while (gPRE != pos):
          rq_set_pos_spe_for_var(pos, speed, force, gripper_socket)
          sleep(0.008)
          gPRE = rq_get_var("PRE", 3, gripper_socket)
      end
  end
  
  def rq_wait_for_pos(pos, gripper_socket="1"):
      rq_wait_for_pos_request(pos, gripper_socket)
  
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(gripper_socket)):
          # wait for motion completed
          sleep(0.008)
          rq_set_var("GTO", 1, gripper_socket)
      end
  end
  
  def rq_wait(gripper_socket="1"):
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(gripper_socket)):
          sleep(0.008)
          # The following patch is for Robotiq's Camera issue when communication is lost, but not the activation
          # the communication driver reset the GTO bit
          rq_set_var("GTO", 1, gripper_socket)
      end
  end
  
  def rq_wait_for_object_detected(gripper_socket="1"):
      # Wait the object detection
      while (not rq_is_object_detected(gripper_socket)):
          sleep(0.008)
      end
  end
  
  # set the position
  def rq_set_pos(pos, gripper_socket="1"):
      pos = floor(scale(pos, [0, 255], [0.0, 255.0]))
      rq_set_var("POS", pos, gripper_socket)
      rq_wait_for_pos_request(pos, gripper_socket)
  end
  
  def rq_set_pos_spd_for(pos, speed, force, gripper_socket="1"):
      pos = floor(scale(pos, [0, 255], [0.0, 255.0]))
      speed = floor(scale(speed, [0, 255], [0.0, 255.0]))
      force = floor(scale(force, [0, 255], [0.0, 255.0]))
  
      rq_set_pos_spe_for_var(pos, speed, force, gripper_socket)
  end
  
  def rq_set_gripper_max_current_mA(current_mA, gripper_socket="1"):
      current = floor(current_mA / 10)
  
      rq_set_var("MSC", current, gripper_socket)
      current_read = rq_get_var("MSC", 1, gripper_socket)
  
      while(current_read != current):
          rq_set_var("MSC", current, gripper_socket)
          current_read = rq_get_var("MSC", 1, gripper_socket)
      end
  end
  
  def rq_set_gripper_mode(mode, gripper_socket="1"):
      rq_set_var("MOD", mode, gripper_socket)
  end
  
  def rq_set_gripper_max_cur(current_mA, gripper_socket="1"):
      rq_set_gripper_max_current_mA(current_mA, gripper_socket)
  end
  
  def rq_get_gripper_max_current_mA(gripper_socket="1"):
      current = rq_get_var("MSC", 1, gripper_socket)
  
      if(current == -1):
          current_mA = current
      else:
          current_mA = current * 10
      end
  
      return current_mA
  end
  
  def rq_get_gripper_max_cur(gripper_socket="1"):
      return rq_get_gripper_max_current_mA(gripper_socket)
  end
  
  def rq_set_max_current_for_all_grippers():
      current_mA = rq_get_max_current_mA()
  
      if(gripper_connected[0]):
          rq_set_gripper_max_current_mA(current_mA, "1")
      end
  
      if(gripper_connected[1]):
          rq_set_gripper_max_current_mA(current_mA, "2")
      end
  
      if(gripper_connected[2]):
          rq_set_gripper_max_current_mA(current_mA, "3")
      end
  
      if(gripper_connected[3]):
          rq_set_gripper_max_current_mA(current_mA, "4")
      end
  end
  
  def rq_get_max_current_mA():
      max_current_mA = 0
  
      if(rq_current_limit_enabled):
          nb_connected_grippers = rq_get_nb_connected_grippers()
  
          if(nb_connected_grippers == 1):
              max_current_mA = 600
          elif(nb_connected_grippers > 1):
              max_current_mA = 450
          end
      else:
  
      end
  
      return max_current_mA
  end
  
  def rq_get_nb_connected_grippers():
      nb_connected_grippers = 0
  
      if(gripper_connected[0]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      if(gripper_connected[1]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      if(gripper_connected[2]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      if(gripper_connected[3]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      return nb_connected_grippers
  end
  
  def rq_list_of_bytes_to_value(list_of_bytes):
      value = -1
  
      # response list length
      if (list_of_bytes[0] == 1):
          value = list_of_bytes[1] - 48
      elif (list_of_bytes[0] == 2):
          value = (list_of_bytes[1] - 48) * 10 + (list_of_bytes[2] - 48)
      elif (list_of_bytes[0] == 3):
          value = (list_of_bytes[1] - 48) * 100 + (list_of_bytes[2] - 48) * 10 + (list_of_bytes[3] - 48)
      end
  
      return value
  end
  
  def rq_is_motion_complete(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_OBJ_gripper_at_position(gOBJ) or is_OBJ_object_detected(gOBJ)
  end
  
  def rq_is_gripper_activated(gripper_socket="1"):
      gSTA = rq_get_var("STA", 1, gripper_socket)
      sleep(0.008)
      return is_STA_gripper_activated(gSTA)
  end
  
  def rq_is_object_detected(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_OBJ_object_detected(gOBJ)
  end
  
  def rq_current_pos(gripper_socket="1"):
      gPOS = rq_get_var("POS", 1, gripper_socket)
      sleep(0.008)
      return gPOS
  end
  
  def rq_motor_current(gripper_socket="1"):
      rq_current = rq_get_var("COU", 1, gripper_socket)
      sleep(0.008)
      return rq_current * 10
  end
  
  def rq_print_connected_grippers():
      if(gripper_connected[0]):
          textmsg("Gripper 1 : ", "connected and socket open.")
      end
  
      if (gripper_connected[1]):
          textmsg("Gripper 2 : ", "connected and socket open.")
      end
  
      if (gripper_connected[2]):
          textmsg("Gripper 3 : ", "connected and socket open.")
      end
  
      if (gripper_connected[3]):
          textmsg("Gripper 4 : ", "connected and socket open.")
      end
  end
  
  def rq_print_gripper_fault_code(gripper_socket="1"):
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      if(is_FLT_no_fault(gFLT)):
          textmsg("Gripper Fault : ", "No Fault (0x00)")
      elif (is_FLT_action_delayed(gFLT)):
          textmsg("Gripper Fault : ", "Priority Fault: Action delayed, initialization must be completed prior to performing the action (0x05)")
      elif (is_FLT_not_activated(gFLT)):
          textmsg("Gripper Fault : ", "Priority Fault: The activation bit must be set prior to performing the action (0x07)")
      elif (is_FLT_over_temperature(gFLT)):
          textmsg("Gripper Fault : ", "Minor Fault: Maximum operating temperature exceeded (≥ 85°C internally), let cool down (below 80°C) (0x08)")
      elif (is_FLT_no_communication(gFLT)):
          textmsg("Gripper Fault : ", "Minor Fault: No communication during at least 1 second (0x09)")
      elif (is_FLT_under_voltage(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Under minimum operating voltage (0x0A)")
      elif (is_FLT_autorelease_in_progress(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Automatic release in progress (0x0B)")
      elif (is_FLT_internal_fault(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Internal fault; contact support@robotiq.com (0x0C)")
      elif (is_FLT_activation_error(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Activation fault; verify that no interference or other error occurred (0x0D)")
      elif (is_FLT_overcurrent(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Overcurrent triggered (0x0E)")
      elif (is_FLT_autorelease_completed(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Automatic release completed (0x0F)")
      else:
          textmsg("Gripper Fault : ", "Unknown Fault")
      end
  end
  
  def rq_print_gripper_num_cycles(gripper_socket="1"):
      num_cycles = rq_get_var("NCY", 1, gripper_socket)
  
      if(num_cycles == -1):
          textmsg("Gripper Cycle Number : ", "Number of cycles is unreachable.")
      else:
          textmsg("Gripper Cycle Number : ", num_cycles)
      end
  end
  
  def rq_print_gripper_driver_state(gripper_socket="1"):
      driver_state = rq_get_var("DST", 1, gripper_socket)
  
      if(driver_state == 0):
          textmsg("Gripper Driver State : ", "RQ_STATE_INIT")
      elif(driver_state == 1):
          textmsg("Gripper Driver State : ", "RQ_STATE_LISTEN")
      elif(driver_state == 2):
          textmsg("Gripper Driver State : ", "RQ_STATE_READ_INFO")
      elif(driver_state == 3):
          textmsg("Gripper Driver State : ", "RQ_STATE_ACTIVATION")
      else:
          textmsg("Gripper Driver State : ", "RQ_STATE_RUN")
      end
  end
  
  def rq_print_gripper_serial_number(gripper_socket="1"):
      serial_number = rq_get_var_string("SNU", 1, gripper_socket)
      textmsg("Gripper Serial Number : ", serial_number)
  end
  
  def rq_print_gripper_firmware_version(gripper_socket="1"):
      firmware_version = rq_get_var_string("FWV", 1, gripper_socket)
      textmsg("Gripper Firmware Version : ", firmware_version)
  end
  
  def rq_print_gripper_driver_version(gripper_socket="1"):
      driver_version = rq_get_var_string("VER", 1, gripper_socket)
      textmsg("Gripper Driver Version : ", driver_version)
  end
  
  def rq_print_gripper_connection_state(gripper_socket="1"):
      connection_state = rq_get_var("PCO", 1, gripper_socket)
  
      if (connection_state == 0):
          textmsg("Gripper Connection State : ", "No connection problem detected")
      else:
          textmsg("Gripper Connection State : ", "Connection problem detected")
      end
  end
  
  # Returns True if list_of_bytes is [3, 'a', 'c', 'k']
  def is_ack(list_of_bytes):
  
      # list length is not 3
      if (list_of_bytes[0] != 3):
          return False
      end
  
      # first byte not is 'a'?
      if (list_of_bytes[1] != 97):
          return False
      end
  
      # first byte not is 'c'?
      if (list_of_bytes[2] != 99):
          return False
      end
  
      # first byte not is 'k'?
      if (list_of_bytes[3] != 107):
          return False
      end
  
      return True
  end
  
  # Returns True if list_of_bytes is not [3, 'a', 'c', 'k']
  def is_not_ack(list_of_bytes):
      if (is_ack(list_of_bytes)):
          return False
      else:
          return True
      end
  end
  
  def is_STA_gripper_activated (gSTA):
      if (gSTA == 3):
          return True
      end
  
      return False
  end
  
  def is_OBJ_object_detected (gOBJ):
      if (gOBJ == 1 or gOBJ == 2):
          return True
      end
  
      return False
  end
  
  def is_OBJ_gripper_at_position (gOBJ):
      if (gOBJ == 3):
          return True
      end
  
      return False
  end
  
  def is_not_OBJ_gripper_at_position (gOBJ):
      if (is_OBJ_gripper_at_position(gOBJ)):
          return False
      else:
          return True
      end
  end
  
  #### GTO Section ####
  def rq_stop(gripper_socket="1"):
      rq_set_var("GTO", 0, gripper_socket)
  end
  
  def rq_set_GTO_and_wait(value, gripper_socket="1"):
      rq_set_var("GTO" ,value, gripper_socket)
      while(not is_GTO(value, rq_get_var("GTO", 1, gripper_socket))):
        sleep(0.008)
      end
  end
  
  def rq_go_to(gripper_socket="1"):
      rq_set_var("GTO", 1, gripper_socket)
  end
  
  
  def is_GTO(goto_value, rGTO):
      return rGTO == goto_value
  end
  #### GTO Section ####
  
  def is_FLT_no_fault(gFLT):
      return gFLT == 0
  end
  
  def is_FLT_warning(gFLT):
      return gFLT >= 1 and gFLT <= 7
  end
  
  def is_FLT_faulted(gFLT):
      return gFLT >= 8
  end
  
  def is_FLT_action_delayed(gFLT):
      return gFLT == 5
  end
  
  def is_FLT_not_activated(gFLT):
      return gFLT == 7
  end
  
  def is_FLT_over_temperature(gFLT):
      return gFLT == 8
  end
  
  def is_FLT_no_communication(gFLT):
      return gFLT == 9
  end
  
  def is_FLT_under_voltage(gFLT):
      return gFLT == 10
  end
  
  def is_FLT_autorelease_in_progress(gFLT):
      return gFLT == 11
  end
  
  def is_FLT_internal_fault(gFLT):
      return gFLT == 12
  end
  
  def is_FLT_activation_error(gFLT):
      return gFLT == 13
  end
  
  def is_FLT_overcurrent(gFLT):
      return gFLT == 14
  end
  
  def is_FLT_autorelease_completed(gFLT):
      return gFLT == 15
  end
  
  def rq_set_var(var_name, var_value, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
  
      enter_critical
  
      if (var_name == "ACT"):
          rq_write_act[index] = var_value
          rq_write_act_request[index] = True
      elif (var_name == "GTO"):
          rq_write_gto[index] = var_value
          rq_write_gto_request[index] = True
      elif (var_name == "ATR"):
          rq_write_atr[index] = var_value
          rq_write_atr_request[index] = True
      elif (var_name == "ARD"):
          rq_write_ard[index] = var_value
          rq_write_ard_request[index] = True
      elif (var_name == "FOR"):
          rq_write_for[index] = var_value
          rq_write_pos_request[index] = True
      elif (var_name == "SPE"):
          rq_write_spe[index] = var_value
          rq_write_pos_request[index] = True
      elif (var_name == "POS"):
          rq_write_pos[index] = var_value
          rq_write_pos_request[index] = True
      elif (var_name == "LBP"):
          rq_write_lbp[index] = var_value
          rq_write_lbp_request[index] = True
      elif (var_name == "LRD"):
          rq_write_lrd[index] = var_value
          rq_write_lrd_request[index] = True
      elif (var_name == "LBL"):
          rq_write_lbl[index] = var_value
          rq_write_lbl_request[index] = True
      elif (var_name == "LGN"):
          rq_write_lgn[index] = var_value
          rq_write_lgn_request[index] = True
      elif (var_name == "MSC"):
          rq_write_msc[index] = var_value
          rq_write_msc_request[index] = True
      elif (var_name == "MOD"):
          rq_write_mod[index] = var_value
          rq_write_mod_request[index] = True
      end
  
      exit_critical
  
      if (var_name == "ACT"):
          while(rq_write_act_request[index]):
              sleep(0.008)
          end
      elif (var_name == "GTO"):
          while(rq_write_gto_request[index]):
              sleep(0.008)
          end
      elif (var_name == "ATR"):
          while(rq_write_atr_request[index]):
              sleep(0.008)
          end
      elif (var_name == "ARD"):
          while(rq_write_ard_request[index]):
              sleep(0.008)
          end
      elif (var_name == "FOR"):
          while(rq_write_pos_request[index]):
              sleep(0.008)
          end
      elif (var_name == "SPE"):
          while(rq_write_pos_request[index]):
              sleep(0.008)
          end
      elif (var_name == "POS"):
          while(rq_write_pos_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LBP"):
          while(rq_write_lbp_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LRD"):
          while(rq_write_lrd_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LBL"):
          while(rq_write_lbl_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LGN"):
          while(rq_write_lgn_request[index]):
              sleep(0.008)
          end
      elif (var_name == "MSC"):
          while(rq_write_msc_request[index]):
              sleep(0.008)
          end
      elif (var_name == "MOD"):
          while(rq_write_mod_request[index]):
              sleep(0.008)
          end
      end
  end
  
  def rq_set_pos_spe_for_var(pos, speed, force, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
  
      enter_critical
  
      rq_write_for[index] = force
      rq_write_spe[index] = speed
      rq_write_pos[index] = pos
      rq_write_pos_request[index] = True
  
      exit_critical
  end
  
  def rq_get_var(var_name, nbr_bytes, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
      var_value = -1
  
      if (var_name == "ACT"):
          enter_critical
          rq_read_act_req[index] = True
          exit_critical
          while(rq_read_act_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_act[index]
  
      elif (var_name == "GTO"):
          enter_critical
          rq_read_gto_req[index] = True
          exit_critical
          while(rq_read_gto_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_gto[index]
  
      elif (var_name == "FOR"):
          enter_critical
          rq_read_for_req[index] = True
          exit_critical
          while(rq_read_for_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_for[index]
  
      elif (var_name == "SPE"):
          enter_critical
          rq_read_spe_req[index] = True
          exit_critical
          while(rq_read_spe_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_spe[index]
  
      elif (var_name == "OBJ"):
          enter_critical
          rq_read_obj_req[index] = True
          exit_critical
          while(rq_read_obj_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_obj[index]
  
      elif (var_name == "STA"):
          enter_critical
          rq_read_sta_req[index] = True
          exit_critical
          while(rq_read_sta_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_sta[index]
  
      elif (var_name == "FLT"):
          enter_critical
          rq_read_flt_req[index] = True
          exit_critical
          while(rq_read_flt_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_flt[index]
  
      elif (var_name == "POS"):
          enter_critical
          rq_read_pos_req[index] = True
          exit_critical
          while(rq_read_pos_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_pos[index]
  
      elif (var_name == "PRE"):
          enter_critical
          rq_read_pre_req[index] = True
          exit_critical
          while(rq_read_pre_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_pre[index]
  
      elif (var_name == "LBP"):
          enter_critical
          rq_read_lbp_req[index] = True
          exit_critical
          while(rq_read_lbp_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lbp[index]
  
      elif (var_name == "LRD"):
          enter_critical
          rq_read_lrd_req[index] = True
          exit_critical
          while(rq_read_lrd_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lrd[index]
  
      elif (var_name == "LBL"):
          enter_critical
          rq_read_lbl_req[index] = True
          exit_critical
          while(rq_read_lbl_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lbl[index]
  
      elif (var_name == "LGN"):
          enter_critical
          rq_read_lgn_req[index] = True
          exit_critical
          while(rq_read_lgn_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lgn[index]
  
      elif (var_name == "MSC"):
          enter_critical
          rq_read_msc_req[index] = True
          exit_critical
          while(rq_read_msc_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_msc[index]
  
      elif (var_name == "MOD"):
          enter_critical
          rq_read_mod_req[index] = True
          exit_critical
          while(rq_read_mod_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_mod[index]
  
      elif (var_name == "NCY"):
          enter_critical
          rq_read_ncy_req[index] = True
          exit_critical
          while(rq_read_ncy_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_ncy[index]
  
      elif (var_name == "PCO"):
          enter_critical
          rq_read_pco_req[index] = True
          exit_critical
          while(rq_read_pco_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_pco[index]
  
      elif (var_name == "DST"):
          enter_critical
          rq_read_dst_req[index] = True
          exit_critical
          while(rq_read_dst_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_dst[index]
  
      end
  
      return var_value
  end
  
  def rq_get_var_string(var_name, nbr_bytes, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
      var_value = ""
  
      enter_critical
  
      if (var_name == "SNU"):
          if(gripper_socket == "1"):
              var_value = rq_read_snu_1
          elif(gripper_socket == "2"):
              var_value = rq_read_snu_2
          elif(gripper_socket == "3"):
              var_value = rq_read_snu_3
          elif(gripper_socket == "4"):
              var_value = rq_read_snu_4
          end
      elif (var_name == "FWV"):
          if(gripper_socket == "1"):
              var_value = rq_read_fwv_1
          elif(gripper_socket == "2"):
              var_value = rq_read_fwv_2
          elif(gripper_socket == "3"):
              var_value = rq_read_fwv_3
          elif(gripper_socket == "4"):
              var_value = rq_read_fwv_4
          end
      elif (var_name == "VER"):
          if(gripper_socket == "1"):
              var_value = rq_read_ver_1
          elif(gripper_socket == "2"):
              var_value = rq_read_ver_2
          elif(gripper_socket == "3"):
              var_value = rq_read_ver_3
          elif(gripper_socket == "4"):
              var_value = rq_read_ver_4
          end
      end
  
      exit_critical
  
      return var_value
  end
  
  def rq_is_object_validated(gripper_selected, gripper_socket="1"):
      if(gripper_selected):
          if(rq_is_object_detected(gripper_socket)):
              return True
          else:
              return False
          end
      else:
          return True
      end
  end
  
  ############################################
  # normalized functions (maps 0-100 to 0-255)
  ############################################
  def rq_set_force_norm(force_norm, gripper_socket="1"):
      force_gripper = norm_to_gripper(force_norm)
      rq_set_force(force_gripper, gripper_socket)
  end
  
  def rq_set_speed_norm(speed_norm, gripper_socket="1"):
      speed_gripper = norm_to_gripper(speed_norm)
      rq_set_speed(speed_gripper, gripper_socket)
  end
  
  def rq_move_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_set_pos_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_set_pos(pos_gripper, gripper_socket)
  end
  
  def rq_current_pos_norm(gripper_socket="1"):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_norm = gripper_to_norm(pos_gripper)
      return pos_norm
  end
  
  def gripper_to_norm(value_gripper):
      value_norm = (value_gripper / 255) * 100
      return floor(value_norm)
  end
  
  def norm_to_gripper(value_norm):
      value_gripper = (value_norm / 100) * 255
      return ceil(value_gripper)
  end
  
  def rq_get_position():
      return rq_current_pos_norm()
  end
  
  def rq_gripper_led_on(gripper_socket="1"):
      rq_set_var("LBP",0, gripper_socket)
  end
  
  def rq_gripper_led_off(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",0, gripper_socket)
      rq_set_var("LBL",0, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  def rq_gripper_led_force_red(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",1, gripper_socket)
      rq_set_var("LBL",0, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  def rq_gripper_led_force_blue(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",0, gripper_socket)
      rq_set_var("LBL",1, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  def rq_gripper_led_force_green(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",0, gripper_socket)
      rq_set_var("LBL",0, gripper_socket)
      rq_set_var("LGN",1, gripper_socket)
  end
  
  def rq_gripper_led_force_purple(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",1, gripper_socket)
      rq_set_var("LBL",1, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  ############################################
  # mm/inches functions
  ############################################
  gripper_closed_norm = [100, 100, 100, 100]
  gripper_open_norm = [0, 0, 0, 0]
  gripper_closed_mm = [0, 0, 0, 0]
  gripper_open_mm = [50, 50, 50, 50]
  
  def rq_current_pos_mm(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      return round_value_2_dec(pos_mm)
  end
  
  def rq_current_pos_inches(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      pos_in = pos_mm / 25.4
      return round_value_2_dec(pos_in)
  end
  
  def rq_move_mm(pos_mm, gripper_socket=1):
      pos_gripper = mm_to_gripper(pos_mm, gripper_socket)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_mm(pos_mm, gripper_socket=1):
      pos_gripper = mm_to_gripper(pos_mm, gripper_socket)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_move_inches(pos_in, gripper_socket=1):
      pos_mm = pos_in * 25.4
      rq_move_mm(pos_mm, gripper_socket)
  end
  
  def rq_move_and_wait_inches(pos_in, gripper_socket=1):
      pos_mm = pos_in * 25.4
      rq_move_and_wait_mm(pos_mm, gripper_socket)
  end
  
  def get_closed_norm(gripper_socket):
      return gripper_closed_norm[gripper_socket - 1]
  end
  
  def get_open_norm(gripper_socket):
      return gripper_open_norm[gripper_socket - 1]
  end
  
  def get_closed_mm(gripper_socket):
      return gripper_closed_mm[gripper_socket - 1]
  end
  
  def get_open_mm(gripper_socket):
      return gripper_open_mm[gripper_socket - 1]
  end
  
  def set_closed_norm(closed_norm, gripper_socket):
      gripper_closed_norm[gripper_socket - 1] = closed_norm
  end
  
  def set_open_norm(open_norm, gripper_socket):
      gripper_open_norm[gripper_socket - 1] = open_norm
  end
  
  def set_closed_mm(closed_mm, gripper_socket):
      gripper_closed_mm[gripper_socket - 1] = closed_mm
  end
  
  def set_open_mm(open_mm, gripper_socket):
      gripper_open_mm[gripper_socket - 1] = open_mm
  end
  
  def gripper_to_mm(value_gripper, gripper_socket):
      closed_norm = get_closed_norm(gripper_socket)
      open_norm = get_open_norm(gripper_socket)
      closed_mm = get_closed_mm(gripper_socket)
      open_mm = get_open_mm(gripper_socket)
  
      value_norm = (value_gripper / 255) * 100
  
      slope = (closed_mm - open_mm) / (closed_norm - open_norm)
      value_mm = slope * (value_norm - closed_norm) + closed_mm
  
      if (value_mm > open_mm):
          value_mm_limited = open_mm
      elif (value_mm < closed_mm):
          value_mm_limited = closed_mm
      else:
          value_mm_limited = value_mm
      end
  
      return value_mm_limited
  end
  
  def mm_to_gripper(value_mm, gripper_socket):
      closed_norm = get_closed_norm(gripper_socket)
      open_norm = get_open_norm(gripper_socket)
      closed_mm = get_closed_mm(gripper_socket)
      open_mm = get_open_mm(gripper_socket)
  
      slope = (closed_norm - open_norm) / (closed_mm - open_mm)
      value_norm = (value_mm - closed_mm) * slope + closed_norm
  
      value_gripper = value_norm * 255 / 100
  
      if (value_gripper > 255):
          value_gripper_limited = 255
      elif (value_gripper < 0):
          value_gripper_limited = 0
      else:
          value_gripper_limited = round_value(value_gripper)
      end
  
      return value_gripper_limited
  end
  
  def round_value(value):
      value_mod = value % 1
  
      if(value_mod < 0.5):
          return floor(value)
      else:
          return ceil(value)
      end
  end
  
  def round_value_2_dec(value):
      value_x_100 = value * 100
      value_x_100_rounded = round_value(value_x_100)
      return value_x_100_rounded / 100
  end
  
  def clear_socket_buffer(gripper_socket="1", read_timeout = 0.1):
      rq_comm_clear_socket_buffer_enabled[rq_socket_to_index(gripper_socket)] = True
  end
  
  def rq_gripper_id_to_ascii(gripper_id):
      if(gripper_id == "1"):
          return 57
      elif(gripper_id == "2"):
          return 50
      elif(gripper_id == "3"):
          return 51
      elif(gripper_id == "4"):
          return 52
      end
  end
  
  def scale(value, rawRange, scaledRange):
      def computeSlope(inputRange, outputRange):
          outputRangeDelta = outputRange[1] - outputRange[0]
          inputRangeDelta = inputRange[1] - inputRange[0]
  
          if (inputRangeDelta == 0):
              return 0
          else:
              return outputRangeDelta / inputRangeDelta
          end
      end
  
      def computeIntercept(slope, inputRange, outputRange):
          return outputRange[0] - (slope * inputRange[0])
      end
  
      def clipScaledValue(outputScaledValue, outputRange):
          if (outputRange[0] < outputRange[1]):
              return clipWhenLowerLimitIsLessThanHigher(outputScaledValue, outputRange)
          else:
              return clipWhenLowerLimitIsGreaterThanHigherLimit(outputScaledValue, outputRange)
          end
      end
  
      def clipWhenLowerLimitIsGreaterThanHigherLimit(outputScaledValue, outputRange):
          if (outputScaledValue < outputRange[1]):
              return outputRange[1]
          elif (outputScaledValue > outputRange[0]):
              return outputRange[0]
          else:
              return outputScaledValue
          end
      end
  
      def clipWhenLowerLimitIsLessThanHigher(outputScaledValue, outputRange):
          if (outputScaledValue < outputRange[0]):
              return outputRange[0]
          elif (outputScaledValue > outputRange[1]):
              return outputRange[1]
          else:
              return outputScaledValue
          end
      end
  
      slope = computeSlope(rawRange, scaledRange)
      intercept = computeIntercept(slope, rawRange, scaledRange)
      scaledValue = slope * value + intercept
      return clipScaledValue(scaledValue, scaledRange)
  end
  
  def limit(value, range):
      return scale(value, range, range)
  end
  
  
  rq_init_comm_if_connected(9, "1")
  rq_init_comm_if_connected(2, "2")
  rq_init_comm_if_connected(3, "3")
  rq_init_comm_if_connected(4, "4")
  rq_print_connected_grippers()
  rq_gripper_communication_thread = run rq_gripper_communication()
  set_closed_norm(100.0, 1)
  set_open_norm(0.0, 1)
  set_closed_mm(0.0, 1)
  set_open_mm(50.0, 1)
  set_closed_norm(100.0, 2)
  set_open_norm(0.0, 2)
  set_closed_mm(0.0, 2)
  set_open_mm(50.0, 2)
  set_closed_norm(100.0, 3)
  set_open_norm(0.0, 3)
  set_closed_mm(0.0, 3)
  set_open_mm(50.0, 3)
  set_closed_norm(100.0, 4)
  set_open_norm(0.0, 4)
  set_closed_mm(0.0, 4)
  set_open_mm(50.0, 4)
  rq_current_limit_enabled = False
  while(not rq_gripper_communication_thread_started):
      sleep(0.008)
  end
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: V.Qnect+, 1.0.0, Q.VITEC GmbH
  #   Type: V.Qnect+: Einstellungen
  global conn_spread_sheet = rpc_factory("xmlrpc", "http://127.0.0.1:9090/")
  def VQnectSpreadsheet(row, column, judge):
  result = conn_spread_sheet.vq_spreadsheet_result_from_ur_script(row, column, judge)
  if (result == "NoNetwork"):
  popup("<html>Die Kommunikation zwischen V.Qnect+ und Vision Q.400 ist nicht möglich.<br>Bitte überprüfen Sie Ihre Netzwerkverbindung<br></html>", title="V.Qnect+ Fehler - Netzwerk", error=True, blocking=True)
  return result
  elif (result == "InvalidRow"):
  popup("<html>Die ausgewählte Spreadsheet ZEILE existiert nicht.<br>Lösung: Aktualisieren Sie die Spreadsheet Zeilen und wählen Sie eine gültige Zeile unter URCaps -> V.Qnect+:SpreadSheet<br></html>", title="V.Qnect+ Fehler - Zeile", error=True, blocking=True)
  return result
  elif (result == "NoConnectionQ400"):
  popup("Die Kommunikation zwischen V.Qnect+ und Q.400 ist nicht möglich. Mögliche Lösungen:(1) Überprüfen Sie IP-Adresse und Port von V.Qnect+ und Q.400 (2) Stellen Sie sicher, dass Q.400 geöffnet ist (3) Starten Sie den Roboter und/oder Q.400 neu", title="V.Qnect+ Fehler - Kommunikation", error=True, blocking=True)
  return result
  elif (result == "Timeout"):
  popup("Die Spreadsheet Zeile kann nicht von Q.400 abgerufen werden.Mögliche Lösungen: (1) Überprüfen Sie die Verbindung zwischen V.Qnect+ und Q.400 (2) Starten Sie Q.400 und/oder den Roboter neu", title=" V.Qnect+ Fehler - Spreadsheet", error=True, blocking=True)
  return result
  else:
  return result
  end
  end
  global conn_seq_group = rpc_factory("xmlrpc", "http://127.0.0.1:9090/")
  def VQnectSequenzgruppe(group_num):
  group = conn_seq_group.vq_execution_group_from_ur_script(group_num)
  if (group == "NoNetwork"):
  popup("<html>Die Kommunikation zwischen V.Qnect+ und Vision Q.400 ist nicht möglich.<br>Bitte überprüfen Sie Ihre Netzwerkverbindung<br></html>", title="V.Qnect+ Fehler - Netzwerk", error=True, blocking=True)
  return group
  elif (group == "NoConnectionQ400"):
  popup("Die Kommunikation zwischen V.Qnect+ und Vision Q.400 ist nicht möglich.Mögliche Lösungen:1. Überprüfen Sie IP-Adresse und Port von V.Qnect+ und Vision Q.400 2. Stellen Sie sicher, dass Vision Q.400 geöffnet ist 3. Starten Sie den Roboter und/oder Vision Q.400 neu", title="V.Qnect+ Fehler - Kommunikation", error=True, blocking=True)
  return group
  elif (group == "NoLicense"):
  popup("License Check Failed, Please check the Dongle", title="V.Qnect+ Error - Communication", error=True, blocking=True)
  return group
  elif (group == "InvalidGroup"):
  popup("Die gewählte Sequenzgruppe existiert nicht in Vision Q.400. Lösung: Aktualisieren Sie die Sequenzgruppen in URCaps -> V.Qnect+:ExecutionGroups und wählen Sie eine gültige Sequenzgruppe.", title="V.Qnect+ Fehler-Execution Group", error=True, blocking=True)
  return group
  elif (group == "EmptySequenz"):
  popup("Die ausgewählte Sequenzgruppe enthält keine ausführbaren Sequenzen. Lösung: Wählen Sie eine gültige Sequenzgruppe, die Sequenzen enthält unter URCaps -> V.Qnect+:ExecutionGroups.", title="V.Qnect+ Fehler-Execution Group", error=True, blocking=True)
  return group
  elif (group == "Timeout"):
  popup("Die Ausführung der Sequenzgruppe in Vision Q.400 ist fehlgeschlagen.Mögliche Lösungen: (1) Überprüfen Sie die Verbindung zwischen V.Qnect+ und Q.400 (2) Starten Sie Q.400 und/oder den Roboter neu.", title="V.Qnect+ Fehler - Sequenzgruppe", error=True, blocking=True)
  return group
  elif (group == "SetUpMode"):
  popup("<html>Vision Q.400 befindet sich im SetUp Modus.<br>Möglichkeiten, um in den Run modus zu wechseln :<br>1. Öffnen Sie ToolBar(e)/Installation(cb) und klicken Sie auf die Schaltfläche Run.<br>2. Drücken Sie Weiter, um in den Run modus zu wechseln.<br></html>", title="V.Qnect+ Warnung - Modus", warning=True, blocking=True)
  mode = conn_seq_group.vq_change_wait_run_mode_ur_script("run")
  if (mode != "Ready"):
  popup("Das Ändern von Q.400 in den RunModus ist fehlgeschlagen. Mögliche Lösungen: (1) Öffnen Sie ToolBar(e)/Installation(cb) und klicken Sie auf die Schaltfläche Run (2) Überprüfen Sie die Applikation in Q.400 (3) Überprüfen Sie die Verbindung von V.Qnect+ und der Kamera mit Q.400", title="V.Qnect+ Fehler - Modus", error=True, blocking=True)
  return mode
  end
  grp = conn_seq_group.vq_execution_group_from_ur_script(group_num)
  if (grp == "CheckError" or grp == "InvalidGroup" or grp == "EmptySequenz"or grp == "NoConnectionQ400" or grp == "Timeout" or grp == "GrabTimeout"):
  popup("Die Ausführung der Sequenzgruppe in Q.400 ist fehlgeschlagen. Mögliche Lösungen: (1) Überprüfen Sie in Q.400, ob die Gruppe existiert und Sequenzen enthält (2) Überprüfen Sie die Verbindung von V.Qnect+ und der Kamera mit Q.400 (3) Starten Sie Vision Q.400 und/oder den Roboter neu", title="V.Qnect+ Fehler - Sequenzgruppe", error=True, blocking=True)
  return grp
  end
  return group
  elif (group == "GrabTimeout"):
  popup("Die Ausführung der Sequenzgruppe in Vision Q.400 ist fehlgeschlagen. Mögliche Lösungen: (1) Überprüfen Sie die Kameraverbindung (2) Versetzen Sie Q.400 in den Run modus (3) Starten Sie Vision Q.400 und/oder den Roboter neu", title="V.Qnect+ Fehler - Sequenzgruppe", error=True, blocking=True)
  return group
  else:
  return group
  end
  end
  # end: URCap Installation Node
  global home_p_p=p[-.174809948243, -.120304785790, 1.090998228619, .002249407180, -3.141291886791, .000898729514]
  global home_p_q=[-1.570695702229635, -1.5708915195860804, -4.1863204387482256E-5, -3.1416083774962367, -4.713345114384786, -4.4171010152638246E-5]
  global stn1_home_p_p=p[.215634699327, -.443021207527, .347925891705, .021973917907, 3.141439951034, .000153087034]
  global stn1_home_p_q=[-0.7579596678363245, -1.212758259182312, -2.1632845401763916, -1.3370796752027054, -4.713205162678854, 0.8260380625724792]
  global stn1_help_p_p=p[-.011307983975, -.885997581333, .209201404277, -.156729436657, -3.137629714061, -.000011388113]
  global stn1_help_p_q=[-1.3866975943194788, -1.9750734768309535, -1.6402506828308105, -1.0978028637221833, -4.714867893849508, 0.282858282327652]
  global stn1_help2_p_p=p[-.011884949513, -.730171487438, .210774519256, -.156816752560, -3.137610137026, -.000328010882]
  global stn1_help2_p_q=[-1.3473518530475062, -1.7403222523131312, -1.9535160064697266, -1.0194900792888184, -4.71425444284548, 0.3223060667514801]
  global stn1_ref_1_p_p=p[.059310848450, -.983943316552, .153008494072, -.040744419742, -3.140909496765, -.001008988602]
  global stn1_ref_1_p_q=[-1.3338030020343226, -2.1649276218810023, -1.4513496160507202, -1.0975557130626221, -4.715442005787985, 0.26168718934059143]
  global stn1_ref_2_p_p=p[.029511918601, -.984102383292, .153027367609, -.040660692267, -3.140932662822, -.001082126899]
  global stn1_ref_2_p_q=[-1.363812271748678, -2.1631790600218714, -1.4542326927185059, -1.0964541000178833, -4.715427700673239, 0.23162530362606049]
  global stn1_ref_3_p_p=p[.059504770188, -1.013745277415, .153093904671, -.040658296763, -3.140948459292, -.001131057530]
  global stn1_ref_3_p_q=[-1.3406098524676722, -2.2096854648985804, -1.375444769859314, -1.1287671488574524, -4.715499703084127, 0.2548058032989502]
  global stn2_home_p_p=p[-.031863883684, -.478723570257, .027706309028, .011168075514, 3.137482153130, -.002822181852]
  global stn2_home_p_q=[-1.2685721556292933, -1.628068586389059, -2.5478155612945557, -0.5342850250056763, -4.710101191197531, 0.30796346068382263]
  global stn2_ref_1_p_p=p[.131977155979, -.742692298685, .029812889503, .008193253330, 3.135817138964, -.022346176552]
  global stn2_ref_1_p_q=[-1.1628277937518519, -1.9836346111693324, -2.036653995513916, -0.6774826806834717, -4.714910809193746, 0.41171714663505554]
  global stn2_ref_2_p_p=p[.092147250213, -.743075663597, .029594124826, .008363494916, 3.135916489977, -.022499547156]
  global stn2_ref_2_p_q=[-1.2137869040118616, -1.9773413143553675, -2.0477991104125977, -0.6725719136050721, -4.714239780102865, 0.36087289452552795]
  global stn2_ref_3_p_p=p[.131851701430, -.745398767919, -.103196267269, .007920420992, 3.135792806162, -.022318098996]
  global stn2_ref_3_p_q=[-1.164482895527975, -2.191174646417135, -2.0544159412384033, -0.4521854680827637, -4.71497077146639, 0.4095451235771179]
  global stn2_ref_4_p_p=p[.091813398323, -.745735548793, -.103395510065, .008161770121, 3.135789784886, -.022189021741]
  global stn2_ref_4_p_q=[-1.215588394795553, -2.1868039570250453, -2.0656137466430664, -0.4454344075969239, -4.714139167462484, 0.3586021661758423]
  global stn2_ref_5_p_p=p[.132781846776, -.745434767548, -.233153037712, -.008657781012, 3.135803886488, -.022353790569]
  global stn2_ref_5_p_q=[-1.163412872944967, -2.4132853947081507, -2.021786689758301, -0.2626858514598389, -4.715041700993673, 0.39966773986816406]
  global stn2_ref_6_p_p=p[.092793482417, -.745846546865, -.233390359014, -.008454031284, 3.135706232469, -.022320924362]
  global stn2_ref_6_p_q=[-1.2144811789142054, -2.4109331570067347, -2.0326743125915527, -0.25413842618975835, -4.714143935834066, 0.34873801469802856]
  global stn3_home_p_p=p[.416298609385, .420516515383, .307271322677, -3.058845332994, .611850433538, -.000264679826]
  global stn3_home_p_q=[1.0852115154266357, -1.4209150981954117, -2.093080520629883, -1.1778309506228943, -4.707584087048666, -0.09153825441469365]
  global stn3_top_hlp_p_p=p[.078526979714, 1.102138679839, .269965908396, 3.137944559651, .142629091722, .000788457041]
  global stn3_top_hlp_p_q=[1.6575119495391846, -2.3002268276610316, -1.0053822994232178, -1.407925860290863, -4.7161224524127405, -0.005172554646627248]
  global stn3_ref_1_p_p=p[.136816726649, 1.023945276386, .060068301878, -.639017294435, 3.075428434203, -.001038429569]
  global stn3_ref_1_p_q=[1.6071953773498535, -2.3087498150267542, -1.3850387334823608, -1.0198887151530762, -4.7159674803363245, 2.7667362689971924]
  global stn3_ref_2_p_p=p[.158248736201, 1.071326175267, .060077306872, -1.286708187351, 2.865632482891, -.000901207891]
  global stn3_ref_2_p_q=[1.5853757858276367, -2.3827549419798792, -1.2470636367797852, -1.0836786490729828, -4.716102902089254, 2.310540199279785]
  global stn3_ref_3_p_p=p[.110722782759, 1.157576019535, .060017101867, 2.850061135559, -1.321107655862, .001409635598]
  global stn3_ref_3_p_q=[1.6253129243850708, -2.5171829662718714, -0.9907254576683044, -1.2058178049376984, -4.716541115437643, 0.9209773540496826]
  global stn3_ref_4_p_p=p[.013213784019, 1.138421755205, .059939734064, 3.106925897163, .461094322976, .001186644252]
  global stn3_ref_4_p_q=[1.7123770713806152, -2.4744445286192835, -1.0731136798858643, -1.1661794644645234, -4.716526214276449, -0.15470534959901983]
  global stn3_ref_5_p_p=p[-.008135560864, 1.091356716977, .059966546594, 2.794372009506, 1.434359683204, .000882040052]
  global stn3_ref_5_p_q=[1.7382287979125977, -2.3971430263915003, -1.2201734781265259, -1.0961802464774628, -4.716309730206625, -0.7826078573810022]
  global stn3_ref_6_p_p=p[.002271225627, 1.040604710733, .059977149408, 2.163604454860, 2.276960992739, .000563143440]
  global stn3_ref_6_p_q=[1.736652135848999, -2.3205906353392542, -1.3633875846862793, -1.0294035238078614, -4.716071669255392, -1.4575145880328577]
  global stn3_ref_7_p_p=p[.040588823073, 1.005405762360, .059994955200, 1.375591464096, 2.823876651030, -.000012347838]
  global stn3_ref_7_p_q=[1.7043521404266357, -2.2714582882323207, -1.453816533088684, -0.9881085914424439, -4.715695683156149, -2.102945152913229]
  global stn3_ref_8_p_p=p[.091801401182, .999010183067, .060031543916, .496948132816, 3.101683019632, -.000464707217]
  global stn3_ref_8_p_q=[1.653560757637024, -2.2669412098326625, -1.4619708061218262, -0.9845656317523499, -4.7155519167529505, -2.742591921483175]
  global stn3_ini_apr_p_p=p[.338000643848, .798555810108, -.160879142823, -2.595000744252, .017465253921, .072701938467]
  global stn3_ini_apr_p_q=[1.314932942390442, -2.460933824578756, -1.9949239492416382, 0.26319269716229243, -4.535274211560385, -0.19810849825014287]
  global stn3_ini_prs_p_p=p[.338002425893, .798532684116, -.203929911337, -2.595074105424, .017324959740, .072710320739]
  global stn3_ini_prs_p_q=[1.3148893117904663, -2.5355807743468226, -1.9695277214050293, 0.31233052789654536, -4.535199586545126, -0.19839507738222295]
  global stn3_apr_run_p_p=p[.776396238513, .867874799850, .201747644030, -1.625524924351, .319016338513, -.332853385470]
  global stn3_apr_run_p_q=[0.9394240379333496, -2.534948011437887, -1.4481581449508667, 0.7625245290943603, -4.4942044655429285, -0.046949211751119435]
  global stn3_prss_run_p_p=p[.849644261692, .978268943880, .212423175038, -1.626650955840, .290857205741, -.304190898432]
  global stn3_prss_run_p_q=[0.9362287521362305, -2.6970964870848597, -1.060584545135498, 0.5384201246448974, -4.455104653035299, -0.04780036607851201]
  global stn6_home_p_p=p[.555745223406, .300896612199, .209832052422, -2.223034223797, 2.218372366406, -.009635450730]
  global stn6_home_p_q=[0.7770528793334961, -1.5819641552367152, -2.13236403465271, -0.9976907533458252, -4.720004741345541, 0.7739368081092834]
  global stn6_help_p_p=p[1.081582873778, .322214955270, .421343745829, -2.222291416958, 2.197353353587, -.031993411143]
  global stn6_help_p_q=[0.44751209020614624, -2.329742570916647, -0.6933555006980896, -1.667830606500143, -4.729607764874594, 0.43530455231666565]
  global stn6_place_p_p=p[1.137922701722, -.304889142242, .369235566888, -2.207146443966, 2.233453103593, -.013212949640]
  global stn6_place_p_q=[-0.11256724992860967, -2.464904924432272, -0.5395175218582153, -1.7011686764159144, -4.720073167477743, -0.10165101686586553]
  global stn4_ref_1_p_p=p[.967986589451, .642803313458, -.357002958231, -2.196181964294, 2.244265322025, -.013059668794]
  global stn4_ref_1_p_q=[0.7379750609397888, -2.9521905384459437, -0.9153611660003662, -0.843712643986084, -4.724196855221884, -5.526459280644552]
  global stn4_cam_help_p_p=p[.965540538778, .644519727504, .001202607914, -2.196119367617, 2.244367201255, -.013079750854]
  global stn4_cam_help_p_q=[0.7404979467391968, -2.5569292507567347, -1.0253820419311523, -1.1290141505054017, -4.724129382763998, -5.522773031388418]
  global stn4_next_hlp_p_p=p[.708615380914, .412064769238, .088616243507, -2.180050546883, 2.259799626828, -.013007672155]
  global stn4_next_hlp_p_q=[0.7425410747528076, -1.9933091602721156, -1.8689106702804565, -0.8490606111339112, -4.722866360341207, 0.7771312594413757]
  global stn5_stn4_hlp_p_p=p[.848366547346, .319890676633, .030824155337, -2.237961023003, 2.202537628206, -.013116046162]
  global stn5_stn4_hlp_p_q=[0.5552197098731995, -2.16857447246694, -1.706782341003418, -0.8342531484416504, -4.7227070967303675, 0.5377334952354431]
  global stn9_dcap_apr_p_p=p[1.057749192347, .459756343792, .017356806726, 3.131941740071, .165083634840, .010315838533]
  global stn9_dcap_apr_p_q=[0.5632308721542358, -2.53086580852651, -1.046053171157837, -1.1330161851695557, -4.723651472722189, -1.1146600882159632]
  global stn7_dcap_apr_p_p=p[1.059690595829, .453985821079, .008713392691, -2.230781206848, 2.211348039589, -.004250690385]
  global stn7_dcap_apr_p_q=[0.5563406944274902, -2.5376512012877406, -1.0488961935043335, -1.1254407328418274, -4.718342487012045, 0.5458095669746399]
  global stn10_ref_1_p_p=p[.559360592036, .389263272509, -.188263211444, -2.232592841924, 2.207807681812, -.013321619419]
  global stn10_ref_1_p_q=[0.8688529133796692, -2.2916976414122523, -2.1834211349487305, -0.23695941389117436, -4.723001424466268, 0.8557116985321045]
  global stn10_ref_2_p_p=p[.559987874628, .359527391356, -.188090068786, -2.232650825390, 2.207907108435, -.013332760030]
  global stn10_ref_2_p_q=[0.838076114654541, -2.283903738061422, -2.2145986557006836, -0.21342368543658452, -4.722921911870138, 0.8249619007110596]
  global stn10_ref_3_p_p=p[.589073034580, .389777479987, -.188038500610, -2.232475514919, 2.207865500393, -.013356204652]
  global stn10_ref_3_p_q=[0.8359724283218384, -2.304044385949606, -2.1348891258239746, -0.27282126367602544, -4.723058883343832, 0.8228949904441833]
  global stn5_rk_rf_1_p_p=p[.931503859102, .356509371910, -.031649133207, -2.228224139071, 2.208246476580, -.003864007143]
  global stn5_rk_rf_1_p_q=[0.5404415130615234, -2.34954371074819, -1.5078364610671997, -0.8507548731616517, -4.716570798550741, 0.5296745896339417]
  global stn5_rk_rf_2_p_p=p[.931677812422, .254252823381, -.031805370433, -2.228335879674, 2.208328829106, -.003850350982]
  global stn5_rk_rf_2_p_q=[0.4470027685165405, -2.310835977593893, -1.5854443311691284, -0.8118906778148194, -4.716032926236288, 0.4362477958202362]
  global stn5_rk_rf_3_p_p=p[1.024345455221, .356742549059, -.031443295915, -2.228215948399, 2.208319209807, -.003788631461]
  global stn5_rk_rf_3_p_q=[0.4958254396915436, -2.465767046014303, -1.2742565870285034, -0.968116359119751, -4.7166131178485315, 0.4850195646286011]
  global stn5_tb_rf_1_p_p=p[.901143479634, .385524829056, -.053719638359, -2.237362781489, 2.201923900273, -.002380620080]
  global stn5_tb_rf_1_p_q=[0.5821859240531921, -2.3531772098936976, -1.5521645545959473, -0.8050570052913208, -4.716217939053671, 0.564420759677887]
  global stn5_tb_rf_2_p_p=p[.901345968689, .284300665475, -.053832424108, -2.237450329713, 2.202045725507, -.002429319124]
  global stn5_tb_rf_2_p_q=[0.49009835720062256, -2.3122359714903773, -1.6362385749816895, -0.7619789403728028, -4.715922180806295, 0.4723755717277527]
  global stn5_tb_rf_3_p_p=p[.994089220396, .385787913008, -.053483232087, -2.237426647878, 2.201871884143, -.002390027373]
  global stn5_tb_rf_3_p_q=[0.5336117148399353, -2.4625641308226527, -1.3277150392532349, -0.920082227592804, -4.716383997594015, 0.51572185754776]
  global stn5_tb_rf_4_p_p=p[.901068752246, .355292223124, -.053759449729, -2.237616121867, 2.202232952371, -.002319552534]
  global stn5_tb_rf_4_p_q=[0.5556588172912598, -2.339541574517721, -1.580064296722412, -0.7911635798266907, -4.716162983571188, 0.5379307866096497]
  global stn5_tb_rf_5_p_p=p[.931623238867, .385571255266, -.053639141898, -2.237409877195, 2.201915253938, -.002311104701]
  global stn5_tb_rf_5_p_q=[0.5653083920478821, -2.3873983822264613, -1.4819188117980957, -0.841102198963501, -4.716229383145468, 0.5474961996078491]
  global stn5_cw_rf_1_p_p=p[.893747634170, .481140130238, -.055725293856, -2.207907034503, 2.231821173722, -.001068994691]
  global stn5_cw_rf_1_p_q=[0.6654565334320068, -2.3981648884215296, -1.4646121263504028, -0.848079578285553, -4.715791527424948, 0.6743980646133423]
  global stn5_cw_rf_2_p_p=p[.893872080204, .449402875748, -.055741098348, -2.207781452226, 2.231855682378, -.001169718909]
  global stn5_cw_rf_2_p_q=[0.6399775743484497, -2.380158086816305, -1.501611590385437, -0.8290048402598877, -4.715740029011862, 0.6490030288696289]
  global stn11_home_p_p=p[.543183655985, .404084637336, -.004852809259, -2.232752366680, 2.207879537938, -.013244566332]
  global stn11_home_p_q=[0.9022941589355469, -1.9482394657530726, -2.194531202316284, -0.5697575372508545, -4.72274881998171, 0.8896029591560364]
  global stn11_ref_1_p_p=p[.559567782873, .264470245443, -.187669579306, -2.232719747838, 2.207933497776, -.013347179104]
  global stn11_ref_1_p_q=[0.7295414209365845, -2.2650324306883753, -2.304250955581665, -0.14179046571765141, -4.722627464924948, 0.7164276242256165]
  global stn11_ref_2_p_p=p[.559682359455, .234411219692, -.187498069593, -2.232840107606, 2.207822886240, -.013315857154]
  global stn11_ref_2_p_q=[0.6905712485313416, -2.2609836063780726, -2.3274126052856445, -0.12236173570666509, -4.722489658986227, 0.6773579120635986]
  global stn11_ref_3_p_p=p[.589478972629, .264645225556, -.187470948373, -2.233009500310, 2.207881887668, -.013415175249]
  global stn11_ref_3_p_q=[0.6974635124206543, -2.274578710595602, -2.2523298263549805, -0.1840614837459107, -4.722692433987753, 0.68418288230896]
  global stn11_ref_4_p_p=p[.559371874850, .139526383926, -.187031617925, -2.232717180564, 2.207974013419, -.013289676530]
  global stn11_ref_4_p_q=[0.5542230606079102, -2.2529307804503382, -2.3849360942840576, -0.07180984437976079, -4.722001258526937, 0.5411425828933716]
  global stn11_ref_5_p_p=p[.559545494517, .109346475036, -.186873354493, -2.232659617471, 2.208034729271, -.013364395275]
  global stn11_ref_5_p_q=[0.5063129663467407, -2.251547475854391, -2.3970675468444824, -0.06067724645648198, -4.721857730542318, 0.49328702688217163]
  global stn11_ref_6_p_p=p[.589369711043, .139646469845, -.186822784351, -2.232787823190, 2.207974345983, -.013386693475]
  global stn11_ref_6_p_q=[0.5269541144371033, -2.259428163568014, -2.3301401138305664, -0.11992736280474858, -4.722056452427999, 0.513827919960022]
  global stn11_ref_7_p_p=p[.559199049315, .014562752133, -.186398315929, -2.232478399995, 2.208089965541, -.013253293839]
  global stn11_ref_7_p_q=[0.3452405631542206, -2.2492319546141566, -2.417644500732422, -0.0411718648723145, -4.721016351376669, 0.33232125639915466]
  global stn11_ref_8_p_p=p[.559307628001, -.015512910571, -.186302624280, -2.232436709985, 2.208288715780, -.013204293820]
  global stn11_ref_8_p_q=[0.2912788689136505, -2.2490836582579554, -2.417473316192627, -0.041236595516540575, -4.720759574566976, 0.2784675657749176]
  global stn11_ref_9_p_p=p[.589169034858, .014698608420, -.186188804265, -2.232391928285, 2.208153044550, -.013345222433]
  global stn11_ref_9_p_q=[0.32727891206741333, -2.2540890179076136, -2.3616485595703125, -0.09214563787493901, -4.721049133931295, 0.31441283226013184]
  global stn11_ref10_p_p=p[.558790463414, -.110253273357, -.185820581554, -2.232441294306, 2.208316951489, -.013206373529]
  global stn11_ref10_p_q=[0.11791043728590012, -2.2495976887144984, -2.3991260528564453, -0.058014945392944384, -4.719785992299215, 0.10510354489088058]
  global stn11_ref11_p_p=p[.558982607793, -.140272814712, -.185658634344, -2.232453977448, 2.208268474316, -.013309903984]
  global stn11_ref11_p_q=[0.06290390342473984, -2.250479837457174, -2.3866357803344727, -0.06925816953692632, -4.719478313122885, 0.05006580427289009]
  global stn11_ref12_p_p=p[.588886387314, -.110082088350, -.185611391757, -2.232442974222, 2.208293650126, -.013287947194]
  global stn11_ref12_p_q=[0.11193293333053589, -2.255508085290426, -2.343773365020752, -0.1073787969401856, -4.719857994710104, 0.09910096973180771]
  global stn7_home_p_p=p[.396049849055, -.461576320289, .271044044605, .607310338847, -3.078901718609, -.009782563227]
  global stn7_home_p_q=[-0.5734441916095179, -1.487623193567135, -2.0979812145233154, -1.134250209932663, -4.711614433919088, 0.6069642901420593]
  global stn7_ref_1_p_p=p[.783947952301, -.767967880686, .310958479936, -2.831114344743, 1.354640927317, .010581113180]
  global stn7_ref_1_p_q=[-0.6163137594806116, -2.2782780132689417, -0.9691409468650818, -1.4728536543301125, -4.71373695531954, -1.295460049306051]
  global stn7_ref_2_p_p=p[.692435646715, -.844857312999, .310960089316, -2.831101516149, 1.354574760812, .010861088863]
  global stn7_ref_2_p_q=[-0.7244685331927698, -2.2682863674559535, -0.9860227108001709, -1.466306024496891, -4.714512173329489, -1.4036405722247522]
  global stn7_ref_4_p_p=p[.768654174948, -.780837800820, .310948202586, -2.831126718166, 1.354617134990, .010669351657]
  global stn7_ref_4_p_q=[-0.6341818014727991, -2.2748452625670375, -0.9749749898910522, -1.470539667909481, -4.7138699928866785, -1.3133428732501429]
  global stn7_ref_5_p_p=p[.816053837562, -.806050479122, .310537318888, -2.831027725437, 1.354584341842, .010720213631]
  global stn7_ref_5_p_q=[-0.6272295157061976, -2.384857793847555, -0.7843207716941833, -1.551219717865326, -4.713932577763693, -1.306434456502096]
  global stn7_bin_help_p_p=p[.906750975293, -.595919908330, .250233837890, -2.831368019912, 1.354490046285, .010131415785]
  global stn7_bin_help_p_q=[-0.4212558905230921, -2.273158689538473, -1.0857791900634766, -1.360553817158081, -4.7124977747546595, -1.1007054487811487]
  global stn7_bin_apr_p_p=p[1.013457908054, -.719000339512, .247965539296, -2.831391022255, 1.354446146984, .010085053552]
  global stn7_bin_apr_p_q=[-0.4766796270953577, -2.667915483514303, -0.3637382388114929, -1.687967439691061, -4.71351939836611, -1.15637714067568]
  global stn7_bin_thrw_p_p=p[1.012960165933, -.718416797101, .139316641182, -2.831457245866, 1.354468321480, .010079377110]
  global stn7_bin_thrw_p_q=[-0.4766328970538538, -2.660962244073385, -0.5678048133850098, -1.4908479911139985, -4.713541452084677, -1.156593147908346]
  global stn14_stn8_hl_p_p=p[.636981793707, .390785107619, .274098725615, -1.273538562819, 1.152252063224, -1.092511514258]
  global stn14_stn8_hl_p_q=[1.1216424703598022, -2.097622057000631, -2.317873477935791, 1.2214221197315673, -5.714289251958029, 0.06180064007639885]
  global stn8_home_p_p=p[-.628894466298, .212319355217, .283309348898, -1.224884921096, -1.232212250803, 1.225954912655]
  global stn8_home_p_q=[3.0220675468444824, -2.0258647404112757, -2.4968066215515137, 1.3598698812672119, -4.572620455418722, 0.008286988362669945]
  global stn8_pl_apr1_p_p=p[-.808247727575, .179207540215, .095296977081, -1.224610221430, -1.232189924711, 1.226073294270]
  global stn8_pl_apr1_p_q=[3.120659351348877, -2.4924141369261683, -2.134169101715088, 1.4645160871693115, -4.670466486607687, 0.009588871151208878]
  global stn8_pl_apr2_p_p=p[-.967371326229, .178377203351, .094166536634, -1.224602771093, -1.232302807508, 1.226025019707]
  global stn8_pl_apr2_p_q=[3.1264424324035645, -2.5525061092772425, -1.828859806060791, 1.2192386823841552, -4.676125709210531, 0.009223947301506996]
  global stn8_place_p_p=p[-.966962675736, .178052314248, .038474500394, -1.224669735256, -1.232397825340, 1.226068997825]
  global stn8_place_p_q=[3.1268205642700195, -2.641592641870016, -1.7924354076385498, 1.2718126016804199, -4.676257077847616, 0.009236586280167103]
  global stn14_home_p_p=p[.538084623819, .436654384207, .134450130636, -2.221038731629, 2.221626686863, -.000687142397]
  global stn14_home_p_q=[0.9348610639572144, -1.7654172382750453, -2.0882465839385986, -0.8593583864024659, -4.714599911366598, 0.9339466691017151]
  global stn14_pk_rk_p_p=p[1.006094960558, .543576704450, -.167668826304, -1.224441798734, 1.233269393436, -1.170284516914]
  global stn14_pk_rk_p_q=[0.826970100402832, -3.074822088281149, -1.1294447183609009, 1.020164890880249, -5.525363330041067, 0.04678594321012497]
  global stn14_pkrk_up_p_p=p[1.005135405861, .544211085099, -.028357898139, -1.224378755366, 1.233321441574, -1.170326049866]
  global stn14_pkrk_up_p_q=[0.828251302242279, -2.8643914661803187, -1.2962194681167603, 0.9764179426380615, -5.527191464100973, 0.04696185886859894]
  global stn14_pl_rk_h_p_p=p[.915625461035, .568258516413, -.009040564797, -2.223092595209, 2.218214989460, -.009651504164]
  global stn14_pl_rk_h_p_q=[0.7184894680976868, -2.434887548486227, -1.2877717018127441, -0.9889233869365235, -4.721619788800375, 0.7145383358001709]
  global stn14_pl_rk_p_p=p[1.039797566717, .546053460405, -.028651789694, -2.213371844176, 2.227801667456, -.009400229996]
  global stn14_pl_rk_p_q=[0.6331273317337036, -2.6059304676451625, -0.9850365519523621, -1.1200727981380005, -4.721653167401449, 0.6377080082893372]
  global stn14_plrk_rt_p_p=p[1.038950273371, .544383415360, -.028646491364, 2.218568692274, 2.209193077190, .002915949203]
  global stn14_plrk_rt_p_q=[0.6341368556022644, -2.6020924053587855, -0.9931482076644897, -1.1144147676280518, -4.726188842450277, -2.5051494280444544]
  global stn14_lv_rk_p_p=p[1.035332607243, .543689469893, -.141012279265, -2.211226648016, 2.231332716457, -.000553053313]
  global stn14_lv_rk_p_q=[0.6324548721313477, -2.7048922977843226, -1.003520131111145, -1.0044444364360352, -4.7162339130984705, 0.639277994632721]
  global stn14_pl_tb_h_p_p=p[1.001138577225, .549609009747, .048056477347, -2.193987455906, 2.248053484739, -.004223462841]
  global stn14_pl_tb_h_p_q=[0.6551018953323364, -2.488390108148092, -1.0692753791809082, -1.1547613006881257, -4.718407932912008, 0.6777838468551636]
  global stn14_ref_1_p_p=p[.991037071639, .544029803671, -.036034826142, 3.136712015069, .016561311234, .011036423126]
  global stn14_ref_1_p_q=[0.6583099365234375, -2.5392333469786585, -1.134871482849121, -1.0363230270198365, -4.723855797444479, -0.9249380270587366]
  global stn14_ref_3_p_p=p[1.014127680180, .544138438901, -.035828962623, 3.136797688109, .016417364083, .011124696211]
  global stn14_ref_3_p_q=[0.6459746956825256, -2.5717812977232875, -1.068536639213562, -1.0699144166759034, -4.723859135304586, -0.9372051397906702]
  global stn15_home_p_p=p[.468745751978, -.286897602966, -.113590772728, -2.232351190957, 2.208175951343, -.013531287105]
  global stn15_home_p_q=[-0.225745979939596, -2.064537664453024, -2.455392837524414, -0.18500836313281255, -4.717113796864645, -0.2383645216571253]
  global stn15_ref_1_p_p=p[.558669957619, -.235201705529, -.185183904378, -2.232410773633, 2.208250834829, -.013424966304]
  global stn15_ref_1_p_q=[-0.10595065752138311, -2.2568065128722132, -2.3307809829711914, -0.11789889753375249, -4.718364659939901, -0.11879092851747686]
  global stn15_ref_2_p_p=p[.558896118087, -.265269869576, -.185071076831, -2.232459357368, 2.208175438467, -.013600110041]
  global stn15_ref_2_p_q=[-0.15686113039125615, -2.260515352288717, -2.307218074798584, -0.13745017469439702, -4.718056503926412, -0.1697633902179163]
  global stn15_ref_3_p_p=p[.588662736673, -.235087283171, -.184999277290, -2.232419576438, 2.208290445598, -.013429259024]
  global stn15_ref_3_p_q=[-0.10060722032655889, -2.265654226342672, -2.278191328048706, -0.16168220460925298, -4.718509856854574, -0.11344701448549444]
  global stn9_lv_tb_p_p=p[1.058581829777, .459212589575, -.102061005492, 3.131925458030, .165079268319, .010422730741]
  global stn9_lv_tb_p_q=[0.5624223947525024, -2.6390868626036585, -1.0638277530670166, -1.0069590967944642, -4.723721567784445, -1.115805451069967]
  global stn9_hold_cap_p_p=p[1.058309848260, .459410097285, -.104020415376, 3.132032709944, .165084197149, .010444564081]
  global stn9_hold_cap_p_q=[0.5626748204231262, -2.6407534084715785, -1.064379334449768, -1.0046786826900025, -4.72363514104952, -1.1155584494220179]
  global stn10_hlp_p_p=p[.621168117424, .390480427877, -.101931390096, -2.221077856344, 2.221749590797, -.000680057496]
  global stn10_hlp_p_q=[0.7999254465103149, -2.169547220269674, -2.0937132835388184, -0.4498141568950196, -4.714913789425985, 0.7984632253646851]
  global stn11_hlp_p_p=p[.484765456440, .100724355649, -.137305884471, -2.232752132891, 2.208015714512, -.013135779294]
  global stn11_hlp_p_q=[0.5680906176567078, -2.1086298427977503, -2.5536000728607178, -0.047632889156677294, -4.721661988888876, 0.5551937818527222]
  global stn3_pen_pk_u_p_p=p[.952939814574, .480475354063, -.057005101605, -2.261020292211, 2.181136189336, -.000805917781]
  global stn3_pen_pk_u_p_q=[0.6301953196525574, -2.4679929218687953, -1.323628306388855, -0.9213892382434388, -4.716047112141744, 0.5923596024513245]
  global stn3_pen_pk_p_p=p[.953811506790, .479922370115, -.181599773434, -2.261018055796, 2.181008148694, -.000824143415]
  global stn3_pen_pk_p_q=[0.6292669177055359, -2.6064354381956996, -1.312391996383667, -0.7940904659083863, -4.716090027485983, 0.5910123586654663]
  global stn14_rot_hlp_p_p=p[.909105424512, .541414972610, .024399348010, 3.131492974044, -.189376929686, .011406628927]
  global stn14_rot_hlp_p_q=[0.7040899991989136, -2.3762289486327113, -1.3324174880981445, -1.0022141498378296, -4.723663632069723, -0.7475550810443323]
  global stn14_ch_rk_p_p=p[1.038573209596, .545916469070, -.170685819248, -2.213394016258, 2.227862075587, -.009406528530]
  global stn14_ch_rk_p_q=[0.6336402893066406, -2.7419501743712367, -0.9855672121047974, -0.9835794132998963, -4.721691672001974, 0.6378252506256104]
  global stn5_chkrk_h1_p_p=p[.929655232155, .357368513612, -.031651511065, -2.228371207889, 2.208387938837, -.003594405491]
  global stn5_chkrk_h1_p_q=[0.5421316027641296, -2.3478251896300257, -1.5112080574035645, -0.8493438524058838, -4.716457668934957, 0.531364917755127]
  global stn5_chk_rk_1_p_p=p[.931865913557, .356543265961, -.151665604544, -2.228416013368, 2.208346124129, -.003647418542]
  global stn5_chk_rk_1_p_q=[0.5402377843856812, -2.4890300236144007, -1.5069198608398438, -0.7124178570559998, -4.716541115437643, 0.5290920734405518]
  global stn5_chk_rk_2_p_p=p[1.024701577000, .356811977921, -.151388076767, -2.228168365012, 2.208323000488, -.003857786724]
  global stn5_chk_rk_2_p_q=[0.49571484327316284, -2.5922333202757777, -1.2734756469726562, -0.8423872751048584, -4.71668512025942, 0.48458802700042725]
  global stn5_chk_rk_3_p_p=p[1.117057813101, .356998926215, -.150968593370, -2.228250876976, 2.208408533936, -.003627340563]
  global stn5_chk_rk_3_p_q=[0.457928329706192, -2.7194062672057093, -0.994063675403595, -0.9947498601726075, -4.716687623654501, 0.4467032253742218]
  global stn5_chk_rk_4_p_p=p[1.209734822117, .357146872798, -.150872530995, -2.228225015877, 2.208522664321, -.003588293197]
  global stn5_chk_rk_4_p_q=[0.4254065155982971, -2.9015923939146937, -0.6046218872070312, -1.2020496290973206, -4.716840092335836, 0.41409802436828613]
  global stn5_chkrk_h2_p_p=p[1.208611864977, .358027118603, -.104841716155, -2.228324139904, 2.208437612631, -.003641321878]
  global stn5_chkrk_h2_p_q=[0.4264230728149414, -2.8546439609923304, -0.6175384521484375, -1.2360802751830597, -4.7168734709369105, 0.415172815322876]
  global stn5_chkrk_h3_p_p=p[1.208817938026, .255561478506, -.104729758501, -2.228245420529, 2.208752500642, -.003604164295]
  global stn5_chkrk_h3_p_q=[0.34942367672920227, -2.7935639820494593, -0.7449373602867126, -1.1698872607997437, -4.716456238423483, 0.33840060234069824]
  global stn5_chk_rk_5_p_p=p[1.209964723660, .254878157641, -.150904194919, -2.228122161697, 2.208431508329, -.003998198989]
  global stn5_chk_rk_5_p_q=[0.34860172867774963, -2.840743680993551, -0.7338000535964966, -1.13345359385524, -4.716554466878073, 0.33734649419784546]
  global stn5_chk_rk_6_p_p=p[1.117247126572, .254701013367, -.151199233779, -2.228279869156, 2.208389638078, -.003838347747]
  global stn5_chk_rk_6_p_q=[0.37613147497177124, -2.6772357426085414, -1.0861274003982544, -0.9447643321803589, -4.716321770344869, 0.3649183511734009]
  global stn5_chk_rk_7_p_p=p[1.024922625552, .254584119828, -.151397147577, -2.228212710354, 2.208344594976, -.003883315433]
  global stn5_chk_rk_7_p_q=[0.40842488408088684, -2.5559073887267054, -1.3545823097229004, -0.7975722712329407, -4.716182533894674, 0.3973173499107361]
  global stn5_chk_rk_8_p_p=p[.932072936214, .254364923330, -.151697579810, -2.228237705494, 2.208294996060, -.003878453222]
  global stn5_chk_rk_8_p_q=[0.44690391421318054, -2.4555474720396937, -1.5846041440963745, -0.667924241428711, -4.716078106557028, 0.43584078550338745]
  global stn5_chkrk_h4_p_p=p[.929907207504, .254004607357, -.059429789623, -2.228447764847, 2.208474945730, -.003494522856]
  global stn5_chkrk_h4_p_q=[0.44752568006515503, -2.340321203271383, -1.5931992530822754, -0.7748986047557374, -4.715889875088827, 0.4367135167121887]
  global stn7_ld_apr_p_p=p[.805783831129, -.695879499221, .161336217474, -1.068779834648, 2.275641332799, -1.277231392071]
  global stn7_ld_apr_p_q=[-0.48289519945253545, -2.2569757900633753, -1.7663737535476685, 0.2791004615971069, -4.96792966524233, 0.07186669111251831]
  global stn7_ld_press_p_p=p[.903285912074, -.794391345807, .138884556616, -.767777366284, 2.194039889173, -1.445301687386]
  global stn7_ld_press_p_q=[-0.5007465445642278, -2.5034513932133655, -1.4390609658893627, 0.38306206768167117, -5.047934766476136, 0.1736330288371576]
  global stn8_hlp_2_p_p=p[.009673207434, .775898779126, .462989445254, -1.595805060948, -.443789822596, .346424647944]
  global stn8_hlp_2_p_q=[1.6347625255584717, -1.7756668529906214, -2.180520534515381, 0.7302450376697998, -4.280337158833639, -0.08302241960634404]
  global stn8_stn6_hlp_p_p=p[-.128970384530, .425946756899, .154840004359, -3.012858095561, -.846479321340, .124211134685]
  global stn8_stn6_hlp_p_q=[2.219758987426758, -1.2953268450549622, -2.498983144760132, -0.8808118265918274, -4.642931882535116, 0.10122722387313843]
  global stn2_dr1_apr_p_p=p[-.052482541177, -.486724174087, -.218079708901, .010926366630, 3.135762797552, -.022285927651]
  global stn2_dr1_apr_p_q=[-1.316486660634176, -2.3483177624144496, -2.5315661430358887, 0.18197576581921382, -4.712037269269125, 0.2592778205871582]
  global stn2_dr1_ph_p_p=p[-.048886910943, -.846300996196, -.212932141261, .011028256731, 3.135790808419, -.022232053295]
  global stn2_dr1_ph_p_q=[-1.4237802664386194, -2.436671873132223, -1.8418217897415161, -0.4197462362102051, -4.7114025990115564, 0.15188360214233398]
  global stn2_dr1_up_p_p=p[-.049319185654, -.831366179445, -.156471834472, .010985041958, 3.135782029178, -.022405991432]
  global stn2_dr1_up_p_q=[-1.4215739409076136, -2.338715215722555, -1.88949716091156, -0.46990878999743657, -4.711359802876608, 0.15423770248889923]
  global stn2_dr1_op_u_p_p=p[-.047009153994, -.865176552692, -.155977769231, 2.146307952121, -2.286332881166, .022313346437]
  global stn2_dr1_op_u_p_q=[-1.42424184480776, -2.366335531274313, -1.8169968128204346, -0.5148999255946656, -4.7114121357547205, -1.3630965391742151]
  global stn2_dr1_op_d_p_p=p[-.046686514620, -.867451312217, -.207814609690, 2.156326019567, -2.276866468495, .022306697922]
  global stn2_dr1_op_d_p_q=[-1.4242866675006312, -2.4446894131102503, -1.7981852293014526, -0.4553685945323487, -4.711401406918661, -1.372084919606344]
  global stn2_dr_opn_p_p=p[-.049512643855, -.581995215614, -.211881690641, 2.189462841875, -2.244694640602, .022347585790]
  global stn2_dr_opn_p_q=[-1.3542020956622522, -2.3153792820372523, -2.3630053997039795, -0.01953764379534917, -4.711611572896139, -1.3313053289996546]
  global stn2_dr1_hlp_p_p=p[-.050285916316, -.590107085642, -.058537366846, 2.189453913862, -2.244767650010, .022372485721]
  global stn2_dr1_hlp_p_q=[-1.3586004416095179, -1.9660235844054164, -2.375577211380005, -0.35634417951617436, -4.711305443440573, -1.3352482954608362]
  global stn2_dr2_apr_p_p=p[-.051784268309, -.485335118792, -.340767171215, 2.194768338452, -2.239421011678, .022139684722]
  global stn2_dr2_apr_p_q=[-1.3133390585528772, -2.6642781696715296, -2.4263577461242676, 0.3927181202122192, -4.712262097989218, -1.2956298033343714]
  global stn2_dr2_ph1_p_p=p[-.049478647555, -.718015701373, -.337456966683, 2.194715139241, -2.239424245837, .022099865708]
  global stn2_dr2_ph1_p_q=[-1.3967908064471644, -2.586928506890768, -2.02931547164917, -0.08188350618396001, -4.711579147969381, -1.3791030089007776]
  global stn2_dr2_ph2_p_p=p[-.053890954835, -.859915963227, -.347414933495, 1.931759112982, -1.971725160459, .603236827990]
  global stn2_dr2_ph2_p_q=[-1.4287670294391077, -2.7780491314330042, -1.8817249536514282, 0.4791650015064697, -4.718339387570516, -1.413400952016012]
  global stn2_dr2_up_p_p=p[-.054646259165, -.817099852119, -.292326367154, 1.931782012928, -1.971772879685, .603163744671]
  global stn2_dr2_up_p_q=[-1.4206393400775355, -2.678525587121481, -2.0153069496154785, 0.5131277280994873, -4.722455803547994, -1.406135384236471]
  global stn2_dr2_op_u_p_p=p[-.054109070411, -.871414447434, -.287684330266, 1.826974412332, -1.855489126878, .748571348053]
  global stn2_dr2_op_u_p_q=[-1.4237540403949183, -2.7491890392699183, -1.9266539812088013, 0.6661926943012695, -4.740259710942404, -1.4221156279193323]
  global stn2_dr2_op_d_p_p=p[-.048381936064, -.901561836217, -.320321165898, 1.826893348172, -1.855484566571, .748567394288]
  global stn2_dr2_op_d_p_q=[-1.4220216909991663, -2.8078161678709925, -1.8371293544769287, 0.6353098589130859, -4.741424147282736, -1.4209273497210901]
  global stn2_dr2_opn_p_p=p[-.048940347006, -.616362997489, -.321583243484, 1.816618942712, -1.846641143727, .765862425232]
  global stn2_dr2_opn_p_q=[-1.3218181769000452, -2.9421211681761683, -2.2886955738067627, 1.233653946513794, -4.805556241665975, -1.3437846342669886]
  global stn2_dr2_hlp_p_p=p[-.049763553112, -.614595702755, -.173831444058, 1.816539347386, -1.846683517835, .765953876853]
  global stn2_dr2_hlp_p_q=[-1.3222411314593714, -2.6279789410033167, -2.476285457611084, 1.1071411806293945, -4.805532399808065, -1.3435466925250452]
  global stn2_dr3_apr_p_p=p[-.035553894205, -.474750169684, -.470569513802, 2.194762168470, -2.239390247318, .022245711817]
  global stn2_dr3_apr_p_q=[-1.2721498648272913, -2.9474827251830042, -2.278566598892212, 0.5282687383839111, -4.7129449287997645, -1.2549355665790003]
  global stn2_dr3_ph1_p_p=p[-.033404973223, -.689514865900, -.467488426626, 2.194782884319, -2.239298152043, .022166235834]
  global stn2_dr3_ph1_p_q=[-1.3657406012164515, -2.819322725335592, -1.9556105136871338, 0.07695309698071284, -4.7120670715915125, -1.3485716024981897]
  global stn2_dr3_ph2_p_p=p[-.031703129029, -.856229445409, -.472252615117, 1.936157404944, -1.978211393121, .497511631348]
  global stn2_dr3_ph2_p_q=[-1.377399746571676, -2.967738290826315, -1.7441036701202393, 0.4763895708271484, -4.794103447590963, -1.3795855681048792]
  global stn2_dr3_up_p_p=p[-.032269729782, -.818340422419, -.426631621995, 1.936204601136, -1.978088394622, .497612515215]
  global stn2_dr3_up_p_q=[-1.3673308531390589, -2.8926807842650355, -1.870733618736267, 0.527313156718872, -4.798678580914633, -1.3704827467547815]
  global stn2_dr3_op_u_p_p=p[-.031754782228, -.876421037893, -.421505281593, 1.800710444368, -1.840845499576, .684791314873]
  global stn2_dr3_op_u_p_q=[-1.3696120421039026, -2.9747592411436976, -1.7660367488861084, 0.7216240602680664, -4.832348648701803, -1.3950122038470667]
  global stn2_dr3_op_d_p_p=p[-.031328800841, -.899307167551, -.448877628505, 1.800778969628, -1.840741824056, .684727493171]
  global stn2_dr3_op_d_p_q=[-1.3755458037005823, -3.019642015496725, -1.686743140220642, 0.6877402502247314, -4.8285585085498255, -1.3998339811908167]
  global stn2_dr3_opn_p_p=p[-.034152064957, -.616293364582, -.452952949761, 1.800870146078, -1.840746030231, .684667921846]
  global stn2_dr3_opn_p_q=[-1.2499030272113245, -3.1623407802977503, -2.1004903316497803, 1.2292188841053466, -4.907731358204977, -1.301068131123678]
  global stn2_dr3_hlp_p_p=p[-.035044158633, -.614041506131, -.288615751423, 1.800781666815, -1.840654340768, .684867091382]
  global stn2_dr3_hlp_p_q=[-1.2496917883502405, -2.872166772881979, -2.3513729572296143, 1.1899780470081787, -4.9081847111331385, -1.3004034201251429]
  global stn3_ok_apr_p_p=p[.697587781822, .899657411044, .240844865990, -1.625477334695, .319077157714, -.332892244965]
  global stn3_ok_apr_p_q=[1.0345075130462646, -2.450845857659811, -1.537444829940796, 0.7695531088062744, -4.589201752339498, -0.039260212575094044]
  global stn3_ok_prss_p_p=p[.752146792068, 1.024259867913, .258608122908, -1.625556483817, .319066565523, -.332835603583]
  global stn3_ok_prss_p_q=[1.0515174865722656, -2.593764921227926, -1.182930827140808, 0.558072491283081, -4.606079403554098, -0.03836948076357061]
  global stn3_crs_apr_p_p=p[.780391170734, .869599065177, .239665006077, -1.626637669291, .294162320923, -.307433073308]
  global stn3_crs_apr_p_q=[0.9276351928710938, -2.499033113519186, -1.4341119527816772, 0.7134920793720703, -4.450841132794515, -0.047995869313375294]
  global stn3_crs_prss_p_p=p[.843480793890, .983587722244, .239689487327, -1.626569638472, .294113547520, -.307483511866]
  global stn3_crs_prss_p_q=[0.9451939463615417, -2.666234155694479, -1.0692822933197021, 0.516284628505371, -4.468255702649252, -0.0470503012286585]
  global stn7_retrct2_p_p=p[.651349655440, -.855935272917, .031366226831, -1.343087484182, -2.817214595431, .047498628410]
  global stn7_retrct2_p_q=[-0.7492883841144007, -2.396580835381979, -1.2764191627502441, -1.0502425593188782, -4.750643078480856, 1.7098467350006104]
  global stn7_dr2_up_p_p=p[.680447195382, -.890725064853, .041098968536, -1.343233936666, -2.817247025301, .047575944819]
  global stn7_dr2_up_p_q=[-0.7543290297137659, -2.4591719112791957, -1.1369482278823853, -1.126841740017273, -4.750871483479635, 1.7048606872558594]
  global stn7_dr2_dwn_p_p=p[.680309603662, -.890447591990, -.003850782261, -1.343074519382, -2.817345860961, .047576885082]
  global stn7_dr2_dwn_p_q=[-0.7542474905597132, -2.4960361919798792, -1.1537537574768066, -1.0731483560851593, -4.750874463711874, 1.7046996355056763]
  global stn7_dr2_ini_p_p=p[.661142806941, -.867639822703, -.003653672726, -1.342938782552, -2.817341230899, .047558282175]
  global stn7_dr2_ini_p_q=[-0.7510393301593226, -2.450287004510397, -1.243690013885498, -1.029137448673584, -4.7507458368884485, 1.707863450050354]
  global stn7_dr1_dwn_p_p=p[.773216354667, -.812224200991, -.003920878175, -1.343027003891, -2.817237088105, .047539004248]
  global stn7_dr1_dwn_p_q=[-0.6462553183185022, -2.4987102947630824, -1.147674322128296, -1.0804114800742646, -4.749608818684713, 1.8127645254135132]
  global stn7_dr1_ini_p_p=p[.751901438414, -.786894670221, -.003648665407, -1.343036785493, -2.817394041262, .047567204937]
  global stn7_dr1_ini_p_q=[-0.6394432226764124, -2.447789808312887, -1.2476704120635986, -1.0314206045917054, -4.749385658894674, 1.8195722103118896]
  global stn7_dr1_up_p_p=p[.773460847876, -.812434834634, .042841896060, -1.342951056686, -2.817233978998, .047477849754]
  global stn7_dr1_up_p_q=[-0.6462662855731409, -2.460599561730856, -1.1299042701721191, -1.1363392633250733, -4.749568764363424, 1.8128386735916138]
  global stn7_retrct1_p_p=p[.744801075839, -.777336200144, .031420687655, -1.342973785009, -2.817329096123, .047533748028]
  global stn7_retrct1_p_q=[-0.6362226645099085, -2.3992015324034632, -1.2703584432601929, -1.0575218957713624, -4.749285165463583, 1.8228837251663208]
  global stn7_dr1_open_p_p=p[.645119467900, -.659984260299, -.002479337455, -1.343020172219, -2.817296300612, .047545933172]
  global stn7_dr1_open_p_q=[-0.5977051893817347, -2.2274276218810023, -1.6719024181365967, -0.8290525239757081, -4.748208347951071, 1.8614778518676758]
  global stn7_dr2_ohp1_p_p=p[.561504753025, -.757220740212, .033578939455, -1.342902675755, -2.817342974538, .047566908008]
  global stn7_dr2_ohp1_p_q=[-0.7373970190631312, -2.2120377025999964, -1.6177239418029785, -0.8938518327525635, -4.750084344540731, 1.7217060327529907]
  global stn7_dr2_open_p_p=p[.552548174193, -.738597914872, -.002419536462, -1.343155076030, -2.817374433752, .047633058465]
  global stn7_dr2_open_p_q=[-0.7288425604449671, -2.225793024102682, -1.6761994361877441, -0.8217758697322388, -4.749940697346823, 1.730318546295166]
  global stn7_apr1_p_p=p[.628884742615, -.641162941658, -.006031492518, -1.100892996274, 2.929058829319, -.041242267067]
  global stn7_apr1_p_q=[-0.5993030706988733, -2.1964765987791957, -1.7524572610855103, -0.7355763477138062, -4.7200921217547815, 0.2507055103778839]
  global stn7_push1_p_p=p[.761174672446, -.798397221813, -.007432502191, -1.100865333184, 2.929034538293, -.041355441656]
  global stn7_push1_p_q=[-0.6505363623248499, -2.46347775081777, -1.2348626852035522, -0.985865668659546, -4.719331685696737, 0.199319526553154]
  global stn7_apr2_p_p=p[.536244763176, -.719141971360, -.006019795996, -1.100921783862, 2.928996133595, -.041339047152]
  global stn7_apr2_p_q=[-0.7352703253375452, -2.1954556904234828, -1.7545313835144043, -0.7340186995318909, -4.716153327618734, 0.11475929617881775]
  global stn7_push2_p_p=p[.668587595131, -.876504958130, -.007390774885, -1.100738124058, 2.929064479110, -.041404266667]
  global stn7_push2_p_q=[-0.7611196676837366, -2.462569852868551, -1.2366427183151245, -0.9847334784320374, -4.716119472180502, 0.08886289596557617]
  global stn7_dr2_bk_p_p=p[.650423938785, -.854800079148, .015209738365, -1.100779291078, 2.928977280551, -.041506206142]
  global stn7_dr2_bk_p_q=[-0.7581222693072718, -2.4005538425841273, -1.3115310668945312, -0.9717751306346436, -4.716073338185446, 0.09190621972084045]
  global stn9_hold_dcp_p_p=p[1.058130086334, .459195905663, -.106081415032, 1.560950370536, 2.716420086105, -.001015808377]
  global stn9_hold_dcp_p_q=[0.5628217458724976, -2.6413284740843714, -1.067490577697754, -1.0008113545230408, -4.723772231732504, 3.1746139526367188]
  global stn9_dcap_up_p_p=p[1.057343878239, .460926400430, -.096052529060, .004265591386, 3.134537684967, -.007347094820]
  global stn9_dcap_up_p_q=[0.5641138553619385, -2.6311713657774867, -1.068145751953125, -1.0103359383395691, -4.723576490079061, -4.1476479212390345]
  global stn9_dcap_hlp_p_p=p[1.056860779966, .461167765133, -.044505555367, .004068817970, 3.134628647265, -.007665744600]
  global stn9_dcap_hlp_p_q=[0.5645577907562256, -2.5818616352477015, -1.0654664039611816, -1.0625153344920655, -4.723687950764791, -4.147180143986837]
  global stn9_bin_apr_p_p=p[1.198926022809, .511328929965, -.015521904998, 3.131931525994, .164959588399, .010176402845]
  global stn9_bin_apr_p_q=[0.5391789674758911, -2.951001306573385, -0.25827693939208984, -1.5005524915507813, -4.72413939634432, -1.1390121618853968]
  global stn9_lv_cap_p_p=p[1.199721796753, .510709216063, -.123787557673, 3.131931013574, .164924743790, .010188164087]
  global stn9_lv_cap_p_q=[0.5384202003479004, -3.033623834649557, -0.2783936560153961, -1.3977987182191391, -4.724135104809896, -1.140066925679342]
  global stn11_hlp_up_p_p=p[.400028877657, .026764646948, -.230197929427, -3.128483049719, .060644429610, -.051512320225]
  global stn11_hlp_up_p_q=[0.5216777324676514, -2.495749612847799, -2.6838788986206055, 0.5009831625172119, -4.720399204884664, -1.012550179158346]
  global stn11_clo_apr_p_p=p[.401379417558, .025825464574, -.425482831793, -3.128430722644, .060625131854, -.051441371061]
  global stn11_clo_apr_p_q=[0.516621470451355, -2.9816156826415003, -2.4377341270446777, 0.7407321172901611, -4.720337454472677, -1.018365208302633]
  global stn11_close_p_p=p[.797151082853, .027874218878, -.422747521748, -3.128716396450, .005581900200, -.050655882179]
  global stn11_close_p_q=[0.25318676233291626, -2.7542530498900355, -1.8117649555206299, -0.11262424409899907, -4.710992638264791, -1.3168562094317835]
  global stn11_clo_up_p_p=p[.771172329244, .028108576116, -.335383806765, -3.128753584952, .005687510045, -.050801244638]
  global stn11_clo_up_p_q=[0.2623458206653595, -2.5991865597166957, -1.938834309577942, -0.1405068200877686, -4.7112571636783045, -1.307329003010885]
  global stn11_clo_up2_p_p=p[.819081500293, .028220522670, -.369430710048, -3.128729979504, .005629216217, -.050789358529]
  global stn11_clo_up2_p_q=[0.24669425189495087, -2.6729570827879847, -1.8163731098175049, -0.1892593663981934, -4.710837666188375, -1.3231518904315394]
  global stn11_opn_apr_p_p=p[.819439190679, .027973323516, -.423303471794, -3.128733517960, .005613201927, -.050731916761]
  global stn11_opn_apr_p_q=[0.24625223875045776, -2.7614337406554164, -1.7670207023620605, -0.150173620586731, -4.710841957722799, -1.3237836996661585]
  global stn11_opn_p_p=p[.422001393721, .025910404225, -.426056309703, -3.128731107469, .005669716991, -.050835217844]
  global stn11_opn_p_q=[0.4887245297431946, -2.9469009838499964, -2.412405014038086, 0.6807333666035156, -4.718366448079244, -1.0813453833209437]
  global stn11_opn_up_p_p=p[.425085171188, .027058361758, -.205671521775, -3.128727948111, .005401650940, -.050970995846]
  global stn11_opn_up_p_q=[0.4883340895175934, -2.3752147159972132, -2.6606767177581787, 0.3573928314396362, -4.7181599775897425, -1.0810759703265589]
  def MachineInputPopUps():
    $ 1053 "MachineInputPopUps" "noBreak"
    $ 1054 "all_machines_on≔'Wollen sie alle Gerate Starten?'"
    global all_machines_on=request_boolean_from_primary_client("Wollen sie alle Gerate Starten?")
    $ 1055 "qMast.set_machine_status(0,all_machines_on)"
    qMast.set_machine_status(0,all_machines_on)
    $ 1056 "If all_machines_on ≠  True "
    if (all_machines_on  !=    True  ):
      $ 1057 "haematology_on≔'Wollen sie Sysmex Starten'"
      global haematology_on=request_boolean_from_primary_client("Wollen sie Sysmex Starten")
      $ 1058 "qMast.set_machine_status(7,haematology_on)"
      qMast.set_machine_status(7,haematology_on)
      $ 1059 "coagulation_on≔'Wollen sie ACL elite PRO Starten?'"
      global coagulation_on=request_boolean_from_primary_client("Wollen sie ACL elite PRO Starten?")
      $ 1060 "qMast.set_machine_status(3,coagulation_on)"
      qMast.set_machine_status(3,coagulation_on)
      $ 1061 "chemistry_on≔'Wollen sie Cobas pure Starten?'"
      global chemistry_on=request_boolean_from_primary_client("Wollen sie Cobas pure Starten?")
      $ 1062 "qMast.set_machine_status(8,chemistry_on)"
      qMast.set_machine_status(8,chemistry_on)
      $ 1063 "centrifuge_on≔'Wollen sie Zentrifuge Starten?'"
      global centrifuge_on=request_boolean_from_primary_client("Wollen sie Zentrifuge Starten?")
      $ 1064 "qMast.set_machine_status(6,centrifuge_on)"
      qMast.set_machine_status(6,centrifuge_on)
    end
    $ 1065 "jobDone≔ True "
    global jobDone=  True  
  end
  def UserPopups():
    $ 1066 "UserPopups" "noBreak"
    $ 1067 "Meldung: Alle Sicherheitsysteme (Durchreiche, Beide Tueren und zwischen Zentrifuge und Kuehlschrank) OK"
    popup("Alle Sicherheitsysteme (Durchreiche, Beide Tueren und zwischen Zentrifuge und Kuehlschrank) OK", "Warnung", True, False, blocking=True)
    $ 1068 "Meldung: Fenster Jalousien zu"
    popup("Fenster Jalousien zu", "Warnung", True, False, blocking=True)
    $ 1069 "Meldung: Durchreiche Leer"
    popup("Durchreiche Leer", "Warnung", True, False, blocking=True)
    $ 1070 "Meldung: Schublade Durchreiche: Racks leer"
    popup("Schublade Durchreiche: Racks leer", "Warnung", True, False, blocking=True)
    $ 1071 "Meldung: Racks Durchreiche: Barcodes nach links"
    popup("Racks Durchreiche: Barcodes nach links", "Warnung", True, False, blocking=True)
    $ 1072 "Meldung: Schublade Fehler-,Archiv-,Sysmexladeracks leer"
    popup("Schublade Fehler-,Archiv-,Sysmexladeracks leer", "Warnung", True, False, blocking=True)
    $ 1073 "Meldung: Kuli Position: links 2.Position von oben"
    popup("Kuli Position: links 2.Position von oben", "Warnung", True, False, blocking=True)
    $ 1074 "Meldung: Zentrifugen Einsaetze in Position und Leer"
    popup("Zentrifugen Einsaetze in Position und Leer", "Warnung", True, False, blocking=True)
    $ 1075 "Meldung: Zentriugen Schluessel in Lock 2 Programm"
    popup("Zentriugen Schluessel in Lock 2 Programm", "Warnung", True, False, blocking=True)
    $ 1076 "Meldung: Elite Pro bereit und Gewartet"
    popup("Elite Pro bereit und Gewartet", "Warnung", True, False, blocking=True)
    $ 1077 "Meldung: Sysmex Schubladen Leer und Bereit"
    popup("Sysmex Schubladen Leer und Bereit", "Warnung", True, False, blocking=True)
    $ 1078 "Meldung: Cobas pure Proben Teller Frei"
    popup("Cobas pure Proben Teller Frei", "Warnung", True, False, blocking=True)
    $ 1079 "Meldung: CobasPure racks in Position and Leer"
    popup("CobasPure racks in Position and Leer", "Warnung", True, False, blocking=True)
    $ 1080 "Meldung: Alle erdenklichen Hindernisse in dem der Roboteranlage gestoert wird aufraeumen"
    popup("Alle erdenklichen Hindernisse in dem der Roboteranlage gestoert wird aufraeumen", "Warnung", True, False, blocking=True)
  end
  def reset_jobs():
    $ 1081 "reset_jobs" "noBreak"
    $ 1082 "jobID≔0"
    global jobID=0
    $ 1083 "dest_jobID≔0"
    global dest_jobID=0
    $ 1084 "dest2_jobID≔0"
    global dest2_jobID=0
    $ 1085 "jobDone≔ True "
    global jobDone=  True  
  end
  def stn2_door1_close():
    $ 1086 "stn2_door1_close" "noBreak"
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1087 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_wait_pos_spe_for_request(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1088 "FahreAchse"
    $ 1089 "stn2_home_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_home_p_p)), qnear=stn2_home_p_q), a=3.490658503988659, v=1.0471975511965976)
    $ 1090 "FahreLinear"
    $ 1091 "stn2_dr1_apr_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr1_apr_p_p)), a=1.2, v=0.25)
    $ 1092 "stn2_dr1_ph_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr1_ph_p_p)), a=0.3, v=0.075)
    $ 1093 "stn2_dr1_up_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr1_up_p_p)), a=1.2, v=0.25)
  end
  def stn2_door1_open():
    $ 1094 "stn2_door1_open" "noBreak"
    $ 1095 "FahreLinear"
    $ 1096 "stn2_dr1_op_u_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr1_op_u_p_p)), a=1.2, v=0.25)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1097 "Greifer offen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(0, 255, 255, "1")
    rq_wait_pos_spe_for_request(0, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1098 "stn2_dr1_op_d_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr1_op_d_p_p)), a=1.2, v=0.25)
    $ 1099 "stn2_dr_opn_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr_opn_p_p)), a=0.5, v=0.1)
    $ 1100 "stn2_dr1_hlp_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr1_hlp_p_p)), a=1.2, v=0.25)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1101 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_wait_pos_spe_for_request(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1102 "FahreAchse"
    $ 1103 "stn2_home_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_home_p_p)), qnear=stn2_home_p_q), a=3.490658503988659, v=1.0471975511965976)
  end
  def stn2_door2_close():
    $ 1104 "stn2_door2_close" "noBreak"
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1105 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_wait_pos_spe_for_request(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1106 "FahreAchse"
    $ 1107 "stn2_home_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_home_p_p)), qnear=stn2_home_p_q), a=3.490658503988659, v=1.0471975511965976)
    $ 1108 "FahreLinear"
    $ 1109 "stn2_dr2_apr_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr2_apr_p_p)), a=1.2, v=0.25)
    $ 1110 "stn2_dr2_ph1_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr2_ph1_p_p)), a=0.2, v=0.05)
    $ 1111 "stn2_dr2_ph2_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr2_ph2_p_p)), a=0.5, v=0.075)
    $ 1112 "stn2_dr2_up_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr2_up_p_p)), a=1.2, v=0.25)
  end
  def stn2_door2_open():
    $ 1113 "stn2_door2_open" "noBreak"
    $ 1114 "FahreLinear"
    $ 1115 "stn2_dr2_op_u_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr2_op_u_p_p)), a=0.6, v=0.1)
    $ 1116 "stn2_dr2_op_d_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr2_op_d_p_p)), a=0.6, v=0.1)
    $ 1117 "stn2_dr2_opn_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr2_opn_p_p)), a=0.5, v=0.1)
    $ 1118 "stn2_dr2_hlp_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr2_hlp_p_p)), a=0.6, v=0.1)
    $ 1119 "FahreAchse"
    $ 1120 "stn2_home_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_home_p_p)), qnear=stn2_home_p_q), a=3.490658503988659, v=1.0471975511965976)
  end
  def stn2_door3_close():
    $ 1121 "stn2_door3_close" "noBreak"
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1122 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_wait_pos_spe_for_request(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1123 "FahreAchse"
    $ 1124 "stn2_home_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_home_p_p)), qnear=stn2_home_p_q), a=3.490658503988659, v=1.0471975511965976)
    $ 1125 "FahreLinear"
    $ 1126 "stn2_dr3_apr_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr3_apr_p_p)), a=1.2, v=0.25)
    $ 1127 "stn2_dr3_ph1_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr3_ph1_p_p)), a=0.2, v=0.05)
    $ 1128 "stn2_dr3_ph2_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr3_ph2_p_p)), a=0.2, v=0.05)
    $ 1129 "stn2_dr3_up_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr3_up_p_p)), a=1.2, v=0.25)
  end
  def stn2_door3_open():
    $ 1130 "stn2_door3_open" "noBreak"
    $ 1131 "FahreLinear"
    $ 1132 "stn2_dr3_op_u_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr3_op_u_p_p)), a=0.6, v=0.1)
    $ 1133 "stn2_dr3_op_d_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr3_op_d_p_p)), a=0.6, v=0.1)
    $ 1134 "stn2_dr3_opn_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr3_opn_p_p)), a=0.6, v=0.1)
    $ 1135 "stn2_dr3_hlp_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_dr3_hlp_p_p)), a=0.6, v=0.1)
    $ 1136 "FahreLinear"
    $ 1137 "stn2_home_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_home_p_p)), a=1.2, v=0.5)
  end
  def stn3_init_stndby():
    $ 1138 "stn3_init_stndby" "noBreak"
    $ 1139 "FahreAchse"
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1140 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_wait_pos_spe_for_request(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1141 "stn3_home_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_home_p_p)), qnear=stn3_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.1)
    $ 1142 "stn3_ini_apr_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ini_apr_p_p)), qnear=stn3_ini_apr_p_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 1143 "FahreLinear"
    $ 1144 "stn3_ini_prs_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ini_prs_p_p)), a=0.6, v=0.1)
    $ 1145 "Warten: 0.5"
    sleep(0.5)
    $ 1146 "stn3_ini_apr_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ini_apr_p_p)), a=0.6, v=0.1)
  end
  def stn3_press_run():
    $ 1147 "stn3_press_run" "noBreak"
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1148 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_wait_pos_spe_for_request(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1149 "FahreAchse"
    $ 1150 "stn3_home_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_home_p_p)), qnear=stn3_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.1)
    $ 1151 "FahreAchse"
    $ 1152 "stn3_pen_pk_u_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn3_pen_pk_u_p_p)), qnear=stn3_pen_pk_u_p_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1153 "Greiferbewegung11% (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(28, 255, 255, "1")
    rq_wait_pos_spe_for_request(28, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1154 "FahreLinear"
    $ 1155 "stn3_pen_pk_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn3_pen_pk_p_p)), a=1.2, v=0.25)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1156 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 128, 255, "1")
    rq_wait_pos_spe_for_request(255, 128, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1157 "stn3_pen_pk_u_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn3_pen_pk_u_p_p)), a=1.2, v=0.25)
    $ 1158 "FahreAchse"
    $ 1159 "stn3_home_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_home_p_p)), qnear=stn3_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.1)
    $ 1160 "If stn3_ok_popup ≟  True "
    if (stn3_ok_popup  ==    True  ):
      $ 1161 "FahreAchse"
      $ 1162 "stn3_ok_apr_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ok_apr_p_p)), qnear=stn3_ok_apr_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 1163 "FahreLinear"
      $ 1164 "stn3_ok_prss_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ok_prss_p_p)), a=0.2, v=0.05)
      $ 1165 "Warten: 1.0"
      sleep(1.0)
      $ 1166 "stn3_ok_apr_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ok_apr_p_p)), a=0.2, v=0.05)
    end
    $ 1167 "If stn3_cros_popup ≟  True "
    if (stn3_cros_popup  ==    True  ):
      $ 1168 "FahreAchse"
      $ 1169 "stn3_crs_apr_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_crs_apr_p_p)), qnear=stn3_crs_apr_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 1170 "FahreLinear"
      $ 1171 "stn3_crs_prss_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_crs_prss_p_p)), a=0.2, v=0.05)
      $ 1172 "Warten: 1.0"
      sleep(1.0)
      $ 1173 "stn3_crs_apr_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_crs_apr_p_p)), a=0.2, v=0.05)
    end
    $ 1174 "FahreAchse"
    $ 1175 "stn3_apr_run_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_apr_run_p_p)), qnear=stn3_apr_run_p_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 1176 "FahreLinear"
    $ 1177 "stn3_prss_run_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_prss_run_p_p)), a=0.2, v=0.05)
    $ 1178 "Warten: 1.0"
    sleep(1.0)
    $ 1179 "stn3_apr_run_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_apr_run_p_p)), a=0.2, v=0.05)
  end
  def stn4_grab_loop():
    $ 1180 "stn4_grab_loop" "noBreak"
    $ 1181 "FahreAchse"
    $ 1182 "stn4_cam_help_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn4_cam_help_p_p)), qnear=stn4_cam_help_p_q), a=20.943951023931955, v=3.141592653589793)
    $ 1183 "FahreLinear"
    $ 1184 "stn4_ref_1_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn4_ref_1_p_p)), a=1.2, v=0.5)
    $ 1185 "Einstellen DO[0]=Ein"
    set_standard_digital_out(0, True)
    $ 1186 "Einstellen DO[1]=Ein"
    set_standard_digital_out(1, True)
    $ 1187 "stn4_tube_ok≔ False "
    global stn4_tube_ok=  False  
    $ 1188 "stn4_pose_ok≔ False "
    global stn4_pose_ok=  False  
    $ 1189 "stn4_color_ok≔ False "
    global stn4_color_ok=  False  
    $ 1190 "stn4_level_ok≔ False "
    global stn4_level_ok=  False  
    $ 1191 "stn4_color_val≔0"
    global stn4_color_val=0
    $ 1192 "stn4_loop_count≔0"
    global stn4_loop_count=0
    $ 1193 "stn4_color_val≔qMast.q400_execute_cam2(13)"
    global stn4_color_val=qMast.q400_execute_cam2(13)
    $ 1194 "If stn4_color_val ≠ 0"
    if (stn4_color_val  !=  0):
      $ 1195 "Schleife 36 mal"
      Loop_4 = 0
      while (Loop_4 < 36):
        $ 1196 "stn4_pose_ok≔qMast.q400_execute_cam2(14)"
        global stn4_pose_ok=qMast.q400_execute_cam2(14)
        $ 1197 "stn4_tube_ok≔stn4_pose_ok"
        global stn4_tube_ok=stn4_pose_ok
        $ 1198 "stn4_tube_angle≔stn4_loop_count * cam2_angle"
        global stn4_tube_angle=stn4_loop_count * cam2_angle
        $ 1199 "If stn4_pose_ok ≟  True "
        if (stn4_pose_ok  ==    True  ):
          $ 1200 "cur_joints_2≔get_actual_joint_positions()"
          global cur_joints_2= get_actual_joint_positions ()
          $ 1201 "movej([cur_joints_2[0], cur_joints_2[1], cur_joints_2[2], cur_joints_2[3], cur_joints_2[4], cur_joints_2[5] + d2r(0.5)], a = 8, v = 3)"
          movej([cur_joints_2[0], cur_joints_2[1], cur_joints_2[2], cur_joints_2[3], cur_joints_2[4], cur_joints_2[5] + d2r(0.5)], a = 8, v = 3)
          $ 1202 "stn4_pose_ok≔qMast.q400_execute_cam2(15)"
          global stn4_pose_ok=qMast.q400_execute_cam2(15)
          $ 1203 "stn4_tube_ok≔stn4_pose_ok"
          global stn4_tube_ok=stn4_pose_ok
          $ 1204 "If stn4_pose_ok ≟  True "
          if (stn4_pose_ok  ==    True  ):
            $ 1205 "cur_joints≔get_actual_joint_positions()"
            global cur_joints= get_actual_joint_positions ()
            $ 1206 "movej([cur_joints[0], cur_joints[1], cur_joints[2], cur_joints[3], cur_joints[4], cur_joints[5] + d2r(180)], a = 8, v = 3)"
            movej([cur_joints[0], cur_joints[1], cur_joints[2], cur_joints[3], cur_joints[4], cur_joints[5] + d2r(180)], a = 8, v = 3)
            $ 1207 "If stn4_color_val ≟ 11"
            if (stn4_color_val  ==  11):
              $ 1208 "stn4_level_ok≔qMast.q400_execute_cam2(16)"
              global stn4_level_ok=qMast.q400_execute_cam2(16)
            else:
              $ 1209 "ElseIf stn4_color_val ≟ 12"
              if (stn4_color_val  ==  12):
                $ 1210 "stn4_level_ok≔qMast.q400_execute_cam2(17)"
                global stn4_level_ok=qMast.q400_execute_cam2(17)
              else:
                $ 1211 "ElseIf stn4_color_val ≟ 13"
                if (stn4_color_val  ==  13):
                  $ 1212 "stn4_level_ok≔qMast.q400_execute_cam2(18)"
                  global stn4_level_ok=qMast.q400_execute_cam2(18)
                else:
                  $ 1213 "ElseIf stn4_color_val ≟ 14"
                  if (stn4_color_val  ==  14):
                    $ 1214 "stn4_level_ok≔qMast.q400_execute_cam2(19)"
                    global stn4_level_ok=qMast.q400_execute_cam2(19)
                  end
                end
              end
            end
            $ 1215 "stn4_tube_ok≔stn4_level_ok"
            global stn4_tube_ok=stn4_level_ok
            $ 1216 "ng_count≔stn4_loop_count"
            global ng_count=stn4_loop_count
            $ 1217 "If stn4_level_ok ≠  True "
            if (stn4_level_ok  !=    True  ):
              $ 1218 "Schleife"
              while (True):
                $ 1219 "movej([cur_joints[0], cur_joints[1], cur_joints[2], cur_joints[3], cur_joints[4], cur_joints[5] + d2r(cam2_angle)], a = 8, v = 3)"
                movej([cur_joints[0], cur_joints[1], cur_joints[2], cur_joints[3], cur_joints[4], cur_joints[5] + d2r(cam2_angle)], a = 8, v = 3)
                $ 1220 "cur_joints≔get_actual_joint_positions()"
                global cur_joints= get_actual_joint_positions ()
                $ 1221 "stn4_level_ng≔qMast.q400_execute_cam2(20)"
                global stn4_level_ng=qMast.q400_execute_cam2(20)
                $ 1222 "ng_count≔ng_count + 1"
                global ng_count=ng_count + 1
                $ 1223 "If ng_count ≥ 36"
                if (ng_count  >=  36):
                  $ 1224 "break"
                  break
                end
              end
            end
            $ 1225 "break"
            break
          end
        end
        $ 1234 "cur_joints≔get_actual_joint_positions()"
        global cur_joints= get_actual_joint_positions ()
        $ 1235 "movej([cur_joints[0], cur_joints[1], cur_joints[2], cur_joints[3], cur_joints[4], cur_joints[5] + d2r(cam2_angle)], a = 8, v = 3)"
        movej([cur_joints[0], cur_joints[1], cur_joints[2], cur_joints[3], cur_joints[4], cur_joints[5] + d2r(cam2_angle)], a = 8, v = 3)
        $ 1236 "stn4_loop_count≔stn4_loop_count + 1"
        global stn4_loop_count=stn4_loop_count + 1
        Loop_4 = Loop_4 + 1
      end
    end
    $ 1237 "Einstellen DO[0]=Aus"
    set_standard_digital_out(0, False)
    $ 1238 "Einstellen DO[1]=Aus"
    set_standard_digital_out(1, False)
    $ 1239 "FahreAchse"
    $ 1240 "stn4_ref_1_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn4_ref_1_p_p)), qnear=stn4_ref_1_p_q), a=34.906585039886586, v=3.141592653589793)
    $ 1241 "FahreLinear"
    $ 1242 "stn4_cam_help_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn4_cam_help_p_p)), a=1.2, v=0.5, r=0.05)
    $ 1243 "FahreAchse"
    $ 1244 "stn4_next_hlp_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn4_next_hlp_p_p)), qnear=stn4_next_hlp_p_q), a=20.943951023931955, v=3.141592653589793)
  end
  def stn4_grab_loop_after():
    $ 1245 "stn4_grab_loop_after" "noBreak"
    $ 1246 "FahreAchse"
    $ 1247 "stn4_cam_help_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn4_cam_help_p_p)), qnear=stn4_cam_help_p_q), a=34.906585039886586, v=3.141592653589793)
    $ 1248 "FahreLinear"
    $ 1249 "stn4_ref_1_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn4_ref_1_p_p)), a=1.2, v=0.5)
    $ 1250 "Einstellen DO[0]=Ein"
    set_standard_digital_out(0, True)
    $ 1251 "Einstellen DO[1]=Ein"
    set_standard_digital_out(1, True)
    $ 1252 "stn4_pose_ok≔ False "
    global stn4_pose_ok=  False  
    $ 1253 "stn4_level_ok≔ False "
    global stn4_level_ok=  False  
    $ 1254 "stn4_tube_ok≔ False "
    global stn4_tube_ok=  False  
    $ 1255 "stn4_loop_count≔0"
    global stn4_loop_count=0
    $ 1256 "Schleife 36 mal"
    Loop_6 = 0
    while (Loop_6 < 36):
      $ 1257 "stn4_pose_ok≔qMast.q400_execute_cam2(14)"
      global stn4_pose_ok=qMast.q400_execute_cam2(14)
      $ 1258 "stn4_tube_ok≔stn4_pose_ok"
      global stn4_tube_ok=stn4_pose_ok
      $ 1259 "stn4_tube_angle≔stn4_loop_count * cam2_angle"
      global stn4_tube_angle=stn4_loop_count * cam2_angle
      $ 1260 "If stn4_pose_ok ≟  True "
      if (stn4_pose_ok  ==    True  ):
        $ 1261 "break"
        break
      end
      $ 1262 "cur_joints≔get_actual_joint_positions()"
      global cur_joints= get_actual_joint_positions ()
      $ 1263 "movej([cur_joints[0], cur_joints[1], cur_joints[2], cur_joints[3], cur_joints[4], cur_joints[5] + d2r(cam2_angle)], a = 8, v = 3)"
      movej([cur_joints[0], cur_joints[1], cur_joints[2], cur_joints[3], cur_joints[4], cur_joints[5] + d2r(cam2_angle)], a = 8, v = 3)
      $ 1264 "stn4_loop_count≔stn4_loop_count + 1"
      global stn4_loop_count=stn4_loop_count + 1
      Loop_6 = Loop_6 + 1
    end
    $ 1265 "If stn4_tube_ok ≠  True "
    if (stn4_tube_ok  !=    True  ):
      $ 1266 "FahreAchse"
      $ 1267 "stn4_ref_1_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn4_ref_1_p_p)), qnear=stn4_ref_1_p_q), a=3.490658503988659, v=2.0943951023931953)
      $ 1268 "stn4_loop_count≔0"
      global stn4_loop_count=0
      $ 1269 "Schleife 72 mal"
      Loop_7 = 0
      while (Loop_7 < 72):
        $ 1270 "stn4_pose_ok≔qMast.q400_execute_cam2(14)"
        global stn4_pose_ok=qMast.q400_execute_cam2(14)
        $ 1271 "stn4_tube_ok≔stn4_pose_ok"
        global stn4_tube_ok=stn4_pose_ok
        $ 1272 "stn4_tube_angle≔stn4_loop_count * cam2_angle2"
        global stn4_tube_angle=stn4_loop_count * cam2_angle2
        $ 1273 "If stn4_pose_ok ≟  True "
        if (stn4_pose_ok  ==    True  ):
          $ 1274 "break"
          break
        end
        $ 1275 "cur_joints≔get_actual_joint_positions()"
        global cur_joints= get_actual_joint_positions ()
        $ 1276 "movej([cur_joints[0], cur_joints[1], cur_joints[2], cur_joints[3], cur_joints[4], cur_joints[5] + d2r(cam2_angle2)], a = 8, v = 3)"
        movej([cur_joints[0], cur_joints[1], cur_joints[2], cur_joints[3], cur_joints[4], cur_joints[5] + d2r(cam2_angle2)], a = 8, v = 3)
        $ 1277 "stn4_loop_count≔stn4_loop_count + 1"
        global stn4_loop_count=stn4_loop_count + 1
        Loop_7 = Loop_7 + 1
      end
    end
    $ 1278 "Einstellen DO[0]=Aus"
    set_standard_digital_out(0, False)
    $ 1279 "Einstellen DO[1]=Aus"
    set_standard_digital_out(1, False)
    $ 1280 "FahreAchse"
    $ 1281 "stn4_ref_1_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn4_ref_1_p_p)), qnear=stn4_ref_1_p_q), a=34.906585039886586, v=3.141592653589793)
    $ 1282 "FahreLinear"
    $ 1283 "stn4_cam_help_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn4_cam_help_p_p)), a=1.2, v=0.5, r=0.05)
    $ 1284 "FahreAchse"
    $ 1285 "stn4_next_hlp_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn4_next_hlp_p_p)), qnear=stn4_next_hlp_p_q), a=34.906585039886586, v=3.141592653589793)
  end
  def stn5_rack_check():
    $ 1286 "stn5_rack_check" "noBreak"
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1287 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 128, 128, "1")
    rq_wait_pos_spe_for_request(255, 128, 128, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1288 "gripper_pos≔rq_current_pos_norm()"
    global gripper_pos=rq_current_pos_norm()
    $ 1289 "If gripper_pos ≤ 83 and gripper_pos > 70"
    if (gripper_pos  <=  83  and  gripper_pos > 70):
      $ 1290 "cur_pose≔pose_trans(pose_inv(stn5_plane), get_actual_tcp_pose())"
      global cur_pose= pose_trans ( pose_inv (stn5_plane),  get_actual_tcp_pose ())
      $ 1291 "stn5_rk_wng_p≔pose_trans(cur_pose, p[0,0,-60/1000,0,0,0])"
      global stn5_rk_wng_p= pose_trans (cur_pose, p[0,0,-60/1000,0,0,0])
      $ 1292 "FahreLinear"
      $ 1293 "stn5_rk_wng_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn5_plane, stn5_rk_wng_p), a=1.2, v=0.25)
      $ 1294 "cur_pose≔pose_trans(pose_inv(stn5_plane), get_actual_tcp_pose())"
      global cur_pose= pose_trans ( pose_inv (stn5_plane),  get_actual_tcp_pose ())
      $ 1295 "stn5_rk_wng_p≔pose_add(cur_pose, p[0,0,0,0,0,d2r(90)])"
      global stn5_rk_wng_p= pose_add (cur_pose, p[0,0,0,0,0,d2r(90)])
      $ 1296 "FahreLinear"
      $ 1297 "stn5_rk_wng_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn5_plane, stn5_rk_wng_p), a=1.2, v=0.25)
      $ 1298 "cur_pose≔pose_trans(pose_inv(stn5_plane), get_actual_tcp_pose())"
      global cur_pose= pose_trans ( pose_inv (stn5_plane),  get_actual_tcp_pose ())
      $ 1299 "stn5_rk_wng_p≔pose_trans(cur_pose, p[0,0,60/1000,0,0,0])"
      global stn5_rk_wng_p= pose_trans (cur_pose, p[0,0,60/1000,0,0,0])
      $ 1300 "FahreLinear"
      $ 1301 "stn5_rk_wng_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn5_plane, stn5_rk_wng_p), a=0.3, v=0.075)
    else:
      $ 1302 "ElseIf gripper_pos ≥ 94"
      if (gripper_pos  >=  94):
        $ 1303 "cur_pose≔pose_trans(pose_inv(stn5_plane), get_actual_tcp_pose())"
        global cur_pose= pose_trans ( pose_inv (stn5_plane),  get_actual_tcp_pose ())
        $ 1304 "stn5_rk_wng_p≔pose_trans(cur_pose, p[0,0,-60/1000,0,0,0])"
        global stn5_rk_wng_p= pose_trans (cur_pose, p[0,0,-60/1000,0,0,0])
        $ 1305 "FahreLinear"
        $ 1306 "stn5_rk_wng_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, stn5_rk_wng_p), a=1.2, v=0.25)
        $ 1307 "FahreAchse"
        $ 1308 "stn5_stn4_hlp_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn5_stn4_hlp_p_p)), qnear=stn5_stn4_hlp_p_q), a=3.490658503988659, v=1.0471975511965976, r=0.05)
        $ 1309 "stn6_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=3.490658503988659, v=1.0471975511965976, r=0.05)
        $ 1310 "FahreAchse"
        $ 1311 "home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], home_p_p)), qnear=home_p_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 1312 "Meldung: Keine Zentrifugen rack finden."
        popup("Keine Zentrifugen rack finden.", "Fehler", False, True, blocking=True)
      end
    end
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1313 "Greifer offen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(0, 255, 128, "1")
    rq_wait_pos_spe_for_request(0, 255, 128, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
  end
  def stn7_init_stndby():
    $ 1314 "stn7_init_stndby" "noBreak"
    $ 1315 "FahreAchse"
    $ 1316 "stn7_retrct2_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_retrct2_p_p)), qnear=stn7_retrct2_p_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 1317 "stn7_dr2_up_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr2_up_p_p)), qnear=stn7_dr2_up_p_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1318 "Greifer offen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(0, 255, 0, "1")
    rq_wait_pos_spe_for_request(0, 255, 0, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1319 "stn7_dr2_dwn_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr2_dwn_p_p)), qnear=stn7_dr2_dwn_p_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1320 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 128, 0, "1")
    rq_wait_pos_spe_for_request(255, 128, 0, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1321 "FahreLinear"
    $ 1322 "stn7_dr2_ini_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr2_ini_p_p)), a=0.1, v=0.05)
    $ 1323 "stn7_dr2_dwn_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr2_dwn_p_p)), a=0.1, v=0.05)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1324 "Greifer offen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(0, 255, 0, "1")
    rq_wait_pos_spe_for_request(0, 255, 0, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1325 "FahreLinear"
    $ 1326 "stn7_dr1_dwn_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr1_dwn_p_p)), a=1.2, v=0.25)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1327 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 128, 0, "1")
    rq_wait_pos_spe_for_request(255, 128, 0, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1328 "stn7_dr1_ini_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr1_ini_p_p)), a=0.1, v=0.05)
    $ 1329 "stn7_dr1_dwn_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr1_dwn_p_p)), a=0.1, v=0.05)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1330 "Greifer offen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(0, 255, 0, "1")
    rq_wait_pos_spe_for_request(0, 255, 0, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1331 "stn7_dr1_up_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr1_up_p_p)), a=0.1, v=0.05)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1332 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 255, 0, "1")
    rq_wait_pos_spe_for_request(255, 255, 0, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1333 "FahreAchse"
    $ 1334 "stn7_ld_apr_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_ld_apr_p_p)), qnear=stn7_ld_apr_p_q), a=2.443460952792061, v=1.7453292519943295)
    $ 1335 "FahreLinear"
    $ 1336 "stn7_ld_press_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_ld_press_p_p)), a=0.6, v=0.1)
    $ 1337 "Warten: 1.0"
    sleep(1.0)
    $ 1338 "stn7_ld_apr_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_ld_apr_p_p)), a=0.6, v=0.1)
    $ 1339 "qMast.set_init_alarm(7)"
    qMast.set_init_alarm(7)
    $ 1340 "FahreAchse"
    $ 1341 "stn7_home_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_home_p_p)), qnear=stn7_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def stn7_open_doors():
    $ 1342 "stn7_open_doors" "noBreak"
    $ 1343 "FahreAchse"
    $ 1345 "stn7_retrct1_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_retrct1_p_p)), qnear=stn7_retrct1_p_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 1346 "stn7_dr1_up_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr1_up_p_p)), qnear=stn7_dr1_up_p_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1347 "Greifer offen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(0, 255, 0, "1")
    rq_wait_pos_spe_for_request(0, 255, 0, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1348 "FahreLinear"
    $ 1349 "stn7_dr1_dwn_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr1_dwn_p_p)), a=0.3, v=0.1)
    $ 1350 "stn7_dr1_open_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr1_open_p_p)), a=0.3, v=0.1)
    $ 1351 "stn7_dr2_ohp1_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr2_ohp1_p_p)), a=0.3, v=0.1)
    $ 1352 "FahreLinear"
    $ 1353 "stn7_dr2_up_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr2_up_p_p)), a=0.3, v=0.1)
    $ 1354 "stn7_dr2_dwn_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr2_dwn_p_p)), a=0.3, v=0.1)
    $ 1355 "stn7_dr2_open_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr2_open_p_p)), a=0.3, v=0.1)
    $ 1356 "stn7_dr2_ohp1_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr2_ohp1_p_p)), a=0.3, v=0.1)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1357 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 255, 0, "1")
    rq_wait_pos_spe_for_request(255, 255, 0, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1358 "FahreAchse"
    $ 1359 "stn7_home_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_home_p_p)), qnear=stn7_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def stn7_close_doors():
    $ 1360 "stn7_close_doors" "noBreak"
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1361 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 128, 255, "1")
    rq_wait_pos_spe_for_request(255, 128, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1362 "FahreAchse"
    $ 1363 "stn7_home_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_home_p_p)), qnear=stn7_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.1)
    $ 1364 "stn7_apr1_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_apr1_p_p)), qnear=stn7_apr1_p_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 1365 "FahreLinear"
    $ 1366 "stn7_push1_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_push1_p_p)), a=0.5, v=0.1)
    $ 1367 "stn7_apr1_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_apr1_p_p)), a=1.2, v=0.25)
    $ 1368 "stn7_apr2_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_apr2_p_p)), a=1.2, v=0.25)
    $ 1369 "stn7_push2_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_push2_p_p)), a=0.5, v=0.1)
    $ 1370 "stn7_dr2_bk_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_dr2_bk_p_p)), a=1.2, v=0.25)
  end
  def stn7_check_doors():
    $ 1371 "stn7_check_doors" "noBreak"
    $ 1372 "Schleife"
    while (True):
      $ 1373 "stn7_door_1_ok≔get_digital_in(2)"
      global stn7_door_1_ok=get_digital_in(2)
      $ 1374 "If stn7_door_1_ok ≟  False "
      if (stn7_door_1_ok  ==    False  ):
        $ 1376 "Meldung"
        popup(str_cat("",stn7_skype_msg), "Fehler", False, True, blocking=False)
        halt
      else:
        $ 1377 "Else" "noBreak"
        $ 1378 "stn7_door_2_ok≔get_digital_in(0)"
        global stn7_door_2_ok=get_digital_in(0)
        $ 1379 "If stn7_door_2_ok ≟  False "
        if (stn7_door_2_ok  ==    False  ):
          $ 1381 "Meldung"
          popup(str_cat("",stn7_skype_msg), "Fehler", False, True, blocking=False)
          halt
        else:
          $ 1382 "Else" "noBreak"
          $ 1383 "break"
          break
        end
      end
    end
  end
  def stn9_decap():
    $ 1384 "stn9_decap" "noBreak"
    $ 1385 "FahreAchse"
    $ 1386 "stn9_dcap_apr_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_dcap_apr_p_p)), qnear=stn9_dcap_apr_p_q), a=2.792526803190927, v=2.0943951023931953)
    $ 1387 "Einstellen Decap=Ein"
    set_standard_digital_out(2, True)
    $ 1388 "FahreLinear"
    $ 1389 "stn9_lv_tb_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_lv_tb_p_p)), a=0.6, v=0.12)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1390 "Greiferbewegung65% (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(166, 51, 0, "1")
    rq_wait_pos_spe_for_request(166, 51, 0, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1391 "Warten: 0.5"
    sleep(0.5)
    $ 1392 "Einstellen Decap=Aus"
    set_standard_digital_out(2, False)
    $ 1393 "FahreAchse"
    $ 1394 "stn9_hold_dcp_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_hold_dcp_p_p)), qnear=stn9_hold_dcp_p_q), a=20.943951023931955, v=3.141592653589793)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1395 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 128, 128, "1")
    rq_wait_pos_spe_for_request(255, 128, 128, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1396 "FahreAchse"
    $ 1397 "stn9_dcap_up_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_dcap_up_p_p)), qnear=stn9_dcap_up_p_q), a=2.792526803190927, v=1.0471975511965976)
    $ 1398 "FahreLinear"
    $ 1399 "stn9_dcap_hlp_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_dcap_hlp_p_p)), a=0.8, v=0.5)
    $ 1400 "FahreAchse"
    $ 1401 "stn9_dcap_apr_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_dcap_apr_p_p)), qnear=stn9_dcap_apr_p_q), a=20.943951023931955, v=3.141592653589793)
    $ 1402 "FahreAchse"
    $ 1403 "stn9_bin_apr_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_bin_apr_p_p)), qnear=stn9_bin_apr_p_q), a=3.490658503988659, v=1.0471975511965976, r=0.005)
    $ 1404 "stn9_lv_cap_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_lv_cap_p_p)), qnear=stn9_lv_cap_p_q), a=3.490658503988659, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1405 "Greiferbewegung50% (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(128, 255, 0, "1")
    rq_wait_pos_spe_for_request(128, 255, 0, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1406 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 64, 0, "1")
    rq_wait_pos_spe_for_request(255, 64, 0, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1407 "Greiferbewegung50% (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(128, 255, 0, "1")
    rq_wait_pos_spe_for_request(128, 255, 0, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1408 "FahreAchse"
    $ 1409 "stn9_bin_apr_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_bin_apr_p_p)), qnear=stn9_bin_apr_p_q), a=3.490658503988659, v=1.0471975511965976, r=0.005)
    $ 1410 "stn9_dcap_apr_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_dcap_apr_p_p)), qnear=stn9_dcap_apr_p_q), a=3.490658503988659, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1411 "Greifer offen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(0, 255, 0, "1")
    rq_wait_pos_spe_for_request(0, 255, 0, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1412 "FahreLinear"
    $ 1413 "stn9_hold_cap_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_hold_cap_p_p)), a=0.8, v=0.25)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1414 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 128, 51, "1")
    rq_wait_pos_spe_for_request(255, 128, 51, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1415 "Einstellen Decap=Ein"
    set_standard_digital_out(2, True)
    $ 1416 "FahreLinear"
    $ 1417 "stn9_dcap_apr_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_dcap_apr_p_p)), a=1.2, v=0.25)
  end
  def stn11_open_archiv():
    $ 1418 "stn11_open_archiv" "noBreak"
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1419 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_wait_pos_spe_for_request(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1420 "FahreAchse"
    $ 1421 "stn11_home_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_home_p_p)), qnear=stn11_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 1422 "FahreLinear"
    $ 1423 "stn11_hlp_up_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_hlp_up_p_p)), a=1.2, v=0.25)
    $ 1424 "stn11_clo_apr_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_clo_apr_p_p)), a=1.2, v=0.25)
    $ 1425 "stn11_close_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_close_p_p)), a=0.5, v=0.1)
    $ 1426 "stn11_clo_up_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_clo_up_p_p)), a=1.2, v=0.25)
    $ 1427 "stn11_clo_up2_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_clo_up2_p_p)), a=1.2, v=0.25)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1428 "Greifer offen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(0, 255, 255, "1")
    rq_wait_pos_spe_for_request(0, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1429 "stn11_opn_apr_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_opn_apr_p_p)), a=1.2, v=0.25)
    $ 1430 "stn11_opn_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_opn_p_p)), a=0.5, v=0.1)
    $ 1431 "stn11_opn_up_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_opn_up_p_p)), a=1.2, v=0.25)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
    #   Type: Greifer
    $ 1432 "Greifer geschlossen (1)"
    if not(gripper_connected[0]):
      popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_wait_pos_spe_for_request(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 1433 "FahreAchse"
    $ 1434 "stn11_home_p" "breakAfter"
    set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_home_p_p)), qnear=stn11_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  $ 1 "VorStart"
  $ 2 "stn3_ok_popup≔ True "
  global stn3_ok_popup=  True  
  $ 3 "stn3_cros_popup≔ True "
  global stn3_cros_popup=  True  
  $ 4 "qMast≔rpc_factory('xmlrpc','http://192.168.20.222:9095')"
  global qMast=rpc_factory("xmlrpc","http://192.168.20.222:9095")
  $ 6 "all_machines_on≔ False "
  global all_machines_on=  False  
  $ 7 "bc_2_check≔ True "
  global bc_2_check=  True  
  $ 8 "init_qMast≔ True "
  global init_qMast=  True  
  $ 9 "start_ping≔ False "
  global start_ping=  False  
  $ 10 "jobDone≔ False "
  global jobDone=  False  
  $ 11 "jobID≔-1"
  global jobID=-1
  $ 12 "Teach≔ False "
  global Teach=  False  
  $ 13 "goToHome≔ True "
  global goToHome=  True  
  $ 14 "moveToHome≔ False "
  global moveToHome=  False  
  $ 15 "stn2_ini_chk_rk≔ True "
  global stn2_ini_chk_rk=  True  
  $ 16 "cam2_angle≔10"
  global cam2_angle=10
  $ 17 "cam2_angle2≔5"
  global cam2_angle2=5
  $ 18 "stn1_rows≔5"
  global stn1_rows=5
  $ 19 "stn1_cols≔8"
  global stn1_cols=8
  $ 20 "stn1_pick_z≔123"
  global stn1_pick_z=123
  $ 21 "stn3_total_locs≔10"
  global stn3_total_locs=10
  $ 22 "stn3_place_z≔21"
  global stn3_place_z=21
  $ 23 "stn3_rot_z≔60"
  global stn3_rot_z=60
  $ 24 "stn3_pick_z≔81"
  global stn3_pick_z=81
  $ 25 "stn2_pk_rk_z≔136"
  global stn2_pk_rk_z=136
  $ 26 "stn2_rk_chk_y≔64"
  global stn2_rk_chk_y=64
  $ 27 "stn4_loop_count≔0"
  global stn4_loop_count=0
  $ 28 "stn5_pick_tb_z≔124"
  global stn5_pick_tb_z=124
  $ 29 "stn5_place_tb_z≔120"
  global stn5_place_tb_z=120
  $ 30 "stn5_place_rk_z≔121"
  global stn5_place_rk_z=121
  $ 31 "stn5_pick_rk_z≔121"
  global stn5_pick_rk_z=121
  $ 32 "stn5_pick_cw_z≔120"
  global stn5_pick_cw_z=120
  $ 33 "stn5_place_cw_z≔118"
  global stn5_place_cw_z=118
  $ 34 "stn5_rows_parnt≔4"
  global stn5_rows_parnt=4
  $ 35 "stn5_cols_parnt≔2"
  global stn5_cols_parnt=2
  $ 36 "stn5_rows_child≔3"
  global stn5_rows_child=3
  $ 37 "stn5_cols_child≔3"
  global stn5_cols_child=3
  $ 38 "stn6_pick_z≔254"
  global stn6_pick_z=254
  $ 39 "stn6_place_z≔250"
  global stn6_place_z=250
  $ 40 "stn7_rows_parnt≔1"
  global stn7_rows_parnt=1
  $ 41 "stn7_cols_parnt≔2"
  global stn7_cols_parnt=2
  $ 42 "stn7_rows_child≔2"
  global stn7_rows_child=2
  $ 43 "stn7_cols_child≔5"
  global stn7_cols_child=5
  $ 44 "stn7_place_z≔199"
  global stn7_place_z=199
  $ 45 "stn7_pick_z≔204"
  global stn7_pick_z=204
  $ 46 "stn7_skype_msg≔'Sysmex Schubladenpos. manuell veraendert. Roboter bitte neu starten. Herzliche Gruesse Markus Praus'"
  global stn7_skype_msg="Sysmex Schubladenpos. manuell veraendert. Roboter bitte neu starten. Herzliche Gruesse Markus Praus"
  $ 47 "stn10_place_z≔175"
  global stn10_place_z=175
  $ 48 "stn10_skype_ful≔'Fehlerstaender ist full. Bitte roboter neu starten'"
  global stn10_skype_ful="Fehlerstaender ist full. Bitte roboter neu starten"
  $ 49 "stn11_place_z≔175"
  global stn11_place_z=175
  $ 50 "stn11_skype_msg≔'Bitte Archiv schublade offnen. Roboter bitte neu starten. Herzliche Gruesse Mrkus Praus'"
  global stn11_skype_msg="Bitte Archiv schublade offnen. Roboter bitte neu starten. Herzliche Gruesse Mrkus Praus"
  $ 51 "stn11_skype_ful≔'Archivstaender ist full. Bitte roboter neu starten'"
  global stn11_skype_ful="Archivstaender ist full. Bitte roboter neu starten"
  $ 52 "stn14_tb_rot_z≔70"
  global stn14_tb_rot_z=70
  $ 53 "stn14_tb_pl_z≔38"
  global stn14_tb_pl_z=38
  $ 54 "stn14_push_z≔70"
  global stn14_push_z=70
  $ 55 "stn14_pl_rk_z≔141"
  global stn14_pl_rk_z=141
  $ 56 "stn15_place_z≔175"
  global stn15_place_z=175
  $ 57 "stn15_pick_z≔178"
  global stn15_pick_z=178
  $ 58 "archiv_opened≔ False "
  global archiv_opened=  False  
  $ 59 "Test≔ False "
  global Test=  False  
  $ 1435 "Thread_1"
  thread Thread_1():
    while (True):
      $ 1436 "sync()"
      sync()
      $ 1437 "If jobDone≟ True "
      if (jobDone ==   True  ):
        $ 1438 "jobArr≔qMast.get_job()"
        global jobArr=qMast.get_job()
        $ 1439 "jobID≔jobArr[0]"
        global jobID=jobArr[0]
        $ 1440 "If jobID ≠ 0"
        if (jobID  !=  0):
          $ 1441 "jobDone≔ False "
          global jobDone=  False  
        end
      end
    end
  end
  threadId_Thread_1 = run Thread_1()
  $ 1442 "Thread_2"
  thread Thread_2():
    while (True):
      $ 1443 "sync()"
      sync()
      $ 1444 "Warten: 0.1"
      sleep(0.1)
      $ 1445 "If start_ping ≟  True "
      if (start_ping  ==    True  ):
        $ 1446 "qMast.ping()"
        qMast.ping()
      end
    end
  end
  threadId_Thread_2 = run Thread_2()
  while (True):
    $ 60 "Roboterprogramm"
    $ 61 "sync()"
    sync()
    $ 62 "If goToHome ≟  True "
    if (goToHome  ==    True  ):
      $ 63 "FahreAchse"
      $ 64 "home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], home_p_p)), qnear=home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 65 "stn1_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_home_p_p)), qnear=stn1_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 66 "goToHome≔ False "
      global goToHome=  False  
    end
    $ 67 "If Teach≟ True "
    if (Teach ==   True  ):
      $ 68 "'Station 1 Reference Positions'"
      # 'Station 1 Reference Positions'
      $ 69 "FahreAchse"
      $ 70 "stn1_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_home_p_p)), qnear=stn1_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 71 "stn1_help_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_help_p_p)), qnear=stn1_help_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 72 "stn1_help2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_help2_p_p)), qnear=stn1_help2_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 73 "stn1_ref_1_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_ref_1_p_p)), qnear=stn1_ref_1_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 74 "stn1_ref_2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_ref_2_p_p)), qnear=stn1_ref_2_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 75 "stn1_ref_3_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_ref_3_p_p)), qnear=stn1_ref_3_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 76 "'Station 2 Reference Positions'"
      # 'Station 2 Reference Positions'
      $ 77 "FahreAchse"
      $ 78 "stn2_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_home_p_p)), qnear=stn2_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 79 "stn2_ref_1_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_ref_1_p_p)), qnear=stn2_ref_1_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 80 "stn2_ref_2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_ref_2_p_p)), qnear=stn2_ref_2_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 81 "stn2_ref_3_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_ref_3_p_p)), qnear=stn2_ref_3_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 82 "stn2_ref_4_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_ref_4_p_p)), qnear=stn2_ref_4_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 83 "stn2_ref_5_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_ref_5_p_p)), qnear=stn2_ref_5_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 84 "stn2_ref_6_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_ref_6_p_p)), qnear=stn2_ref_6_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 85 "'Door positions in subprograms'"
      # 'Door positions in subprograms'
      $ 86 "'Station 3 Reference Positions'"
      # 'Station 3 Reference Positions'
      $ 87 "FahreAchse"
      $ 88 "stn3_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_home_p_p)), qnear=stn3_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 89 "stn3_top_hlp_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_top_hlp_p_p)), qnear=stn3_top_hlp_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 90 "stn3_ref_1_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ref_1_p_p)), qnear=stn3_ref_1_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 91 "stn3_ref_2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ref_2_p_p)), qnear=stn3_ref_2_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 92 "stn3_ref_3_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ref_3_p_p)), qnear=stn3_ref_3_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 93 "stn3_ref_4_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ref_4_p_p)), qnear=stn3_ref_4_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 94 "stn3_ref_5_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ref_5_p_p)), qnear=stn3_ref_5_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 95 "stn3_ref_6_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ref_6_p_p)), qnear=stn3_ref_6_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 96 "stn3_ref_7_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ref_7_p_p)), qnear=stn3_ref_7_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 97 "stn3_ref_8_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ref_8_p_p)), qnear=stn3_ref_8_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 98 "stn3_ini_apr_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ini_apr_p_p)), qnear=stn3_ini_apr_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 99 "stn3_ini_prs_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ini_prs_p_p)), qnear=stn3_ini_prs_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 100 "stn3_apr_run_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_apr_run_p_p)), qnear=stn3_apr_run_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 101 "stn3_prss_run_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_prss_run_p_p)), qnear=stn3_prss_run_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 102 "'Station 4,6,9,10 reference Positions'"
      # 'Station 4,6,9,10 reference Positions'
      $ 103 "FahreAchse"
      $ 104 "stn6_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 105 "stn6_help_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_help_p_p)), qnear=stn6_help_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 106 "stn6_place_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_place_p_p)), qnear=stn6_place_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 107 "stn4_ref_1_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn4_ref_1_p_p)), qnear=stn4_ref_1_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 109 "stn4_cam_help_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn4_cam_help_p_p)), qnear=stn4_cam_help_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 110 "stn4_next_hlp_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn4_next_hlp_p_p)), qnear=stn4_next_hlp_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 111 "stn5_stn4_hlp_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn5_stn4_hlp_p_p)), qnear=stn5_stn4_hlp_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 112 "stn9_dcap_apr_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_dcap_apr_p_p)), qnear=stn9_dcap_apr_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 113 "stn7_dcap_apr_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.779413821965, -.869656427631, .149271774994, -.000554336510, .003016566406, 1.568064465904], stn7_dcap_apr_p_p)), qnear=stn7_dcap_apr_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 123 "stn10_ref_1_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn10_ref_1_p_p)), qnear=stn10_ref_1_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 124 "stn10_ref_2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn10_ref_2_p_p)), qnear=stn10_ref_2_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 125 "stn10_ref_3_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn10_ref_3_p_p)), qnear=stn10_ref_3_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 126 "'Station 5 reference Positions'"
      # 'Station 5 reference Positions'
      $ 127 "FahreAchse"
      $ 128 "stn5_rk_rf_1_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_rk_rf_1_p_p)), qnear=stn5_rk_rf_1_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 129 "stn5_rk_rf_2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_rk_rf_2_p_p)), qnear=stn5_rk_rf_2_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 130 "stn5_rk_rf_3_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_rk_rf_3_p_p)), qnear=stn5_rk_rf_3_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 131 "stn5_tb_rf_1_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_tb_rf_1_p_p)), qnear=stn5_tb_rf_1_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 132 "stn5_tb_rf_2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_tb_rf_2_p_p)), qnear=stn5_tb_rf_2_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 133 "stn5_tb_rf_3_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_tb_rf_3_p_p)), qnear=stn5_tb_rf_3_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 134 "stn5_tb_rf_4_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_tb_rf_4_p_p)), qnear=stn5_tb_rf_4_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 135 "stn5_tb_rf_5_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_tb_rf_5_p_p)), qnear=stn5_tb_rf_5_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 136 "stn5_cw_rf_1_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_cw_rf_1_p_p)), qnear=stn5_cw_rf_1_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 137 "stn5_cw_rf_2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_cw_rf_2_p_p)), qnear=stn5_cw_rf_2_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 138 "'Station 5 init ref Positions'"
      # 'Station 5 init ref Positions'
      $ 152 "'Station 11 reference positions'"
      # 'Station 11 reference positions'
      $ 153 "FahreAchse"
      $ 154 "stn11_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_home_p_p)), qnear=stn11_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 155 "stn11_ref_1_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_1_p_p)), qnear=stn11_ref_1_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 156 "stn11_ref_2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_2_p_p)), qnear=stn11_ref_2_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 157 "stn11_ref_3_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_3_p_p)), qnear=stn11_ref_3_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 158 "stn11_ref_4_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_4_p_p)), qnear=stn11_ref_4_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 159 "stn11_ref_5_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_5_p_p)), qnear=stn11_ref_5_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 160 "stn11_ref_6_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_6_p_p)), qnear=stn11_ref_6_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 161 "stn11_ref_7_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_7_p_p)), qnear=stn11_ref_7_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 162 "stn11_ref_8_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_8_p_p)), qnear=stn11_ref_8_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 163 "stn11_ref_9_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_9_p_p)), qnear=stn11_ref_9_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 164 "stn11_ref10_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref10_p_p)), qnear=stn11_ref10_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 165 "stn11_ref11_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref11_p_p)), qnear=stn11_ref11_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 166 "stn11_ref12_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref12_p_p)), qnear=stn11_ref12_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 167 "'Station 11 door positions in sub program'"
      # 'Station 11 door positions in sub program'
      $ 168 "'Station 7 reference positions'"
      # 'Station 7 reference positions'
      $ 169 "FahreAchse"
      $ 170 "stn7_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_home_p_p)), qnear=stn7_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 171 "stn7_ref_1_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_ref_1_p_p)), qnear=stn7_ref_1_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 172 "stn7_ref_2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_ref_2_p_p)), qnear=stn7_ref_2_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 173 "stn7_ref_4_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_ref_4_p_p)), qnear=stn7_ref_4_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 174 "stn7_ref_5_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_ref_5_p_p)), qnear=stn7_ref_5_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 175 "stn7_bin_help_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_bin_help_p_p)), qnear=stn7_bin_help_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 176 "stn7_bin_apr_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_bin_apr_p_p)), qnear=stn7_bin_apr_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 177 "stn7_bin_thrw_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_bin_thrw_p_p)), qnear=stn7_bin_thrw_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 178 "'Station 7 init positions in sub program'"
      # 'Station 7 init positions in sub program'
      $ 179 "'Station 8 reference positions'"
      # 'Station 8 reference positions'
      $ 180 "FahreAchse"
      $ 181 "stn14_stn8_hl_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_stn8_hl_p_p)), qnear=stn14_stn8_hl_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 182 "stn8_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn8_home_p_p)), qnear=stn8_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 183 "stn8_pl_apr1_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn8_pl_apr1_p_p)), qnear=stn8_pl_apr1_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 184 "stn8_pl_apr2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn8_pl_apr2_p_p)), qnear=stn8_pl_apr2_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 185 "stn8_place_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn8_place_p_p)), qnear=stn8_place_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 186 "'Station 14 reference positions'"
      # 'Station 14 reference positions'
      $ 187 "FahreAchse"
      $ 188 "stn14_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.779413821965, -.869656427631, .149271774994, -.000554336510, .003016566406, 1.568064465904], stn14_home_p_p)), qnear=stn14_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 189 "stn14_pk_rk_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_pk_rk_p_p)), qnear=stn14_pk_rk_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 190 "stn14_pkrk_up_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_pkrk_up_p_p)), qnear=stn14_pkrk_up_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 191 "stn14_pl_rk_h_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_pl_rk_h_p_p)), qnear=stn14_pl_rk_h_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 192 "stn14_pl_rk_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_pl_rk_p_p)), qnear=stn14_pl_rk_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 193 "stn14_plrk_rt_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_plrk_rt_p_p)), qnear=stn14_plrk_rt_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 194 "stn14_lv_rk_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.779413821965, -.869656427631, .149271774994, -.000554336510, .003016566406, 1.568064465904], stn14_lv_rk_p_p)), qnear=stn14_lv_rk_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 195 "stn14_pl_tb_h_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.779413821965, -.869656427631, .149271774994, -.000554336510, .003016566406, 1.568064465904], stn14_pl_tb_h_p_p)), qnear=stn14_pl_tb_h_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 196 "stn14_ref_1_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_ref_1_p_p)), qnear=stn14_ref_1_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 197 "stn14_ref_3_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_ref_3_p_p)), qnear=stn14_ref_3_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 198 "'Station 15 ref positions'"
      # 'Station 15 ref positions'
      $ 199 "FahreAchse"
      $ 200 "stn15_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn15_home_p_p)), qnear=stn15_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 201 "stn15_ref_1_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn15_ref_1_p_p)), qnear=stn15_ref_1_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 202 "stn15_ref_2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn15_ref_2_p_p)), qnear=stn15_ref_2_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 203 "stn15_ref_3_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn15_ref_3_p_p)), qnear=stn15_ref_3_p_q), a=1.3962634015954636, v=1.0471975511965976)
    end
    $ 204 "If init_qMast ≟  True "
    if (init_qMast  ==    True  ):
      $ 205 "stn1_ref_1_plan≔pose_trans(pose_inv(stn1_plane), stn1_ref_1_p)"
      global stn1_ref_1_plan= pose_trans ( pose_inv (stn1_plane), pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_ref_1_p_p)))
      $ 206 "stn1_ref_2_plan≔pose_trans(pose_inv(stn1_plane), stn1_ref_2_p)"
      global stn1_ref_2_plan= pose_trans ( pose_inv (stn1_plane), pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_ref_2_p_p)))
      $ 207 "stn1_ref_3_plan≔pose_trans(pose_inv(stn1_plane), stn1_ref_3_p)"
      global stn1_ref_3_plan= pose_trans ( pose_inv (stn1_plane), pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_ref_3_p_p)))
      $ 208 "stn2_rf_1_plane≔pose_trans(pose_inv(stn2_plane), stn2_ref_1_p)"
      global stn2_rf_1_plane= pose_trans ( pose_inv (stn2_plane), pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_ref_1_p_p)))
      $ 209 "stn2_rf_2_plane≔pose_trans(pose_inv(stn2_plane), stn2_ref_2_p)"
      global stn2_rf_2_plane= pose_trans ( pose_inv (stn2_plane), pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_ref_2_p_p)))
      $ 210 "stn2_rf_3_plane≔pose_trans(pose_inv(stn2_plane), stn2_ref_3_p)"
      global stn2_rf_3_plane= pose_trans ( pose_inv (stn2_plane), pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_ref_3_p_p)))
      $ 211 "stn2_rf_4_plane≔pose_trans(pose_inv(stn2_plane), stn2_ref_4_p)"
      global stn2_rf_4_plane= pose_trans ( pose_inv (stn2_plane), pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_ref_4_p_p)))
      $ 212 "stn2_rf_5_plane≔pose_trans(pose_inv(stn2_plane), stn2_ref_5_p)"
      global stn2_rf_5_plane= pose_trans ( pose_inv (stn2_plane), pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_ref_5_p_p)))
      $ 213 "stn2_rf_6_plane≔pose_trans(pose_inv(stn2_plane), stn2_ref_6_p)"
      global stn2_rf_6_plane= pose_trans ( pose_inv (stn2_plane), pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_ref_6_p_p)))
      $ 214 "stn3_ref_1_plan≔pose_trans(pose_inv(stn3_plane), stn3_ref_1_p)"
      global stn3_ref_1_plan= pose_trans ( pose_inv (stn3_plane), pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ref_1_p_p)))
      $ 215 "stn3_ref_2_plan≔pose_trans(pose_inv(stn3_plane), stn3_ref_2_p)"
      global stn3_ref_2_plan= pose_trans ( pose_inv (stn3_plane), pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ref_2_p_p)))
      $ 216 "stn3_ref_3_plan≔pose_trans(pose_inv(stn3_plane), stn3_ref_3_p)"
      global stn3_ref_3_plan= pose_trans ( pose_inv (stn3_plane), pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ref_3_p_p)))
      $ 217 "stn3_ref_4_plan≔pose_trans(pose_inv(stn3_plane), stn3_ref_4_p)"
      global stn3_ref_4_plan= pose_trans ( pose_inv (stn3_plane), pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ref_4_p_p)))
      $ 218 "stn3_ref_5_plan≔pose_trans(pose_inv(stn3_plane), stn3_ref_5_p)"
      global stn3_ref_5_plan= pose_trans ( pose_inv (stn3_plane), pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ref_5_p_p)))
      $ 219 "stn3_ref_6_plan≔pose_trans(pose_inv(stn3_plane), stn3_ref_6_p)"
      global stn3_ref_6_plan= pose_trans ( pose_inv (stn3_plane), pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ref_6_p_p)))
      $ 220 "stn3_ref_7_plan≔pose_trans(pose_inv(stn3_plane), stn3_ref_7_p)"
      global stn3_ref_7_plan= pose_trans ( pose_inv (stn3_plane), pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ref_7_p_p)))
      $ 221 "stn3_ref_8_plan≔pose_trans(pose_inv(stn3_plane), stn3_ref_8_p)"
      global stn3_ref_8_plan= pose_trans ( pose_inv (stn3_plane), pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_ref_8_p_p)))
      $ 222 "stn5_ref_1_plan≔pose_trans(pose_inv(stn5_plane),stn5_tb_rf_1_p)"
      global stn5_ref_1_plan= pose_trans ( pose_inv (stn5_plane),pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_tb_rf_1_p_p)))
      $ 223 "stn5_ref_2_plan≔pose_trans(pose_inv(stn5_plane),stn5_tb_rf_2_p)"
      global stn5_ref_2_plan= pose_trans ( pose_inv (stn5_plane),pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_tb_rf_2_p_p)))
      $ 224 "stn5_ref_3_plan≔pose_trans(pose_inv(stn5_plane),stn5_tb_rf_3_p)"
      global stn5_ref_3_plan= pose_trans ( pose_inv (stn5_plane),pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_tb_rf_3_p_p)))
      $ 225 "stn5_ref_4_plan≔pose_trans(pose_inv(stn5_plane),stn5_tb_rf_4_p)"
      global stn5_ref_4_plan= pose_trans ( pose_inv (stn5_plane),pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_tb_rf_4_p_p)))
      $ 226 "stn5_ref_5_plan≔pose_trans(pose_inv(stn5_plane),stn5_tb_rf_5_p)"
      global stn5_ref_5_plan= pose_trans ( pose_inv (stn5_plane),pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_tb_rf_5_p_p)))
      $ 227 "stn5_rk_1_plane≔pose_trans(pose_inv(stn5_plane),stn5_rk_rf_1_p)"
      global stn5_rk_1_plane= pose_trans ( pose_inv (stn5_plane),pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_rk_rf_1_p_p)))
      $ 228 "stn5_rk_2_plane≔pose_trans(pose_inv(stn5_plane),stn5_rk_rf_2_p)"
      global stn5_rk_2_plane= pose_trans ( pose_inv (stn5_plane),pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_rk_rf_2_p_p)))
      $ 229 "stn5_rk_3_plane≔pose_trans(pose_inv(stn5_plane),stn5_rk_rf_3_p)"
      global stn5_rk_3_plane= pose_trans ( pose_inv (stn5_plane),pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_rk_rf_3_p_p)))
      $ 230 "stn5_cw_1_plane≔pose_trans(pose_inv(stn5_plane),stn5_cw_rf_1_p)"
      global stn5_cw_1_plane= pose_trans ( pose_inv (stn5_plane),pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_cw_rf_1_p_p)))
      $ 231 "stn5_cw_2_plane≔pose_trans(pose_inv(stn5_plane), stn5_cw_rf_2_p)"
      global stn5_cw_2_plane= pose_trans ( pose_inv (stn5_plane), pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_cw_rf_2_p_p)))
      $ 232 "stn7_ref_1_plan≔pose_trans(pose_inv(stn7_plane), stn7_ref_1_p)"
      global stn7_ref_1_plan= pose_trans ( pose_inv (stn7_plane), pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_ref_1_p_p)))
      $ 233 "stn7_ref_2_plan≔pose_trans(pose_inv(stn7_plane), stn7_ref_2_p)"
      global stn7_ref_2_plan= pose_trans ( pose_inv (stn7_plane), pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_ref_2_p_p)))
      $ 234 "stn7_ref_3_plan≔pose_trans(pose_inv(stn7_plane), stn7_ref_1_p)"
      global stn7_ref_3_plan= pose_trans ( pose_inv (stn7_plane), pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_ref_1_p_p)))
      $ 235 "stn7_ref_4_plan≔pose_trans(pose_inv(stn7_plane), stn7_ref_4_p)"
      global stn7_ref_4_plan= pose_trans ( pose_inv (stn7_plane), pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_ref_4_p_p)))
      $ 236 "stn7_ref_5_plan≔pose_trans(pose_inv(stn7_plane), stn7_ref_5_p)"
      global stn7_ref_5_plan= pose_trans ( pose_inv (stn7_plane), pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_ref_5_p_p)))
      $ 237 "stn10_ref_1_pln≔pose_trans(pose_inv(stn6_plane), stn10_ref_1_p)"
      global stn10_ref_1_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn10_ref_1_p_p)))
      $ 238 "stn10_ref_2_pln≔pose_trans(pose_inv(stn6_plane), stn10_ref_2_p)"
      global stn10_ref_2_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn10_ref_2_p_p)))
      $ 239 "stn10_ref_3_pln≔pose_trans(pose_inv(stn6_plane), stn10_ref_3_p)"
      global stn10_ref_3_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn10_ref_3_p_p)))
      $ 240 "stn11_ref_1_pln≔pose_trans(pose_inv(stn6_plane), stn11_ref_1_p)"
      global stn11_ref_1_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_1_p_p)))
      $ 241 "stn11_ref_2_pln≔pose_trans(pose_inv(stn6_plane), stn11_ref_2_p)"
      global stn11_ref_2_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_2_p_p)))
      $ 242 "stn11_ref_3_pln≔pose_trans(pose_inv(stn6_plane), stn11_ref_3_p)"
      global stn11_ref_3_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_3_p_p)))
      $ 243 "stn11_ref_4_pln≔pose_trans(pose_inv(stn6_plane), stn11_ref_4_p)"
      global stn11_ref_4_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_4_p_p)))
      $ 244 "stn11_ref_5_pln≔pose_trans(pose_inv(stn6_plane), stn11_ref_5_p)"
      global stn11_ref_5_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_5_p_p)))
      $ 245 "stn11_ref_6_pln≔pose_trans(pose_inv(stn6_plane), stn11_ref_6_p)"
      global stn11_ref_6_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_6_p_p)))
      $ 246 "stn11_ref_7_pln≔pose_trans(pose_inv(stn6_plane), stn11_ref_7_p)"
      global stn11_ref_7_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_7_p_p)))
      $ 247 "stn11_ref_8_pln≔pose_trans(pose_inv(stn6_plane), stn11_ref_8_p)"
      global stn11_ref_8_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_8_p_p)))
      $ 248 "stn11_ref_9_pln≔pose_trans(pose_inv(stn6_plane), stn11_ref_9_p)"
      global stn11_ref_9_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref_9_p_p)))
      $ 249 "stn11_ref_10_pl≔pose_trans(pose_inv(stn6_plane), stn11_ref10_p)"
      global stn11_ref_10_pl= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref10_p_p)))
      $ 250 "stn11_ref_11_pl≔pose_trans(pose_inv(stn6_plane), stn11_ref11_p)"
      global stn11_ref_11_pl= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref11_p_p)))
      $ 251 "stn11_ref_12_pl≔pose_trans(pose_inv(stn6_plane), stn11_ref12_p)"
      global stn11_ref_12_pl= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_ref12_p_p)))
      $ 252 "stn14_ref_1_pln≔pose_trans(pose_inv(stn6_plane), stn14_ref_1_p)"
      global stn14_ref_1_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_ref_1_p_p)))
      $ 253 "stn14_ref_3_pln≔pose_trans(pose_inv(stn6_plane), stn14_ref_3_p)"
      global stn14_ref_3_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_ref_3_p_p)))
      $ 254 "stn15_ref_1_pln≔pose_trans(pose_inv(stn6_plane), stn15_ref_1_p)"
      global stn15_ref_1_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn15_ref_1_p_p)))
      $ 255 "stn15_ref_2_pln≔pose_trans(pose_inv(stn6_plane), stn15_ref_2_p)"
      global stn15_ref_2_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn15_ref_2_p_p)))
      $ 256 "stn15_ref_3_pln≔pose_trans(pose_inv(stn6_plane), stn15_ref_3_p)"
      global stn15_ref_3_pln= pose_trans ( pose_inv (stn6_plane), pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn15_ref_3_p_p)))
      $ 257 "qMast.reset()"
      qMast.reset()
      $ 258 "qMast.init_q400()"
      qMast.init_q400()
      $ 259 "qMast.set_stn1_grid(1,stn1_ref_1_plan,stn1_ref_2_plan,stn1_ref_3_plan,stn1_rows,stn1_cols)"
      qMast.set_stn1_grid(1,stn1_ref_1_plan,stn1_ref_2_plan,stn1_ref_3_plan,stn1_rows,stn1_cols)
      $ 260 "qMast.set_stn2_grid(1,stn2_rf_1_plane,stn2_rf_2_plane,stn2_rf_3_plane,stn2_rf_4_plane,stn2_rf_5_plane,stn2_rf_6_plane)"
      qMast.set_stn2_grid(1,stn2_rf_1_plane,stn2_rf_2_plane,stn2_rf_3_plane,stn2_rf_4_plane,stn2_rf_5_plane,stn2_rf_6_plane)
      $ 261 "qMast.set_stn3_grid(1, stn3_ref_1_plan, stn3_ref_2_plan, stn3_ref_3_plan, stn3_ref_4_plan, stn3_ref_5_plan, stn3_ref_6_plan, stn3_ref_7_plan, stn3_ref_8_plan)"
      qMast.set_stn3_grid(1, stn3_ref_1_plan, stn3_ref_2_plan, stn3_ref_3_plan, stn3_ref_4_plan, stn3_ref_5_plan, stn3_ref_6_plan, stn3_ref_7_plan, stn3_ref_8_plan)
      $ 262 "qMast.set_stn5_grid(1,stn5_ref_1_plan,stn5_ref_2_plan,stn5_ref_3_plan,stn5_rows_parnt,stn5_cols_parnt,stn5_ref_4_plan,stn5_ref_5_plan,stn5_rows_child,stn5_cols_child)"
      qMast.set_stn5_grid(1,stn5_ref_1_plan,stn5_ref_2_plan,stn5_ref_3_plan,stn5_rows_parnt,stn5_cols_parnt,stn5_ref_4_plan,stn5_ref_5_plan,stn5_rows_child,stn5_cols_child)
      $ 263 "qMast.set_stn5_counter_grid(stn5_cw_1_plane, stn5_cw_2_plane)"
      qMast.set_stn5_counter_grid(stn5_cw_1_plane, stn5_cw_2_plane)
      $ 264 "qMast.set_stn5_batch_grid(1,stn5_rk_1_plane,stn5_rk_2_plane,stn5_rk_3_plane,4,2)"
      qMast.set_stn5_batch_grid(1,stn5_rk_1_plane,stn5_rk_2_plane,stn5_rk_3_plane,4,2)
      $ 265 "qMast.set_stn7_grid(1,stn7_ref_1_plan,stn7_ref_2_plan,stn7_ref_3_plan,stn7_rows_parnt,stn7_cols_parnt,stn7_ref_4_plan,stn7_ref_5_plan,stn7_rows_child,stn7_cols_child)"
      qMast.set_stn7_grid(1,stn7_ref_1_plan,stn7_ref_2_plan,stn7_ref_3_plan,stn7_rows_parnt,stn7_cols_parnt,stn7_ref_4_plan,stn7_ref_5_plan,stn7_rows_child,stn7_cols_child)
      $ 266 "qMast.set_stn10_grid(1,stn10_ref_1_pln,stn10_ref_2_pln,stn10_ref_3_pln,8,4)"
      qMast.set_stn10_grid(1,stn10_ref_1_pln,stn10_ref_2_pln,stn10_ref_3_pln,8,4)
      $ 267 "qMast.set_stn11_grid(1,stn11_ref_1_pln,stn11_ref_2_pln,stn11_ref_3_pln,stn11_ref_4_pln,stn11_ref_5_pln,stn11_ref_6_pln,stn11_ref_7_pln,stn11_ref_8_pln,stn11_ref_9_pln,stn11_ref_10_pl,stn11_ref_11_pl,stn11_ref_12_pl,8,4)"
      qMast.set_stn11_grid(1,stn11_ref_1_pln,stn11_ref_2_pln,stn11_ref_3_pln,stn11_ref_4_pln,stn11_ref_5_pln,stn11_ref_6_pln,stn11_ref_7_pln,stn11_ref_8_pln,stn11_ref_9_pln,stn11_ref_10_pl,stn11_ref_11_pl,stn11_ref_12_pl,8,4)
      $ 268 "qMast.set_stn14_grid(1,stn14_ref_1_pln,stn14_ref_1_pln,stn14_ref_3_pln,5,1)"
      qMast.set_stn14_grid(1,stn14_ref_1_pln,stn14_ref_1_pln,stn14_ref_3_pln,5,1)
      $ 269 "qMast.set_stn15_grid(1,stn15_ref_1_pln,stn15_ref_2_pln,stn15_ref_3_pln,8,4)"
      qMast.set_stn15_grid(1,stn15_ref_1_pln,stn15_ref_2_pln,stn15_ref_3_pln,8,4)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer aktivieren
      $ 270 "Greifer zurücksetzen und aktivieren"
      
      kill rq_gripper_communication_thread
      rq_gripper_communication_thread_started = False
      rq_close_gripper_socket("1")
      rq_close_gripper_socket("2")
      rq_close_gripper_socket("3")
      rq_close_gripper_socket("4")
      
      rq_init_comm_if_connected(9, "1")
      rq_init_comm_if_connected(2, "2")
      rq_init_comm_if_connected(3, "3")
      rq_init_comm_if_connected(4, "4")
      rq_print_connected_grippers()
      rq_gripper_communication_thread = run rq_gripper_communication()
      
      while(not rq_gripper_communication_thread_started):
          sleep(0.008)
      end
      
      rq_set_max_current_for_all_grippers()
      
      reset_and_activate = True
      
      rq_activate_all_grippers(True)
      # end: URCap Program Node
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 271 "Greifer geschlossen (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(255, 255, 255, "1")
      rq_wait_pos_spe_for_request(255, 255, 255, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 272 "init_qMast≔ False "
      global init_qMast=  False  
      $ 273 "Aufruf UserPopups"
      UserPopups()
      $ 274 "Aufruf MachineInputPopUps"
      MachineInputPopUps()
      $ 275 "start_ping≔ True "
      global start_ping=  True  
    end
    $ 277 "Switch jobID"
    switch_1 = jobID
    $ 278 "Case 11"
    if (11 == switch_1):
      $ 279 "dest_jobID≔jobArr[1]"
      global dest_jobID=jobArr[1]
      $ 280 "src_dest_p≔qMast.get_loc()"
      global src_dest_p=qMast.get_loc()
      $ 281 "source_p≔src_dest_p[0]"
      global source_p=src_dest_p[0]
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 282 "Greifer geschlossen (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(255, 255, 255, "1")
      rq_wait_pos_spe_for_request(255, 255, 255, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 283 "FahreAchse"
      $ 284 "stn1_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_home_p_p)), qnear=stn1_home_p_q), a=3.490658503988659, v=1.0471975511965976, r=0.1)
      $ 285 "FahreAchse"
      $ 286 "stn1_help2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_help2_p_p)), qnear=stn1_help2_p_q), a=1.0471975511965976, v=0.5235987755982988, r=0.05)
      $ 287 "stn1_help_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_help_p_p)), qnear=stn1_help_p_q), a=1.0471975511965976, v=0.5235987755982988)
      $ 288 "isStn1Good≔qMast.is_stn1_good()"
      global isStn1Good=qMast.is_stn1_good()
      $ 289 "If isStn1Good ≟  True "
      if (isStn1Good  ==    True  ):
        $ 290 "FahreAchse"
        $ 291 "source_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(pose_trans(stn1_plane, source_p), a=0.8726646259971648, v=0.5235987755982988)
        $ 292 "isStn1Good≔qMast.is_stn1_good()"
        global isStn1Good=qMast.is_stn1_good()
        $ 293 "If isStn1Good ≟  True "
        if (isStn1Good  ==    True  ):
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
          #   Type: Greifer
          $ 294 "Greiferbewegung50% (1)"
          if not(gripper_connected[0]):
            popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
          end
          rq_set_pos_spd_for(128, 255, 128, "1")
          rq_wait_pos_spe_for_request(128, 255, 128, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 295 "cur_pose≔pose_trans(pose_inv(stn1_plane), get_actual_tcp_pose())"
          global cur_pose= pose_trans ( pose_inv (stn1_plane),  get_actual_tcp_pose ())
          $ 296 "stn1_pick_p≔pose_trans(cur_pose, p[0,0,stn1_pick_z/1000,0,0,0])"
          global stn1_pick_p= pose_trans (cur_pose, p[0,0,stn1_pick_z/1000,0,0,0])
          $ 297 "FahreLinear"
          $ 298 "stn1_pick_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn1_plane, stn1_pick_p), a=0.15, v=0.075)
          $ 299 "isStn1Good≔qMast.is_stn1_good()"
          global isStn1Good=qMast.is_stn1_good()
          $ 300 "If isStn1Good ≟  True "
          if (isStn1Good  ==    True  ):
            # begin: URCap Program Node
            #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
            #   Type: Greifer
            $ 301 "Greifer geschlossen (1)"
            if not(gripper_connected[0]):
              popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
            end
            if not(rq_is_gripper_activated("1")):
              popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
            end
            rq_set_pos_spd_for(255, 128, 128, "1")
            rq_wait_pos_spe_for_request(255, 128, 128, "1")
            rq_go_to("1")
            rq_wait("1")
            # end: URCap Program Node
            $ 302 "Warten: 0.2"
            sleep(0.2)
          else:
            $ 303 "Else" "noBreak"
            $ 304 "dest_jobID≔1000"
            global dest_jobID=1000
          end
          $ 305 "FahreAchse"
          $ 306 "source_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(pose_trans(stn1_plane, source_p), a=0.8726646259971648, v=0.5235987755982988)
        else:
          $ 307 "Else" "noBreak"
          $ 308 "dest_jobID≔1000"
          global dest_jobID=1000
        end
      else:
        $ 309 "Else" "noBreak"
        $ 310 "dest_jobID≔1000"
        global dest_jobID=1000
      end
      $ 311 "FahreAchse"
      $ 312 "stn1_help_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_help_p_p)), qnear=stn1_help_p_q), a=0.8726646259971648, v=0.5235987755982988, r=0.005)
      $ 313 "stn1_help2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_help2_p_p)), qnear=stn1_help2_p_q), a=0.8726646259971648, v=0.5235987755982988)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Griffkontrolle
      $ 314 "Griffkontrolle"
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Wenn
      $ 315 "Wenn Objekt nicht erkannt          " "noBreak"
      if (not rq_is_object_detected(1)):
        $ 316 "dest_jobID≔1000" "noBreak"
        global dest_jobID=1000
        # end: URCap Program Node
      end
      # end: URCap Program Node
      $ 317 "Switch dest_jobID"
      switch_2 = dest_jobID
      $ 318 "Case 41"
      if (41 == switch_2):
        $ 319 "FahreAchse"
        $ 320 "stn1_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_home_p_p)), qnear=stn1_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.05)
        $ 321 "FahreAchse"
        $ 322 "stn6_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=3.490658503988659, v=1.0471975511965976, r=0.05)
        $ 323 "stn9_dcap_apr_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_dcap_apr_p_p)), qnear=stn9_dcap_apr_p_q), a=3.490658503988659, v=1.0471975511965976)
        $ 324 "Einstellen Decap=Ein"
        set_standard_digital_out(2, True)
        $ 325 "FahreLinear"
        $ 326 "stn9_lv_tb_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_lv_tb_p_p)), a=1.2, v=0.25)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 327 "Greiferbewegung65% (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(166, 128, 0, "1")
        rq_wait_pos_spe_for_request(166, 128, 0, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 328 "Warten: 0.5"
        sleep(0.5)
        $ 329 "Einstellen Decap=Aus"
        set_standard_digital_out(2, False)
        $ 330 "FahreLinear"
        $ 331 "stn9_hold_cap_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_hold_cap_p_p)), a=1.2, v=0.25)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 332 "Greifer geschlossen (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(255, 128, 128, "1")
        rq_wait_pos_spe_for_request(255, 128, 128, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 333 "Einstellen Decap=Ein"
        set_standard_digital_out(2, True)
        $ 334 "FahreLinear"
        $ 335 "stn9_dcap_apr_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn9_dcap_apr_p_p)), a=1.2, v=0.25)
        $ 336 "Aufruf stn4_grab_loop"
        stn4_grab_loop()
        $ 337 "dest2_jobID≔qMast.stn4_get_next(stn4_tube_ok)"
        global dest2_jobID=qMast.stn4_get_next(stn4_tube_ok)
        $ 338 "src_dest_p≔qMast.get_loc()"
        global src_dest_p=qMast.get_loc()
        $ 339 "dest_p≔src_dest_p[0]"
        global dest_p=src_dest_p[0]
        $ 340 "Switch dest2_jobID"
        switch_3 = dest2_jobID
        $ 341 "Case 52"
        if (52 == switch_3):
          $ 342 "FahreAchse"
          $ 343 "stn5_stn4_hlp_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn5_stn4_hlp_p_p)), qnear=stn5_stn4_hlp_p_q), a=3.490658503988659, v=1.0471975511965976, r=0.05)
          $ 344 "FahreLinear"
          $ 345 "dest_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn5_plane, dest_p), a=1.2, v=0.5)
          $ 346 "cur_pose≔pose_trans(pose_inv(stn5_plane), get_actual_tcp_pose())"
          global cur_pose= pose_trans ( pose_inv (stn5_plane),  get_actual_tcp_pose ())
          $ 347 "stn5_place_z_p≔pose_trans(cur_pose, p[0,0,stn5_place_tb_z/1000,0,0,0])"
          global stn5_place_z_p= pose_trans (cur_pose, p[0,0,stn5_place_tb_z/1000,0,0,0])
          $ 348 "FahreLinear"
          $ 349 "stn5_place_z_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn5_plane, stn5_place_z_p), a=0.5, v=0.1)
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
          #   Type: Greifer
          $ 350 "Greiferbewegung50% (1)"
          if not(gripper_connected[0]):
            popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
          end
          rq_set_pos_spd_for(127, 255, 255, "1")
          rq_wait_pos_spe_for_request(127, 255, 255, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 351 "dest_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn5_plane, dest_p), a=1.2, v=0.25)
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
          #   Type: Greifer
          $ 352 "Greifer geschlossen (1)"
          if not(gripper_connected[0]):
            popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
          end
          rq_set_pos_spd_for(255, 255, 255, "1")
          rq_wait_pos_spe_for_request(255, 255, 255, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 353 "FahreAchse"
          $ 354 "stn5_stn4_hlp_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn5_stn4_hlp_p_p)), qnear=stn5_stn4_hlp_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.05)
          $ 355 "stn6_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
          $ 356 "Aufruf reset_jobs"
          reset_jobs()
        elif (72 == switch_3):
          $ 357 "Case 72"
          $ 358 "FahreAchse"
          $ 359 "stn6_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=3.490658503988659, v=1.0471975511965976, r=0.1)
          $ 360 "FahreAchse"
          $ 361 "stn7_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_home_p_p)), qnear=stn7_home_p_q), a=3.490658503988659, v=1.0471975511965976, r=0.1)
          $ 362 "Aufruf stn7_check_doors"
          stn7_check_doors()
          $ 363 "FahreAchse"
          $ 364 "dest_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(pose_trans(stn7_plane, dest_p), a=3.490658503988659, v=1.0471975511965976)
          $ 365 "cur_pose≔pose_trans(pose_inv(stn7_plane), get_actual_tcp_pose())"
          global cur_pose= pose_trans ( pose_inv (stn7_plane),  get_actual_tcp_pose ())
          $ 366 "stn7_place_p≔pose_trans(cur_pose, p[0,0,stn7_place_z/1000,0,0,0])"
          global stn7_place_p= pose_trans (cur_pose, p[0,0,stn7_place_z/1000,0,0,0])
          $ 367 "FahreLinear"
          $ 368 "stn7_place_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn7_plane, stn7_place_p), a=0.15, v=0.075)
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
          #   Type: Greifer
          $ 369 "Greifer offen (1)"
          if not(gripper_connected[0]):
            popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
          end
          rq_set_pos_spd_for(0, 255, 255, "1")
          rq_wait_pos_spe_for_request(0, 255, 255, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 370 "FahreLinear"
          $ 371 "dest_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn7_plane, dest_p), a=1.2, v=0.25)
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
          #   Type: Greifer
          $ 372 "Greifer geschlossen (1)"
          if not(gripper_connected[0]):
            popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
          end
          rq_set_pos_spd_for(255, 255, 255, "1")
          rq_wait_pos_spe_for_request(255, 255, 255, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 373 "FahreAchse"
          $ 374 "stn7_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_home_p_p)), qnear=stn7_home_p_q), a=3.490658503988659, v=1.0471975511965976)
          $ 375 "Aufruf reset_jobs"
          reset_jobs()
        elif (102 == switch_3):
          $ 376 "Case 102"
          $ 377 "FahreAchse"
          $ 378 "stn6_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=3.490658503988659, v=1.0471975511965976, r=0.1)
          $ 379 "stn10_hlp_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.779413821965, -.869656427631, .149271774994, -.000554336510, .003016566406, 1.568064465904], stn10_hlp_p_p)), qnear=stn10_hlp_p_q), a=3.490658503988659, v=1.0471975511965976)
          $ 380 "FahreLinear"
          $ 381 "dest_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn6_plane, dest_p), a=1.2, v=0.5)
          $ 382 "cur_pose≔pose_trans(pose_inv(stn6_plane), get_actual_tcp_pose())"
          global cur_pose= pose_trans ( pose_inv (stn6_plane),  get_actual_tcp_pose ())
          $ 384 "stn10_place_p≔pose_trans(cur_pose, p[0,0,stn10_place_z/1000,0,0,0])"
          global stn10_place_p= pose_trans (cur_pose, p[0,0,stn10_place_z/1000,0,0,0])
          $ 385 "FahreLinear"
          $ 386 "stn10_place_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn6_plane, stn10_place_p), a=1.2, v=0.05)
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
          #   Type: Greifer
          $ 387 "Greiferbewegung50% (1)"
          if not(gripper_connected[0]):
            popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
          end
          rq_set_pos_spd_for(127, 255, 0, "1")
          rq_wait_pos_spe_for_request(127, 255, 0, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 388 "dest_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn6_plane, dest_p), a=1.2, v=0.25)
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
          #   Type: Greifer
          $ 389 "Greifer geschlossen (1)"
          if not(gripper_connected[0]):
            popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
          end
          rq_set_pos_spd_for(255, 255, 255, "1")
          rq_wait_pos_spe_for_request(255, 255, 255, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 390 "FahreAchse"
          $ 391 "stn10_hlp_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.779413821965, -.869656427631, .149271774994, -.000554336510, .003016566406, 1.568064465904], stn10_hlp_p_p)), qnear=stn10_hlp_p_q), a=3.490658503988659, v=1.0471975511965976, r=0.05)
          $ 392 "stn6_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=3.490658503988659, v=1.0471975511965976)
          $ 393 "Aufruf reset_jobs"
          reset_jobs()
        elif (152 == switch_3):
          $ 394 "Case 152"
          $ 395 "FahreAchse"
          $ 396 "stn11_hlp_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_hlp_p_p)), qnear=stn11_hlp_p_q), a=2.0943951023931953, v=1.0471975511965976, r=0.05)
          $ 397 "stn15_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn15_home_p_p)), qnear=stn15_home_p_q), a=2.0943951023931953, v=1.0471975511965976, r=0.01)
          $ 398 "dest_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(pose_trans(stn6_plane, dest_p), a=2.0943951023931953, v=1.0471975511965976)
          $ 399 "cur_pose≔pose_trans(pose_inv(stn6_plane), get_actual_tcp_pose())"
          global cur_pose= pose_trans ( pose_inv (stn6_plane),  get_actual_tcp_pose ())
          $ 400 "stn15_place_z_p≔pose_trans(cur_pose, p[0,0,stn15_place_z/1000,0,0,0])"
          global stn15_place_z_p= pose_trans (cur_pose, p[0,0,stn15_place_z/1000,0,0,0])
          $ 401 "FahreLinear"
          $ 402 "stn15_place_z_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn6_plane, stn15_place_z_p), a=0.5, v=0.1)
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
          #   Type: Greifer
          $ 403 "Greiferbewegung50% (1)"
          if not(gripper_connected[0]):
            popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
          end
          rq_set_pos_spd_for(128, 255, 255, "1")
          rq_wait_pos_spe_for_request(128, 255, 255, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 404 "dest_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn6_plane, dest_p), a=0.5, v=0.1)
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
          #   Type: Greifer
          $ 405 "Greifer geschlossen (1)"
          if not(gripper_connected[0]):
            popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
          end
          rq_set_pos_spd_for(255, 255, 255, "1")
          rq_wait_pos_spe_for_request(255, 255, 255, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 406 "FahreAchse"
          $ 407 "stn15_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn15_home_p_p)), qnear=stn15_home_p_q), a=2.0943951023931953, v=1.0471975511965976, r=0.05)
          $ 408 "FahreAchse"
          $ 409 "stn1_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_home_p_p)), qnear=stn1_home_p_q), a=2.0943951023931953, v=1.0471975511965976)
          $ 410 "Aufruf reset_jobs"
          reset_jobs()
        end
      elif (1000 == switch_2):
        $ 411 "Case 1000"
        $ 412 "FahreAchse"
        $ 413 "stn1_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_home_p_p)), qnear=stn1_home_p_q), a=3.490658503988659, v=1.0471975511965976)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 414 "Greifer geschlossen (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(255, 128, 128, "1")
        rq_wait_pos_spe_for_request(255, 128, 128, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 415 "Aufruf reset_jobs"
        reset_jobs()
      end
    elif (21 == switch_1):
      $ 416 "Case 21"
      $ 417 "dest_jobID≔jobArr[1]"
      global dest_jobID=jobArr[1]
      $ 418 "src_dest_p≔qMast.get_loc()"
      global src_dest_p=qMast.get_loc()
      $ 419 "source_p≔src_dest_p[0]"
      global source_p=src_dest_p[0]
      $ 420 "Switch dest_jobID"
      switch_2 = dest_jobID
      $ 421 "Case 142"
      if (142 == switch_2):
        $ 422 "FahreAchse"
        $ 423 "stn2_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_home_p_p)), qnear=stn2_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 424 "source_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(pose_trans(stn2_plane, source_p), a=1.3962634015954636, v=1.0471975511965976)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 425 "Greiferbewegung35% (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(89, 255, 255, "1")
        rq_wait_pos_spe_for_request(89, 255, 255, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 426 "cur_pose≔pose_trans(pose_inv(stn2_plane), get_actual_tcp_pose())"
        global cur_pose= pose_trans ( pose_inv (stn2_plane),  get_actual_tcp_pose ())
        $ 427 "stn2_pick_z_p≔pose_trans(cur_pose, p[0,0,stn2_pk_rk_z/1000,0,0,0])"
        global stn2_pick_z_p= pose_trans (cur_pose, p[0,0,stn2_pk_rk_z/1000,0,0,0])
        $ 428 "FahreLinear"
        $ 429 "stn2_pick_z_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn2_plane, stn2_pick_z_p), a=0.5, v=0.1)
        $ 430 "cur_pose≔pose_trans(pose_inv(stn2_plane), get_actual_tcp_pose())"
        global cur_pose= pose_trans ( pose_inv (stn2_plane),  get_actual_tcp_pose ())
        $ 431 "stn2_rk_chk_y_p≔pose_trans(cur_pose, p[0,stn2_rk_chk_y/1000,0,0,0,0])"
        global stn2_rk_chk_y_p= pose_trans (cur_pose, p[0,stn2_rk_chk_y/1000,0,0,0,0])
        $ 432 "FahreLinear"
        $ 433 "stn2_rk_chk_y_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn2_plane, stn2_rk_chk_y_p), a=0.5, v=0.1)
        $ 434 "stn14_angle≔0"
        global stn14_angle=0
        $ 435 "stn2_rack_yes≔ False "
        global stn2_rack_yes=  False  
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 436 "Greifer geschlossen (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(255, 0, 0, "1")
        rq_wait_pos_spe_for_request(255, 0, 0, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 437 "gripper_pos≔rq_current_pos_norm()"
        global gripper_pos=rq_current_pos_norm()
        $ 438 "If gripper_pos ≤ 65 and gripper_pos ≥ 57"
        if (gripper_pos  <=  65  and  gripper_pos  >=  57):
          $ 439 "stn2_rack_yes≔ True "
          global stn2_rack_yes=  True  
          $ 440 "stn14_angle≔180"
          global stn14_angle=180
        else:
          $ 441 "ElseIf gripper_pos > 65  and gripper_pos ≤ 90"
          if (gripper_pos > 65   and  gripper_pos  <=  90):
            $ 442 "stn2_rack_yes≔ True "
            global stn2_rack_yes=  True  
          else:
            $ 443 "Else" "noBreak"
            $ 444 "stn2_rack_yes≔ False "
            global stn2_rack_yes=  False  
          end
        end
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 445 "Greiferbewegung35% (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(89, 255, 255, "1")
        rq_wait_pos_spe_for_request(89, 255, 255, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 446 "FahreLinear"
        $ 447 "stn2_pick_z_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn2_plane, stn2_pick_z_p), a=1.2, v=0.25)
        $ 448 "If stn2_rack_yes ≟  True "
        if (stn2_rack_yes  ==    True  ):
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
          #   Type: Greifer
          $ 449 "Greifer geschlossen (1)"
          if not(gripper_connected[0]):
            popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
          end
          rq_set_pos_spd_for(255, 128, 255, "1")
          rq_wait_pos_spe_for_request(255, 128, 255, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 450 "FahreLinear"
          $ 451 "source_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn2_plane, source_p), a=0.5, v=0.1)
          $ 452 "FahreAchse"
          $ 453 "stn2_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_home_p_p)), qnear=stn2_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
          $ 454 "FahreAchse"
          $ 455 "stn6_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.1)
          $ 456 "stn14_pl_rk_h_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_pl_rk_h_p_p)), qnear=stn14_pl_rk_h_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.05)
          $ 457 "stn14_pl_rk_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_pl_rk_p_p)), qnear=stn14_pl_rk_p_q), a=1.3962634015954636, v=1.0471975511965976)
          $ 458 "If stn14_angle ≟ 180"
          if (stn14_angle  ==  180):
            $ 459 "FahreAchse"
            $ 460 "stn14_plrk_rt_p" "breakAfter"
            set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
            movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_plrk_rt_p_p)), qnear=stn14_plrk_rt_p_q), a=13.962634015954636, v=3.141592653589793)
            $ 461 "FahreLinear"
            $ 462 "cur_pose≔pose_trans(pose_inv(stn6_plane), get_actual_tcp_pose())"
            global cur_pose= pose_trans ( pose_inv (stn6_plane),  get_actual_tcp_pose ())
            $ 463 "stn14_pl_rk_z_p≔pose_trans(cur_pose, p[0,0,stn14_pl_rk_z/1000,0,0,0])"
            global stn14_pl_rk_z_p= pose_trans (cur_pose, p[0,0,stn14_pl_rk_z/1000,0,0,0])
            $ 464 "stn14_pl_rk_z_p" "breakAfter"
            set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
            movel(pose_trans(stn6_plane, stn14_pl_rk_z_p), a=0.5, v=0.05)
            # begin: URCap Program Node
            #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
            #   Type: Greifer
            $ 465 "Greiferbewegung35% (1)"
            if not(gripper_connected[0]):
              popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
            end
            if not(rq_is_gripper_activated("1")):
              popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
            end
            rq_set_pos_spd_for(89, 255, 255, "1")
            rq_wait_pos_spe_for_request(89, 255, 255, "1")
            rq_go_to("1")
            rq_wait("1")
            # end: URCap Program Node
            $ 466 "stn14_plrk_rt_p" "breakAfter"
            set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
            movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_plrk_rt_p_p)), a=0.6, v=0.1)
            # begin: URCap Program Node
            #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
            #   Type: Greifer
            $ 467 "Greifer geschlossen (1)"
            if not(gripper_connected[0]):
              popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
            end
            if not(rq_is_gripper_activated("1")):
              popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
            end
            rq_set_pos_spd_for(255, 255, 255, "1")
            rq_wait_pos_spe_for_request(255, 255, 255, "1")
            rq_go_to("1")
            rq_wait("1")
            # end: URCap Program Node
          else:
            $ 468 "Else" "noBreak"
            $ 469 "FahreLinear"
            $ 470 "cur_pose≔pose_trans(pose_inv(stn6_plane), get_actual_tcp_pose())"
            global cur_pose= pose_trans ( pose_inv (stn6_plane),  get_actual_tcp_pose ())
            $ 471 "stn14_pl_rk_z_p≔pose_trans(cur_pose, p[0,0,stn14_pl_rk_z/1000,0,0,0])"
            global stn14_pl_rk_z_p= pose_trans (cur_pose, p[0,0,stn14_pl_rk_z/1000,0,0,0])
            $ 472 "stn14_pl_rk_z_p" "breakAfter"
            set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
            movel(pose_trans(stn6_plane, stn14_pl_rk_z_p), a=0.5, v=0.05)
            # begin: URCap Program Node
            #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
            #   Type: Greifer
            $ 473 "Greiferbewegung35% (1)"
            if not(gripper_connected[0]):
              popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
            end
            if not(rq_is_gripper_activated("1")):
              popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
            end
            rq_set_pos_spd_for(89, 255, 255, "1")
            rq_wait_pos_spe_for_request(89, 255, 255, "1")
            rq_go_to("1")
            rq_wait("1")
            # end: URCap Program Node
            $ 474 "stn14_pl_rk_p" "breakAfter"
            set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
            movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_pl_rk_p_p)), a=0.5, v=0.1)
            # begin: URCap Program Node
            #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
            #   Type: Greifer
            $ 475 "Greifer geschlossen (1)"
            if not(gripper_connected[0]):
              popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
            end
            if not(rq_is_gripper_activated("1")):
              popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
            end
            rq_set_pos_spd_for(255, 255, 255, "1")
            rq_wait_pos_spe_for_request(255, 255, 255, "1")
            rq_go_to("1")
            rq_wait("1")
            # end: URCap Program Node
          end
          $ 476 "FahreAchse"
          $ 477 "stn6_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
          $ 478 "qMast.stn14_fill_holder()"
          qMast.stn14_fill_holder()
        else:
          $ 479 "Else" "noBreak"
          $ 480 "FahreLinear"
          $ 481 "source_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn2_plane, source_p), a=1.2, v=0.25)
          $ 482 "FahreAchse"
          $ 483 "stn2_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_home_p_p)), qnear=stn2_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
        end
        $ 484 "Aufruf reset_jobs"
        reset_jobs()
      end
    elif (23 == switch_1):
      $ 485 "Case 23"
      $ 486 "Aufruf stn2_door1_close"
      stn2_door1_close()
      $ 487 "Aufruf stn2_door1_open"
      stn2_door1_open()
      $ 488 "Aufruf reset_jobs"
      reset_jobs()
    elif (24 == switch_1):
      $ 489 "Case 24"
      $ 490 "Aufruf stn2_door1_close"
      stn2_door1_close()
      $ 491 "FahreAchse"
      $ 492 "stn2_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_home_p_p)), qnear=stn2_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 493 "Aufruf reset_jobs"
      reset_jobs()
    elif (25 == switch_1):
      $ 494 "Case 25"
      $ 495 "Aufruf stn2_door2_close"
      stn2_door2_close()
      $ 496 "Aufruf stn2_door2_open"
      stn2_door2_open()
      $ 497 "Aufruf reset_jobs"
      reset_jobs()
    elif (26 == switch_1):
      $ 498 "Case 26"
      $ 499 "Aufruf stn2_door2_close"
      stn2_door2_close()
      $ 500 "FahreAchse"
      $ 501 "stn2_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_home_p_p)), qnear=stn2_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 502 "Aufruf reset_jobs"
      reset_jobs()
    elif (27 == switch_1):
      $ 503 "Case 27"
      $ 504 "Aufruf stn2_door3_close"
      stn2_door3_close()
      $ 505 "Aufruf stn2_door3_open"
      stn2_door3_open()
      $ 506 "Aufruf reset_jobs"
      reset_jobs()
    elif (28 == switch_1):
      $ 507 "Case 28"
      $ 508 "Aufruf stn2_door3_close"
      stn2_door3_close()
      $ 509 "FahreAchse"
      $ 510 "stn2_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_home_p_p)), qnear=stn2_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 511 "Aufruf reset_jobs"
      reset_jobs()
    elif (29 == switch_1):
      $ 512 "Case 29"
      $ 513 "FahreAchse"
      $ 514 "stn2_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn2_plane, pose_trans(p[.137500819741, -.686313800478, .149495066037, -.008721928164, .022313263547, 3.131433712319], stn2_home_p_p)), qnear=stn2_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 515 "FahreAchse"
      $ 516 "stn1_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_home_p_p)), qnear=stn1_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 517 "home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], home_p_p)), qnear=home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 518 "Meldung: Alle Cobas Racks benutzen"
      popup("Alle Cobas Racks benutzen", "Fehler", False, True, blocking=False)
      halt
      $ 519 "Aufruf reset_jobs"
      reset_jobs()
    elif (30 == switch_1):
      $ 520 "Case 30"
      $ 521 "If Test ≟  True "
      if (Test  ==    True  ):
        $ 522 "qMast.set_init_alarm(3)"
        qMast.set_init_alarm(3)
      else:
        $ 523 "Else" "noBreak"
        $ 524 "Aufruf stn3_init_stndby"
        stn3_init_stndby()
        $ 525 "qMast.set_init_alarm(3)"
        qMast.set_init_alarm(3)
        $ 526 "FahreAchse"
        $ 527 "stn3_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_home_p_p)), qnear=stn3_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      end
      $ 528 "Aufruf reset_jobs"
      reset_jobs()
    elif (31 == switch_1):
      $ 529 "Case 31"
      $ 530 "dest_jobID≔jobArr[1]"
      global dest_jobID=jobArr[1]
      $ 531 "src_dest_p≔qMast.get_loc()"
      global src_dest_p=qMast.get_loc()
      $ 532 "source_p≔src_dest_p[0]"
      global source_p=src_dest_p[0]
      $ 533 "FahreAchse"
      $ 534 "stn3_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_home_p_p)), qnear=stn3_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.1)
      $ 535 "stn3_top_hlp_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_top_hlp_p_p)), qnear=stn3_top_hlp_p_q), a=2.792526803190927, v=1.7453292519943295, r=0.02)
      $ 536 "source_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(pose_trans(stn3_plane, source_p), a=1.3962634015954636, v=1.0471975511965976)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 537 "Greiferbewegung50% (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(128, 128, 128, "1")
      rq_wait_pos_spe_for_request(128, 128, 128, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 538 "cur_pose≔pose_trans(pose_inv(stn3_plane), get_actual_tcp_pose())"
      global cur_pose= pose_trans ( pose_inv (stn3_plane),  get_actual_tcp_pose ())
      $ 539 "stn3_pick_p≔pose_trans(cur_pose, p[0,0,stn3_pick_z/1000,0,0,0])"
      global stn3_pick_p= pose_trans (cur_pose, p[0,0,stn3_pick_z/1000,0,0,0])
      $ 540 "FahreLinear"
      $ 541 "stn3_pick_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn3_plane, stn3_pick_p), a=0.2, v=0.05)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 542 "Greifer geschlossen (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(255, 128, 128, "1")
      rq_wait_pos_spe_for_request(255, 128, 128, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 543 "source_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn3_plane, source_p), a=0.2, v=0.05)
      $ 544 "dest_p≔src_dest_p[1]"
      global dest_p=src_dest_p[1]
      $ 545 "FahreAchse"
      $ 546 "stn3_top_hlp_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_top_hlp_p_p)), qnear=stn3_top_hlp_p_q), a=1.7453292519943295, v=1.3962634015954636, r=0.02)
      $ 547 "stn3_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_home_p_p)), qnear=stn3_home_p_q), a=2.792526803190927, v=1.7453292519943295, r=0.05)
      $ 548 "FahreAchse"
      $ 549 "stn11_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_home_p_p)), qnear=stn11_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.05)
      $ 550 "stn11_hlp_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_hlp_p_p)), qnear=stn11_hlp_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.05)
      $ 551 "dest_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(pose_trans(stn6_plane, dest_p), a=1.3962634015954636, v=1.0471975511965976)
      $ 552 "cur_pose≔pose_trans(pose_inv(stn6_plane), get_actual_tcp_pose())"
      global cur_pose= pose_trans ( pose_inv (stn6_plane),  get_actual_tcp_pose ())
      $ 554 "stn11_place_p≔pose_trans(cur_pose, p[0,0,stn11_place_z/1000,0,0,0])"
      global stn11_place_p= pose_trans (cur_pose, p[0,0,stn11_place_z/1000,0,0,0])
      $ 555 "FahreLinear"
      $ 556 "stn11_place_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn6_plane, stn11_place_p), a=0.2, v=0.05)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 557 "Greiferbewegung50% (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(128, 128, 0, "1")
      rq_wait_pos_spe_for_request(128, 128, 0, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 558 "FahreLinear"
      $ 559 "dest_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn6_plane, dest_p), a=1.2, v=0.25)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 560 "Greifer geschlossen (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(255, 255, 255, "1")
      rq_wait_pos_spe_for_request(255, 255, 255, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 561 "FahreAchse"
      $ 562 "stn11_hlp_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_hlp_p_p)), qnear=stn11_hlp_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.05)
      $ 563 "stn11_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn11_home_p_p)), qnear=stn11_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.05)
      $ 564 "FahreAchse"
      $ 565 "stn3_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_home_p_p)), qnear=stn3_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 566 "Aufruf reset_jobs"
      reset_jobs()
    elif (33 == switch_1):
      $ 567 "Case 33"
      $ 568 "Aufruf stn3_press_run"
      stn3_press_run()
      $ 574 "qMast.set_runtime_alarm(3)"
      qMast.set_runtime_alarm(3)
      $ 575 "FahreAchse"
      $ 576 "stn3_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_home_p_p)), qnear=stn3_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 577 "FahreAchse"
      $ 578 "stn3_pen_pk_u_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn3_pen_pk_u_p_p)), qnear=stn3_pen_pk_u_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 579 "FahreLinear"
      $ 580 "stn3_pen_pk_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn3_pen_pk_p_p)), a=1.2, v=0.25)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 581 "Greiferbewegung50% (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(128, 255, 128, "1")
      rq_wait_pos_spe_for_request(128, 255, 128, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 582 "stn3_pen_pk_u_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn3_pen_pk_u_p_p)), a=1.2, v=0.25)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 583 "Greifer geschlossen (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(255, 255, 128, "1")
      rq_wait_pos_spe_for_request(255, 255, 128, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 584 "FahreAchse"
      $ 585 "stn3_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_home_p_p)), qnear=stn3_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 586 "Aufruf reset_jobs"
      reset_jobs()
    elif (34 == switch_1):
      $ 587 "Case 34"
      $ 588 "Aufruf stn3_press_run"
      stn3_press_run()
      $ 589 "FahreAchse"
      $ 590 "stn3_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_home_p_p)), qnear=stn3_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 591 "FahreAchse"
      $ 592 "stn3_pen_pk_u_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn3_pen_pk_u_p_p)), qnear=stn3_pen_pk_u_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 593 "FahreLinear"
      $ 594 "stn3_pen_pk_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn3_pen_pk_p_p)), a=1.2, v=0.25)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 595 "Greiferbewegung50% (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(128, 255, 128, "1")
      rq_wait_pos_spe_for_request(128, 255, 128, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 596 "stn3_pen_pk_u_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn3_pen_pk_u_p_p)), a=1.2, v=0.25)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 597 "Greifer geschlossen (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(255, 255, 128, "1")
      rq_wait_pos_spe_for_request(255, 255, 128, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 598 "FahreAchse"
      $ 599 "stn3_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_home_p_p)), qnear=stn3_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 600 "Aufruf reset_jobs"
      reset_jobs()
    elif (35 == switch_1):
      $ 601 "Case 35"
      $ 602 "If Test ≟  True "
      if (Test  ==    True  ):
        $ 603 "qMast.set_init_alarm(3)"
        qMast.set_init_alarm(3)
      else:
        $ 604 "Else" "noBreak"
        $ 605 "Aufruf stn3_init_stndby"
        stn3_init_stndby()
        $ 606 "qMast.set_init_alarm(3)"
        qMast.set_init_alarm(3)
        $ 607 "FahreAchse"
        $ 608 "stn3_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_home_p_p)), qnear=stn3_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      end
      $ 609 "Aufruf reset_jobs"
      reset_jobs()
    elif (51 == switch_1):
      $ 610 "Case 51"
      $ 611 "dest_jobID≔jobArr[1]"
      global dest_jobID=jobArr[1]
      $ 612 "FahreAchse"
      $ 613 "stn6_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=2.0943951023931953, v=1.3962634015954636)
      $ 614 "Switch dest_jobID"
      switch_2 = dest_jobID
      $ 615 "Case 41"
      if (41 == switch_2):
        $ 616 "src_dest_p≔qMast.get_loc()"
        global src_dest_p=qMast.get_loc()
        $ 617 "source_p≔src_dest_p[0]"
        global source_p=src_dest_p[0]
        $ 618 "FahreAchse"
        $ 619 "source_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(pose_trans(stn5_plane, source_p), a=1.3962634015954636, v=1.0471975511965976)
        $ 620 "FahreLinear"
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 621 "Greiferbewegung50% (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(128, 255, 255, "1")
        rq_wait_pos_spe_for_request(128, 255, 255, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 622 "cur_pose≔pose_trans(pose_inv(stn5_plane), get_actual_tcp_pose())"
        global cur_pose= pose_trans ( pose_inv (stn5_plane),  get_actual_tcp_pose ())
        $ 624 "stn5_pick_z_p≔pose_trans(cur_pose, p[0,0,stn5_pick_tb_z/1000,0,0,0])"
        global stn5_pick_z_p= pose_trans (cur_pose, p[0,0,stn5_pick_tb_z/1000,0,0,0])
        $ 625 "stn5_pick_z_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, stn5_pick_z_p), a=0.25, v=0.1)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 626 "Greifer geschlossen (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(255, 128, 128, "1")
        rq_wait_pos_spe_for_request(255, 128, 128, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 627 "source_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, source_p), a=0.25, v=0.1, r=0.02)
        $ 628 "FahreAchse"
        $ 629 "stn5_stn4_hlp_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn5_stn4_hlp_p_p)), qnear=stn5_stn4_hlp_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.05)
        $ 630 "Aufruf stn9_decap"
        stn9_decap()
        $ 631 "Aufruf stn4_grab_loop_after"
        stn4_grab_loop_after()
        $ 634 "dest2_jobID≔qMast.stn4_get_next_after(stn4_tube_ok)"
        global dest2_jobID=qMast.stn4_get_next_after(stn4_tube_ok)
        $ 635 "src_dest_p≔qMast.get_loc()"
        global src_dest_p=qMast.get_loc()
        $ 636 "dest_p≔src_dest_p[0]"
        global dest_p=src_dest_p[0]
        $ 637 "Switch dest2_jobID"
        switch_3 = dest2_jobID
        $ 638 "Case 32"
        if (32 == switch_3):
          $ 639 "FahreAchse"
          $ 640 "stn3_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_home_p_p)), qnear=stn3_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.1)
          $ 641 "stn3_top_hlp_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_top_hlp_p_p)), qnear=stn3_top_hlp_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.02)
          $ 642 "dest_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(pose_trans(stn3_plane, dest_p), a=1.3962634015954636, v=1.0471975511965976)
          $ 643 "FahreLinear"
          $ 644 "cur_pose≔pose_trans(pose_inv(stn3_plane), get_actual_tcp_pose())"
          global cur_pose= pose_trans ( pose_inv (stn3_plane),  get_actual_tcp_pose ())
          $ 645 "stn3_rot_set_p≔pose_trans(cur_pose,p[0,0,stn3_rot_z/1000,0,0,0])"
          global stn3_rot_set_p= pose_trans (cur_pose,p[0,0,stn3_rot_z/1000,0,0,0])
          $ 646 "stn3_rot_set_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn3_plane, stn3_rot_set_p), a=0.1, v=0.05)
          $ 647 "FahreLinear"
          $ 648 "stn3_rot_angle≔stn4_tube_angle"
          global stn3_rot_angle=stn4_tube_angle
          $ 649 "cur_pose≔pose_trans(pose_inv(stn3_plane), get_actual_tcp_pose())"
          global cur_pose= pose_trans ( pose_inv (stn3_plane),  get_actual_tcp_pose ())
          $ 650 "stn3_rot_p≔pose_trans(cur_pose, p[0,0,0,0,0,d2r(stn3_rot_angle)])"
          global stn3_rot_p= pose_trans (cur_pose, p[0,0,0,0,0,d2r(stn3_rot_angle)])
          $ 651 "stn3_rot_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn3_plane, stn3_rot_p), a=0.6, v=0.15)
          $ 652 "FahreLinear"
          $ 653 "cur_pose≔pose_trans(pose_inv(stn3_plane), get_actual_tcp_pose())"
          global cur_pose= pose_trans ( pose_inv (stn3_plane),  get_actual_tcp_pose ())
          $ 654 "stn3_place_z_p≔pose_trans(cur_pose,p[0,0,stn3_place_z/1000,0,0,0])"
          global stn3_place_z_p= pose_trans (cur_pose,p[0,0,stn3_place_z/1000,0,0,0])
          $ 655 "stn3_place_z_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn3_plane, stn3_place_z_p), a=0.2, v=0.05)
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
          #   Type: Greifer
          $ 656 "Greiferbewegung50% (1)"
          if not(gripper_connected[0]):
            popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
          end
          rq_set_pos_spd_for(128, 64, 255, "1")
          rq_wait_pos_spe_for_request(128, 64, 255, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 657 "FahreLinear"
          $ 658 "cur_pose≔pose_trans(pose_inv(stn3_plane), get_actual_tcp_pose())"
          global cur_pose= pose_trans ( pose_inv (stn3_plane),  get_actual_tcp_pose ())
          $ 659 "stn3_place_z_p≔pose_trans(cur_pose,p[0,0,-stn3_place_z/1000,0,0,0])"
          global stn3_place_z_p= pose_trans (cur_pose,p[0,0,-stn3_place_z/1000,0,0,0])
          $ 660 "stn3_place_z_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn3_plane, stn3_place_z_p), a=0.2, v=0.05)
          $ 663 "FahreAchse"
          $ 664 "stn3_top_hlp_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_top_hlp_p_p)), qnear=stn3_top_hlp_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.02)
          $ 665 "stn3_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn3_plane, pose_trans(p[.103513391500, -.760903866624, .250613495596, .000363058783, .000522680433, -.002816727210], stn3_home_p_p)), qnear=stn3_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
          #   Type: Greifer
          $ 666 "Greifer geschlossen (1)"
          if not(gripper_connected[0]):
            popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
          end
          rq_set_pos_spd_for(255, 255, 0, "1")
          rq_wait_pos_spe_for_request(255, 255, 0, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 667 "Aufruf reset_jobs"
          reset_jobs()
        elif (102 == switch_3):
          $ 668 "Case 102"
          $ 669 "FahreAchse"
          $ 670 "stn10_hlp_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.779413821965, -.869656427631, .149271774994, -.000554336510, .003016566406, 1.568064465904], stn10_hlp_p_p)), qnear=stn10_hlp_p_q), a=1.3962634015954636, v=1.0471975511965976)
          $ 671 "FahreLinear"
          $ 672 "dest_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn6_plane, dest_p), a=1.2, v=0.25)
          $ 673 "cur_pose≔pose_trans(pose_inv(stn6_plane), get_actual_tcp_pose())"
          global cur_pose= pose_trans ( pose_inv (stn6_plane),  get_actual_tcp_pose ())
          $ 674 "stn10_place_p≔pose_trans(cur_pose, p[0,0,stn10_place_z/1000,0,0,0])"
          global stn10_place_p= pose_trans (cur_pose, p[0,0,stn10_place_z/1000,0,0,0])
          $ 675 "FahreLinear"
          $ 676 "stn10_place_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn6_plane, stn10_place_p), a=0.2, v=0.075)
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
          #   Type: Greifer
          $ 677 "Greiferbewegung50% (1)"
          if not(gripper_connected[0]):
            popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
          end
          rq_set_pos_spd_for(128, 255, 0, "1")
          rq_wait_pos_spe_for_request(128, 255, 0, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 678 "dest_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn6_plane, dest_p), a=1.2, v=0.25)
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
          #   Type: Greifer
          $ 679 "Greifer geschlossen (1)"
          if not(gripper_connected[0]):
            popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
          end
          rq_set_pos_spd_for(255, 255, 255, "1")
          rq_wait_pos_spe_for_request(255, 255, 255, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 680 "FahreAchse"
          $ 681 "stn10_hlp_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.779413821965, -.869656427631, .149271774994, -.000554336510, .003016566406, 1.568064465904], stn10_hlp_p_p)), qnear=stn10_hlp_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.1)
          $ 682 "stn6_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
          $ 683 "Aufruf reset_jobs"
          reset_jobs()
        elif (143 == switch_3):
          $ 684 "Case 143"
          $ 685 "FahreAchse"
          $ 686 "dest_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(pose_trans(stn6_plane, dest_p), a=1.3962634015954636, v=1.0471975511965976)
          $ 687 "FahreLinear"
          $ 688 "cur_pose≔pose_trans(pose_inv(stn6_plane), get_actual_tcp_pose())"
          global cur_pose= pose_trans ( pose_inv (stn6_plane),  get_actual_tcp_pose ())
          $ 689 "stn14_set_rot_p≔pose_trans(cur_pose, p[0,0,stn14_tb_rot_z/1000,0,0,0])"
          global stn14_set_rot_p= pose_trans (cur_pose, p[0,0,stn14_tb_rot_z/1000,0,0,0])
          $ 690 "stn14_set_rot_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn6_plane, stn14_set_rot_p), a=0.2, v=0.075)
          $ 691 "cur_pose≔pose_trans(pose_inv(stn6_plane), get_actual_tcp_pose())"
          global cur_pose= pose_trans ( pose_inv (stn6_plane),  get_actual_tcp_pose ())
          $ 692 "stn14_rot_p≔pose_trans(cur_pose, p[0,0,0,0,0,d2r(stn4_tube_angle)])"
          global stn14_rot_p= pose_trans (cur_pose, p[0,0,0,0,0,d2r(stn4_tube_angle)])
          $ 693 "stn14_rot_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn6_plane, stn14_rot_p), a=0.5, v=0.1)
          $ 694 "cur_pose≔pose_trans(pose_inv(stn6_plane), get_actual_tcp_pose())"
          global cur_pose= pose_trans ( pose_inv (stn6_plane),  get_actual_tcp_pose ())
          $ 695 "stn14_plac_tb_p≔pose_trans(cur_pose, p[0,0,stn14_tb_pl_z/1000,0,0,0])"
          global stn14_plac_tb_p= pose_trans (cur_pose, p[0,0,stn14_tb_pl_z/1000,0,0,0])
          $ 696 "stn14_plac_tb_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn6_plane, stn14_plac_tb_p), a=0.4, v=0.1)
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
          #   Type: Greifer
          $ 697 "Greiferbewegung70% (1)"
          if not(gripper_connected[0]):
            popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
          end
          rq_set_pos_spd_for(179, 64, 255, "1")
          rq_wait_pos_spe_for_request(179, 64, 255, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 698 "cur_pose≔pose_trans(pose_inv(stn6_plane), get_actual_tcp_pose())"
          global cur_pose= pose_trans ( pose_inv (stn6_plane),  get_actual_tcp_pose ())
          $ 699 "stn14_plac_tb_p≔pose_trans(cur_pose, p[0,0,-50/1000,0,0,0])"
          global stn14_plac_tb_p= pose_trans (cur_pose, p[0,0,-50/1000,0,0,0])
          $ 700 "stn14_plac_tb_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movel(pose_trans(stn6_plane, stn14_plac_tb_p), a=0.4, v=0.1)
          $ 701 "FahreAchse"
          $ 702 "stn14_rot_hlp_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_rot_hlp_p_p)), qnear=stn14_rot_hlp_p_q), a=2.0943951023931953, v=1.3962634015954636, r=0.05)
          $ 703 "stn6_home_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=2.0943951023931953, v=1.3962634015954636)
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
          #   Type: Greifer
          $ 704 "Greifer geschlossen (1)"
          if not(gripper_connected[0]):
            popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
          end
          rq_set_pos_spd_for(255, 255, 255, "1")
          rq_wait_pos_spe_for_request(255, 255, 255, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 705 "Aufruf reset_jobs"
          reset_jobs()
        end
      elif (55 == switch_2):
        $ 706 "Case 55"
        $ 707 "src_dest_p≔qMast.get_loc()"
        global src_dest_p=qMast.get_loc()
        $ 708 "source_p≔src_dest_p[0]"
        global source_p=src_dest_p[0]
        $ 709 "dest_p≔src_dest_p[1]"
        global dest_p=src_dest_p[1]
        $ 710 "FahreAchse"
        $ 711 "stn5_stn4_hlp_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn5_stn4_hlp_p_p)), qnear=stn5_stn4_hlp_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.05)
        $ 712 "FahreAchse"
        $ 713 "source_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(pose_trans(stn5_plane, source_p), a=1.3962634015954636, v=1.0471975511965976)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 714 "Greiferbewegung50% (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(127, 255, 255, "1")
        rq_wait_pos_spe_for_request(127, 255, 255, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 715 "cur_pose≔pose_trans(pose_inv(stn5_plane), get_actual_tcp_pose())"
        global cur_pose= pose_trans ( pose_inv (stn5_plane),  get_actual_tcp_pose ())
        $ 716 "stn5_cw_pick_p≔pose_trans(cur_pose, p[0,0,stn5_pick_tb_z/1000,0,0,0])"
        global stn5_cw_pick_p= pose_trans (cur_pose, p[0,0,stn5_pick_tb_z/1000,0,0,0])
        $ 717 "FahreLinear"
        $ 718 "stn5_cw_pick_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, stn5_cw_pick_p), a=0.3, v=0.1)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 719 "Greifer geschlossen (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(255, 128, 128, "1")
        rq_wait_pos_spe_for_request(255, 128, 128, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 720 "source_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, source_p), a=0.3, v=0.1)
        $ 721 "FahreAchse"
        $ 722 "stn5_stn4_hlp_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn5_stn4_hlp_p_p)), qnear=stn5_stn4_hlp_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.05)
        $ 723 "FahreAchse"
        $ 724 "dest_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(pose_trans(stn5_plane, dest_p), a=1.3962634015954636, v=1.0471975511965976)
        $ 725 "cur_pose≔pose_trans(pose_inv(stn5_plane), get_actual_tcp_pose())"
        global cur_pose= pose_trans ( pose_inv (stn5_plane),  get_actual_tcp_pose ())
        $ 726 "stn5_cw_place_p≔pose_trans(cur_pose, p[0,0,stn5_place_cw_z/1000,0,0,0])"
        global stn5_cw_place_p= pose_trans (cur_pose, p[0,0,stn5_place_cw_z/1000,0,0,0])
        $ 727 "FahreLinear"
        $ 728 "stn5_cw_place_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, stn5_cw_place_p), a=0.3, v=0.1)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 729 "Greiferbewegung60% (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(153, 255, 0, "1")
        rq_wait_pos_spe_for_request(153, 255, 0, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 730 "dest_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, dest_p), a=0.3, v=0.1)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 731 "Greifer geschlossen (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(255, 255, 0, "1")
        rq_wait_pos_spe_for_request(255, 255, 0, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 732 "FahreAchse"
        $ 733 "stn6_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 734 "Aufruf reset_jobs"
        reset_jobs()
      elif (62 == switch_2):
        $ 735 "Case 62"
        $ 736 "stn5_dest_4ps_p≔qMast.stn5_get_loc()"
        global stn5_dest_4ps_p=qMast.stn5_get_loc()
        $ 737 "FahreAchse"
        $ 738 "stn6_help_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_help_p_p)), qnear=stn6_help_p_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 739 "If Test ≟  True "
        if (Test  ==    True  ):
          $ 740 "qMast.set_runtime_alarm(6)"
          qMast.set_runtime_alarm(6)
        else:
          $ 741 "Else" "noBreak"
          $ 742 "stn6_hatch_open≔qMast.stn6_hatch_open()"
          global stn6_hatch_open=qMast.stn6_hatch_open()
          $ 743 "If stn6_hatch_open ≟  True "
          if (stn6_hatch_open  ==    True  ):
            $ 744 "stn5_loop_count≔0"
            global stn5_loop_count=0
            $ 745 "Schleife 4 mal"
            Loop_2 = 0
            while (Loop_2 < 4):
              $ 746 "FahreAchse"
              $ 747 "stn6_help_p" "breakAfter"
              set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
              movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_help_p_p)), qnear=stn6_help_p_q), a=1.3962634015954636, v=1.0471975511965976)
              $ 748 "stn6_set_rotor≔qMast.stn6_set_rotor_position(stn5_loop_count + 1)"
              global stn6_set_rotor=qMast.stn6_set_rotor_position(stn5_loop_count + 1)
              $ 749 "If stn6_set_rotor ≟  True "
              if (stn6_set_rotor  ==    True  ):
                $ 750 "stn5_source_p≔stn5_dest_4ps_p[stn5_loop_count]"
                global stn5_source_p=stn5_dest_4ps_p[stn5_loop_count]
                $ 751 "FahreAchse"
                $ 752 "stn5_source_p" "breakAfter"
                set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
                movej(pose_trans(stn5_plane, stn5_source_p), a=1.3962634015954636, v=1.0471975511965976)
                $ 753 "FahreLinear"
                # begin: URCap Program Node
                #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
                #   Type: Greifer
                $ 754 "Greiferbewegung50% (1)"
                if not(gripper_connected[0]):
                  popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
                end
                if not(rq_is_gripper_activated("1")):
                  popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
                end
                rq_set_pos_spd_for(128, 255, 255, "1")
                rq_wait_pos_spe_for_request(128, 255, 255, "1")
                rq_go_to("1")
                rq_wait("1")
                # end: URCap Program Node
                $ 755 "cur_pose≔pose_trans(pose_inv(stn5_plane), get_actual_tcp_pose())"
                global cur_pose= pose_trans ( pose_inv (stn5_plane),  get_actual_tcp_pose ())
                $ 756 "stn5_pick_rk_p≔pose_trans(cur_pose, p[0,0,stn5_pick_rk_z/1000,0,0,0])"
                global stn5_pick_rk_p= pose_trans (cur_pose, p[0,0,stn5_pick_rk_z/1000,0,0,0])
                $ 757 "stn5_pick_rk_p" "breakAfter"
                set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
                movel(pose_trans(stn5_plane, stn5_pick_rk_p), a=0.8, v=0.15)
                # begin: URCap Program Node
                #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
                #   Type: Greifer
                $ 758 "Greifer geschlossen (1)"
                if not(gripper_connected[0]):
                  popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
                end
                if not(rq_is_gripper_activated("1")):
                  popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
                end
                rq_set_pos_spd_for(255, 128, 128, "1")
                rq_wait_pos_spe_for_request(255, 128, 128, "1")
                rq_go_to("1")
                rq_wait("1")
                # end: URCap Program Node
                $ 759 "stn5_source_p" "breakAfter"
                set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
                movel(pose_trans(stn5_plane, stn5_source_p), a=0.8, v=0.15)
                $ 760 "FahreAchse"
                $ 761 "stn6_help_p" "breakAfter"
                set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
                movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_help_p_p)), qnear=stn6_help_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.05)
                $ 762 "stn6_place_p" "breakAfter"
                set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
                movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_place_p_p)), qnear=stn6_place_p_q), a=1.3962634015954636, v=1.0471975511965976)
                $ 763 "FahreLinear"
                $ 764 "cur_pose≔pose_trans(pose_inv(stn6_plane), get_actual_tcp_pose())"
                global cur_pose= pose_trans ( pose_inv (stn6_plane),  get_actual_tcp_pose ())
                $ 765 "stn6_place_z_p≔pose_trans(cur_pose, p[0,0,stn6_place_z/1000,0,0,0])"
                global stn6_place_z_p= pose_trans (cur_pose, p[0,0,stn6_place_z/1000,0,0,0])
                $ 766 "stn6_place_z_p" "breakAfter"
                set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
                movel(pose_trans(stn6_plane, stn6_place_z_p), a=0.3, v=0.075)
                # begin: URCap Program Node
                #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
                #   Type: Greifer
                $ 767 "Greiferbewegung40% (1)"
                if not(gripper_connected[0]):
                  popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
                end
                if not(rq_is_gripper_activated("1")):
                  popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
                end
                rq_set_pos_spd_for(102, 255, 0, "1")
                rq_wait_pos_spe_for_request(102, 255, 0, "1")
                rq_go_to("1")
                rq_wait("1")
                # end: URCap Program Node
                $ 768 "FahreLinear"
                $ 769 "stn6_place_p" "breakAfter"
                set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
                movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_place_p_p)), a=1.2, v=0.25)
                # begin: URCap Program Node
                #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
                #   Type: Greifer
                $ 770 "Greifer geschlossen (1)"
                if not(gripper_connected[0]):
                  popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
                end
                if not(rq_is_gripper_activated("1")):
                  popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
                end
                rq_set_pos_spd_for(255, 128, 255, "1")
                rq_wait_pos_spe_for_request(255, 128, 255, "1")
                rq_go_to("1")
                rq_wait("1")
                # end: URCap Program Node
                $ 771 "stn5_loop_count≔stn5_loop_count + 1"
                global stn5_loop_count=stn5_loop_count + 1
              end
              Loop_2 = Loop_2 + 1
            end
          end
          $ 772 "FahreAchse"
          $ 773 "stn6_help_p" "breakAfter"
          set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
          movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_help_p_p)), qnear=stn6_help_p_q), a=1.3962634015954636, v=1.0471975511965976)
          $ 774 "stn6_hatch_clse≔qMast.stn6_hatch_close()"
          global stn6_hatch_clse=qMast.stn6_hatch_close()
          $ 775 "If stn6_hatch_clse ≟  True "
          if (stn6_hatch_clse  ==    True  ):
            $ 776 "stn6_start_fuge≔qMast.stn6_start_centrifuge()"
            global stn6_start_fuge=qMast.stn6_start_centrifuge()
            $ 777 "qMast.set_runtime_alarm(6)"
            qMast.set_runtime_alarm(6)
          end
        end
        $ 778 "FahreAchse"
        $ 779 "stn6_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 780 "Aufruf reset_jobs"
        reset_jobs()
      end
    elif (54 == switch_1):
      $ 781 "Case 54"
      $ 782 "dest_jobID≔jobArr[1]"
      global dest_jobID=jobArr[1]
      $ 783 "src_dest_p≔qMast.get_loc()"
      global src_dest_p=qMast.get_loc()
      $ 784 "source_p≔src_dest_p[0]"
      global source_p=src_dest_p[0]
      $ 785 "dest_p≔src_dest_p[1]"
      global dest_p=src_dest_p[1]
      $ 786 "Switch dest_jobID"
      switch_2 = dest_jobID
      $ 787 "Case 52"
      if (52 == switch_2):
        $ 788 "FahreAchse"
        $ 789 "stn6_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 790 "FahreAchse"
        $ 791 "source_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(pose_trans(stn5_plane, source_p), a=1.3962634015954636, v=1.0471975511965976)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 792 "Greiferbewegung50% (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(128, 127, 127, "1")
        rq_wait_pos_spe_for_request(128, 127, 127, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 793 "cur_pose≔pose_trans(pose_inv(stn5_plane), get_actual_tcp_pose())"
        global cur_pose= pose_trans ( pose_inv (stn5_plane),  get_actual_tcp_pose ())
        $ 795 "stn5_cw_pick_p≔pose_trans(cur_pose, p[0,0,stn5_pick_cw_z/1000,0,0,0])"
        global stn5_cw_pick_p= pose_trans (cur_pose, p[0,0,stn5_pick_cw_z/1000,0,0,0])
        $ 796 "FahreLinear"
        $ 797 "stn5_cw_pick_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, stn5_cw_pick_p), a=0.3, v=0.1)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 798 "Greifer geschlossen (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(255, 128, 128, "1")
        rq_wait_pos_spe_for_request(255, 128, 128, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 799 "source_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, source_p), a=0.3, v=0.1)
        $ 800 "FahreAchse"
        $ 801 "dest_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(pose_trans(stn5_plane, dest_p), a=1.3962634015954636, v=1.0471975511965976)
        $ 802 "cur_pose≔pose_trans(pose_inv(stn5_plane), get_actual_tcp_pose())"
        global cur_pose= pose_trans ( pose_inv (stn5_plane),  get_actual_tcp_pose ())
        $ 804 "stn5_cw_place_p≔pose_trans(cur_pose, p[0,0,stn5_place_tb_z/1000,0,0,0])"
        global stn5_cw_place_p= pose_trans (cur_pose, p[0,0,stn5_place_tb_z/1000,0,0,0])
        $ 805 "FahreLinear"
        $ 806 "stn5_cw_place_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, stn5_cw_place_p), a=0.3, v=0.1)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 807 "Greiferbewegung50% (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(127, 127, 127, "1")
        rq_wait_pos_spe_for_request(127, 127, 127, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 808 "dest_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, dest_p), a=0.3, v=0.1)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 809 "Greifer geschlossen (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(255, 255, 0, "1")
        rq_wait_pos_spe_for_request(255, 255, 0, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 810 "FahreAchse"
        $ 811 "stn5_stn4_hlp_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn5_stn4_hlp_p_p)), qnear=stn5_stn4_hlp_p_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 812 "stn6_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 813 "Aufruf reset_jobs"
        reset_jobs()
      end
    elif (60 == switch_1):
      $ 814 "Case 60"
      $ 815 "If Test ≟  True "
      if (Test  ==    True  ):
        $ 816 "qMast.set_init_alarm(6)"
        qMast.set_init_alarm(6)
      else:
        $ 817 "Else" "noBreak"
        $ 818 "FahreAchse"
        $ 819 "stn6_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.1)
        $ 820 "FahreAchse"
        $ 821 "stn6_help_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_help_p_p)), qnear=stn6_help_p_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 822 "qMast.set_init_alarm(6)"
        qMast.set_init_alarm(6)
        $ 823 "FahreAchse"
        $ 824 "stn14_pl_rk_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_pl_rk_p_p)), qnear=stn14_pl_rk_p_q), a=1.3962634015954636, v=1.0471975511965976)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 825 "Greiferbewegung30% (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(77, 255, 255, "1")
        rq_wait_pos_spe_for_request(77, 255, 255, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 826 "FahreLinear"
        $ 827 "stn14_ch_rk_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_ch_rk_p_p)), a=1.2, v=0.25)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 828 "Greifer geschlossen (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(255, 128, 0, "1")
        rq_wait_pos_spe_for_request(255, 128, 0, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Griffkontrolle
        $ 829 "Griffkontrolle"
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Wenn
        $ 830 "Wenn Objekt erkannt          " "noBreak"
        if (rq_is_object_detected(1)):
          $ 831 "qMast.stn14_fill_holder()" "noBreak"
          qMast.stn14_fill_holder()
          # end: URCap Program Node
        end
        # end: URCap Program Node
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 832 "Greiferbewegung30% (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(77, 255, 0, "1")
        rq_wait_pos_spe_for_request(77, 255, 0, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 833 "stn14_pl_rk_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_pl_rk_p_p)), a=1.2, v=0.25)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 834 "Greifer geschlossen (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(255, 128, 0, "1")
        rq_wait_pos_spe_for_request(255, 128, 0, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 835 "FahreAchse"
        $ 836 "stn5_chkrk_h1_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chkrk_h1_p_p)), qnear=stn5_chkrk_h1_p_q), a=1.3962634015954636, v=1.0471975511965976)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 837 "Greifer offen (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(0, 255, 127, "1")
        rq_wait_pos_spe_for_request(0, 255, 127, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 838 "FahreLinear"
        $ 839 "stn5_chk_rk_1_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chk_rk_1_p_p)), a=1.0, v=0.2)
        $ 840 "Aufruf stn5_rack_check"
        stn5_rack_check()
        $ 841 "stn5_chk_rk_1_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chk_rk_1_p_p)), a=1.0, v=0.2)
        $ 842 "stn5_chk_rk_2_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chk_rk_2_p_p)), a=1.0, v=0.2)
        $ 843 "Aufruf stn5_rack_check"
        stn5_rack_check()
        $ 844 "stn5_chk_rk_2_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chk_rk_2_p_p)), a=1.0, v=0.2)
        $ 845 "stn5_chk_rk_3_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chk_rk_3_p_p)), a=1.0, v=0.2)
        $ 846 "Aufruf stn5_rack_check"
        stn5_rack_check()
        $ 847 "stn5_chk_rk_3_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chk_rk_3_p_p)), a=1.0, v=0.2)
        $ 848 "stn5_chk_rk_4_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chk_rk_4_p_p)), a=1.0, v=0.2)
        $ 849 "Aufruf stn5_rack_check"
        stn5_rack_check()
        $ 850 "stn5_chk_rk_4_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chk_rk_4_p_p)), a=1.0, v=0.2)
        $ 851 "stn5_chkrk_h2_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chkrk_h2_p_p)), a=1.0, v=0.2)
        $ 852 "stn5_chkrk_h3_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chkrk_h3_p_p)), a=1.0, v=0.2)
        $ 853 "stn5_chk_rk_5_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chk_rk_5_p_p)), a=1.0, v=0.2)
        $ 854 "Aufruf stn5_rack_check"
        stn5_rack_check()
        $ 855 "stn5_chk_rk_5_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chk_rk_5_p_p)), a=1.0, v=0.2)
        $ 856 "stn5_chk_rk_6_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chk_rk_6_p_p)), a=1.0, v=0.2)
        $ 857 "Aufruf stn5_rack_check"
        stn5_rack_check()
        $ 858 "stn5_chk_rk_6_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chk_rk_6_p_p)), a=1.0, v=0.2)
        $ 859 "stn5_chk_rk_7_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chk_rk_7_p_p)), a=1.0, v=0.2)
        $ 860 "Aufruf stn5_rack_check"
        stn5_rack_check()
        $ 861 "stn5_chk_rk_7_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chk_rk_7_p_p)), a=1.0, v=0.2)
        $ 862 "stn5_chk_rk_8_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chk_rk_8_p_p)), a=1.0, v=0.2)
        $ 863 "Aufruf stn5_rack_check"
        stn5_rack_check()
        $ 864 "stn5_chk_rk_8_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chk_rk_8_p_p)), a=1.0, v=0.2)
        $ 865 "stn5_chkrk_h4_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn5_plane, pose_trans(p[.404793763265, -.880564591570, .218599261998, -.002768907827, .001807604230, 1.568627611983], stn5_chkrk_h4_p_p)), a=1.0, v=0.2)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 866 "Greifer geschlossen (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(255, 255, 127, "1")
        rq_wait_pos_spe_for_request(255, 255, 127, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 867 "FahreAchse"
        $ 868 "stn6_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 869 "If archiv_opened ≟  False "
        if (archiv_opened  ==    False  ):
          $ 870 "Aufruf stn11_open_archiv"
          stn11_open_archiv()
          $ 871 "archiv_opened≔ True "
          global archiv_opened=  True  
        end
        $ 872 "FahreAchse"
        $ 873 "stn6_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      end
      $ 874 "Aufruf reset_jobs"
      reset_jobs()
    elif (61 == switch_1):
      $ 875 "Case 61"
      $ 876 "FahreAchse"
      $ 877 "stn6_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.1)
      $ 878 "stn6_help_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_help_p_p)), qnear=stn6_help_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 879 "dest_jobID≔jobArr[1]"
      global dest_jobID=jobArr[1]
      $ 880 "stn5_dest_4ps_p≔qMast.stn5_get_loc()"
      global stn5_dest_4ps_p=qMast.stn5_get_loc()
      $ 881 "If Test ≟  True "
      if (Test  ==    True  ):
        $ 882 "Kommentar"
        # Kommentar
      else:
        $ 883 "Else" "noBreak"
        $ 884 "stn6_hatch_open≔qMast.stn6_hatch_open()"
        global stn6_hatch_open=qMast.stn6_hatch_open()
        $ 885 "If stn6_hatch_open ≟  True "
        if (stn6_hatch_open  ==    True  ):
          $ 886 "stn5_loop_count≔0"
          global stn5_loop_count=0
          $ 887 "Schleife 4 mal"
          Loop_1 = 0
          while (Loop_1 < 4):
            $ 888 "FahreAchse"
            $ 889 "stn6_help_p" "breakAfter"
            set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
            movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_help_p_p)), qnear=stn6_help_p_q), a=1.3962634015954636, v=1.0471975511965976)
            $ 890 "stn6_set_rotor≔qMast.stn6_set_rotor_position(stn5_loop_count + 1)"
            global stn6_set_rotor=qMast.stn6_set_rotor_position(stn5_loop_count + 1)
            $ 891 "If stn6_set_rotor ≟  True "
            if (stn6_set_rotor  ==    True  ):
              $ 892 "FahreAchse"
              $ 893 "stn6_place_p" "breakAfter"
              set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
              movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_place_p_p)), qnear=stn6_place_p_q), a=1.3962634015954636, v=1.0471975511965976)
              # begin: URCap Program Node
              #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
              #   Type: Greifer
              $ 894 "Greiferbewegung40% (1)"
              if not(gripper_connected[0]):
                popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
              end
              if not(rq_is_gripper_activated("1")):
                popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
              end
              rq_set_pos_spd_for(102, 255, 0, "1")
              rq_wait_pos_spe_for_request(102, 255, 0, "1")
              rq_go_to("1")
              rq_wait("1")
              # end: URCap Program Node
              $ 895 "FahreLinear"
              $ 896 "cur_pose≔pose_trans(pose_inv(stn6_plane), get_actual_tcp_pose())"
              global cur_pose= pose_trans ( pose_inv (stn6_plane),  get_actual_tcp_pose ())
              $ 898 "stn6_pick_z_p≔pose_trans(cur_pose, p[0,0,stn6_pick_z/1000,0,0,0])"
              global stn6_pick_z_p= pose_trans (cur_pose, p[0,0,stn6_pick_z/1000,0,0,0])
              $ 899 "stn6_pick_z_p" "breakAfter"
              set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
              movel(pose_trans(stn6_plane, stn6_pick_z_p), a=1.2, v=0.25)
              # begin: URCap Program Node
              #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
              #   Type: Greifer
              $ 900 "Greifer geschlossen (1)"
              if not(gripper_connected[0]):
                popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
              end
              if not(rq_is_gripper_activated("1")):
                popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
              end
              rq_set_pos_spd_for(255, 128, 128, "1")
              rq_wait_pos_spe_for_request(255, 128, 128, "1")
              rq_go_to("1")
              rq_wait("1")
              # end: URCap Program Node
              $ 901 "stn6_place_p" "breakAfter"
              set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
              movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_place_p_p)), a=1.2, v=0.25)
              $ 902 "stn5_source_p≔stn5_dest_4ps_p[stn5_loop_count]"
              global stn5_source_p=stn5_dest_4ps_p[stn5_loop_count]
              $ 903 "FahreAchse"
              $ 904 "stn6_help_p" "breakAfter"
              set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
              movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_help_p_p)), qnear=stn6_help_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.05)
              $ 905 "FahreAchse"
              $ 906 "stn5_source_p" "breakAfter"
              set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
              movej(pose_trans(stn5_plane, stn5_source_p), a=1.3962634015954636, v=1.0471975511965976)
              $ 907 "FahreLinear"
              $ 908 "cur_pose≔pose_trans(pose_inv(stn5_plane), get_actual_tcp_pose())"
              global cur_pose= pose_trans ( pose_inv (stn5_plane),  get_actual_tcp_pose ())
              $ 909 "stn5_place_rk_p≔pose_trans(cur_pose, p[0,0,stn5_place_rk_z/1000,0,0,0])"
              global stn5_place_rk_p= pose_trans (cur_pose, p[0,0,stn5_place_rk_z/1000,0,0,0])
              $ 910 "stn5_place_rk_p" "breakAfter"
              set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
              movel(pose_trans(stn5_plane, stn5_place_rk_p), a=0.6, v=0.1)
              # begin: URCap Program Node
              #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
              #   Type: Greifer
              $ 911 "Greiferbewegung50% (1)"
              if not(gripper_connected[0]):
                popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
              end
              if not(rq_is_gripper_activated("1")):
                popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
              end
              rq_set_pos_spd_for(128, 255, 255, "1")
              rq_wait_pos_spe_for_request(128, 255, 255, "1")
              rq_go_to("1")
              rq_wait("1")
              # end: URCap Program Node
              $ 912 "stn5_source_p" "breakAfter"
              set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
              movel(pose_trans(stn5_plane, stn5_source_p), a=1.2, v=0.25)
              # begin: URCap Program Node
              #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
              #   Type: Greifer
              $ 913 "Greifer geschlossen (1)"
              if not(gripper_connected[0]):
                popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
              end
              if not(rq_is_gripper_activated("1")):
                popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
              end
              rq_set_pos_spd_for(255, 255, 255, "1")
              rq_wait_pos_spe_for_request(255, 255, 255, "1")
              rq_go_to("1")
              rq_wait("1")
              # end: URCap Program Node
              $ 914 "stn5_loop_count≔stn5_loop_count + 1"
              global stn5_loop_count=stn5_loop_count + 1
            end
            Loop_1 = Loop_1 + 1
          end
        end
      end
      $ 915 "FahreAchse"
      $ 916 "stn6_help_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_help_p_p)), qnear=stn6_help_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 917 "stn6_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 918 "Aufruf reset_jobs"
      reset_jobs()
    elif (70 == switch_1):
      $ 919 "Case 70"
      $ 920 "If Test ≟  True "
      if (Test  ==    True  ):
        $ 921 "qMast.set_init_alarm(7)"
        qMast.set_init_alarm(7)
      else:
        $ 922 "Else" "noBreak"
        $ 923 "Aufruf stn7_close_doors"
        stn7_close_doors()
        $ 924 "Aufruf stn7_init_stndby"
        stn7_init_stndby()
        $ 925 "If archiv_opened ≟  False "
        if (archiv_opened  ==    False  ):
          $ 926 "Aufruf stn11_open_archiv"
          stn11_open_archiv()
          $ 927 "archiv_opened≔ True "
          global archiv_opened=  True  
        end
      end
      $ 928 "Aufruf reset_jobs"
      reset_jobs()
    elif (71 == switch_1):
      $ 929 "Case 71"
      $ 930 "FahreAchse"
      $ 931 "stn7_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_home_p_p)), qnear=stn7_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.1)
      $ 932 "src_dest_p≔qMast.get_loc()"
      global src_dest_p=qMast.get_loc()
      $ 933 "source_p≔src_dest_p[0]"
      global source_p=src_dest_p[0]
      $ 934 "FahreAchse"
      $ 935 "source_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(pose_trans(stn7_plane, source_p), a=1.3962634015954636, v=1.0471975511965976)
      $ 936 "FahreLinear"
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 937 "Greifer offen (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(0, 255, 0, "1")
      rq_wait_pos_spe_for_request(0, 255, 0, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 938 "cur_pose≔pose_trans(pose_inv(stn7_plane), get_actual_tcp_pose())"
      global cur_pose= pose_trans ( pose_inv (stn7_plane),  get_actual_tcp_pose ())
      $ 940 "stn7_pick_z_p≔pose_trans(cur_pose, p[0,0,stn7_pick_z/1000,0,0,0])"
      global stn7_pick_z_p= pose_trans (cur_pose, p[0,0,stn7_pick_z/1000,0,0,0])
      $ 941 "stn7_pick_z_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn7_plane, stn7_pick_z_p), a=1.2, v=0.25)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 942 "Greifer geschlossen (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(255, 128, 255, "1")
      rq_wait_pos_spe_for_request(255, 128, 255, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 943 "source_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn7_plane, source_p), a=1.2, v=0.25)
      $ 944 "FahreLinear"
      $ 945 "stn7_bin_help_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_bin_help_p_p)), a=1.2, v=0.6, r=0.025)
      $ 946 "FahreAchse"
      $ 947 "stn7_bin_apr_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_bin_apr_p_p)), qnear=stn7_bin_apr_p_q), a=1.7453292519943295, v=1.3962634015954636, r=0.02)
      $ 948 "stn7_bin_thrw_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_bin_thrw_p_p)), qnear=stn7_bin_thrw_p_q), a=1.3962634015954636, v=1.0471975511965976)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 949 "Greifer offen (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(0, 255, 255, "1")
      rq_wait_pos_spe_for_request(0, 255, 255, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 950 "Warten: 0.1"
      sleep(0.1)
      $ 951 "stn7_bin_apr_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_bin_apr_p_p)), qnear=stn7_bin_apr_p_q), a=1.7453292519943295, v=1.3962634015954636)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 952 "Greifer geschlossen (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(255, 128, 255, "1")
      rq_wait_pos_spe_for_request(255, 128, 255, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 953 "stn7_bin_help_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_bin_help_p_p)), qnear=stn7_bin_help_p_q), a=1.7453292519943295, v=1.3962634015954636, r=0.05)
      $ 954 "stn7_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_home_p_p)), qnear=stn7_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 955 "Aufruf reset_jobs"
      reset_jobs()
    elif (73 == switch_1):
      $ 956 "Case 73"
      $ 957 "FahreAchse"
      $ 958 "stn7_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_home_p_p)), qnear=stn7_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 959 "Greifer geschlossen (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(255, 128, 255, "1")
      rq_wait_pos_spe_for_request(255, 128, 255, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 960 "stn7_ld_apr_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_ld_apr_p_p)), qnear=stn7_ld_apr_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 961 "FahreLinear"
      $ 962 "stn7_ld_press_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_ld_press_p_p)), a=0.6, v=0.1)
      $ 963 "stn7_ld_apr_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_ld_apr_p_p)), a=0.6, v=0.1)
      $ 964 "qMast.set_runtime_alarm(7)"
      qMast.set_runtime_alarm(7)
      $ 965 "FahreAchse"
      $ 966 "stn7_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_home_p_p)), qnear=stn7_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 967 "Aufruf reset_jobs"
      reset_jobs()
    elif (74 == switch_1):
      $ 968 "Case 74"
      $ 969 "Aufruf stn7_close_doors"
      stn7_close_doors()
      $ 970 "Aufruf stn7_open_doors"
      stn7_open_doors()
      $ 971 "Aufruf reset_jobs"
      reset_jobs()
    elif (75 == switch_1):
      $ 972 "Case 75"
      $ 973 "Aufruf stn7_close_doors"
      stn7_close_doors()
      $ 974 "FahreAchse"
      $ 975 "stn7_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_home_p_p)), qnear=stn7_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 976 "Aufruf reset_jobs"
      reset_jobs()
    elif (103 == switch_1):
      $ 977 "Case 103"
      $ 978 "FahreAchse"
      $ 979 "stn1_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_home_p_p)), qnear=stn1_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.05)
      $ 980 "home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], home_p_p)), qnear=home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 982 "Meldung"
      popup(str_cat("",stn10_skype_ful), "Fehler", False, True, blocking=False)
      halt
      $ 983 "Aufruf reset_jobs"
      reset_jobs()
    elif (113 == switch_1):
      $ 984 "Case 113"
      $ 985 "FahreAchse"
      $ 986 "stn1_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_home_p_p)), qnear=stn1_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.05)
      $ 987 "home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], home_p_p)), qnear=home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 989 "Meldung"
      popup(str_cat("",stn11_skype_ful), "Fehler", False, True, blocking=False)
      halt
      $ 990 "Aufruf reset_jobs"
      reset_jobs()
    elif (141 == switch_1):
      $ 991 "Case 141"
      $ 992 "dest_jobID≔jobArr[1]"
      global dest_jobID=jobArr[1]
      $ 993 "FahreAchse"
      $ 994 "stn6_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 995 "stn14_pkrk_up_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_pkrk_up_p_p)), qnear=stn14_pkrk_up_p_q), a=1.3962634015954636, v=1.0471975511965976)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 996 "Greifer offen (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(0, 255, 255, "1")
      rq_wait_pos_spe_for_request(0, 255, 255, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 997 "FahreLinear"
      $ 998 "stn14_pk_rk_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_pk_rk_p_p)), a=1.2, v=0.25)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 999 "Greifer geschlossen (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(255, 64, 255, "1")
      rq_wait_pos_spe_for_request(255, 64, 255, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 1000 "stn14_pkrk_up_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_pkrk_up_p_p)), a=1.2, v=0.25)
      $ 1001 "FahreLinear"
      $ 1002 "stn14_stn8_hl_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn14_stn8_hl_p_p)), a=1.0, v=0.2)
      $ 1003 "stn8_hlp_2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn8_hlp_2_p_p)), a=1.0, v=0.2)
      $ 1004 "stn8_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn8_home_p_p)), a=1.0, v=0.2, r=0.1)
      $ 1005 "stn8_pl_apr1_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn8_pl_apr1_p_p)), a=1.0, v=0.2)
      $ 1006 "stn8_pl_apr2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn8_pl_apr2_p_p)), a=0.5, v=0.05)
      $ 1007 "stn8_place_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn8_place_p_p)), a=0.5, v=0.05)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 1008 "Greiferbewegung40% (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(102, 64, 255, "1")
      rq_wait_pos_spe_for_request(102, 64, 255, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 1009 "stn8_pl_apr2_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn8_pl_apr2_p_p)), a=1.0, v=0.2)
      $ 1010 "stn8_pl_apr1_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn8_pl_apr1_p_p)), a=1.0, v=0.2)
      # begin: URCap Program Node
      #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
      #   Type: Greifer
      $ 1011 "Greifer geschlossen (1)"
      if not(gripper_connected[0]):
        popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
      end
      if not(rq_is_gripper_activated("1")):
        popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
      end
      rq_set_pos_spd_for(255, 255, 255, "1")
      rq_wait_pos_spe_for_request(255, 255, 255, "1")
      rq_go_to("1")
      rq_wait("1")
      # end: URCap Program Node
      $ 1012 "FahreAchse"
      $ 1013 "stn8_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn8_home_p_p)), qnear=stn8_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.1)
      $ 1014 "stn8_stn6_hlp_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn8_stn6_hlp_p_p)), qnear=stn8_stn6_hlp_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.1)
      $ 1015 "stn6_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn6_home_p_p)), qnear=stn6_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 1016 "Aufruf reset_jobs"
      reset_jobs()
    elif (151 == switch_1):
      $ 1017 "Case 151"
      $ 1018 "dest_jobID≔jobArr[1]"
      global dest_jobID=jobArr[1]
      $ 1019 "FahreAchse"
      $ 1020 "stn1_home_p" "breakAfter"
      set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
      movej(get_inverse_kin(pose_trans(stn1_plane, pose_trans(p[.053539610991, -.984987293150, -.024848236577, .000189536594, .000276418508, 3.136265531618], stn1_home_p_p)), qnear=stn1_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 1021 "Switch dest_jobID"
      switch_2 = dest_jobID
      $ 1022 "Case 72"
      if (72 == switch_2):
        $ 1023 "src_dest_p≔qMast.get_loc()"
        global src_dest_p=qMast.get_loc()
        $ 1024 "source_p≔src_dest_p[0]"
        global source_p=src_dest_p[0]
        $ 1025 "dest_p≔src_dest_p[1]"
        global dest_p=src_dest_p[1]
        $ 1026 "FahreAchse"
        $ 1027 "stn15_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn15_home_p_p)), qnear=stn15_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 1028 "FahreLinear"
        $ 1029 "source_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn6_plane, source_p), a=1.2, v=0.25)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 1030 "Greiferbewegung50% (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(128, 255, 255, "1")
        rq_wait_pos_spe_for_request(128, 255, 255, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 1031 "cur_pose≔pose_trans(pose_inv(stn6_plane), get_actual_tcp_pose())"
        global cur_pose= pose_trans ( pose_inv (stn6_plane),  get_actual_tcp_pose ())
        $ 1032 "stn15_pk_z_p≔pose_trans(cur_pose, p[0,0,stn15_pick_z/1000,0,0,0])"
        global stn15_pk_z_p= pose_trans (cur_pose, p[0,0,stn15_pick_z/1000,0,0,0])
        $ 1033 "stn15_pk_z_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn6_plane, stn15_pk_z_p), a=0.5, v=0.1)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 1034 "Greifer geschlossen (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(255, 128, 128, "1")
        rq_wait_pos_spe_for_request(255, 128, 128, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 1035 "source_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn6_plane, source_p), a=1.2, v=0.25)
        $ 1036 "stn15_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn6_plane, pose_trans(p[.776557109756, -.878329076792, .250244777977, -.001605684562, .009314448336, 1.565629725105], stn15_home_p_p)), a=1.2, v=0.25)
        $ 1037 "FahreAchse"
        $ 1038 "stn7_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_home_p_p)), qnear=stn7_home_p_q), a=1.3962634015954636, v=1.0471975511965976, r=0.1)
        $ 1039 "Aufruf stn7_check_doors"
        stn7_check_doors()
        $ 1040 "FahreLinear"
        $ 1041 "dest_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn7_plane, dest_p), a=1.2, v=0.25)
        $ 1042 "cur_pose≔pose_trans(pose_inv(stn7_plane), get_actual_tcp_pose())"
        global cur_pose= pose_trans ( pose_inv (stn7_plane),  get_actual_tcp_pose ())
        $ 1043 "stn7_place_p≔pose_trans(cur_pose, p[0,0,stn7_place_z/1000,0,0,0])"
        global stn7_place_p= pose_trans (cur_pose, p[0,0,stn7_place_z/1000,0,0,0])
        $ 1044 "FahreLinear"
        $ 1045 "stn7_place_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn7_plane, stn7_place_p), a=0.15, v=0.075)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 1046 "Greifer offen (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(0, 255, 255, "1")
        rq_wait_pos_spe_for_request(0, 255, 255, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 1047 "FahreLinear"
        $ 1048 "dest_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movel(pose_trans(stn7_plane, dest_p), a=1.2, v=0.25)
        # begin: URCap Program Node
        #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
        #   Type: Greifer
        $ 1049 "Greifer geschlossen (1)"
        if not(gripper_connected[0]):
          popup("Greifer 1 muss verbunden sein, um dieses Programm auszuführen.", "Keine Verbindung", False, True, True)
        end
        if not(rq_is_gripper_activated("1")):
          popup("Greifer 1 ist nicht aktiviert. Wechseln Sie zur Registerkarte Installation > Greifer, um ihn zu aktivieren und das Programm erneut auszuführen.", "Nicht aktiviert", False, True, True)
        end
        rq_set_pos_spd_for(255, 255, 255, "1")
        rq_wait_pos_spe_for_request(255, 255, 255, "1")
        rq_go_to("1")
        rq_wait("1")
        # end: URCap Program Node
        $ 1050 "FahreAchse"
        $ 1051 "stn7_home_p" "breakAfter"
        set_tcp(p[-3.0E-4,2.5E-4,0.1575,0.0,0.0,0.0])
        movej(get_inverse_kin(pose_trans(stn7_plane, pose_trans(p[.109811488584, -1.023382701287, -.166619380160, .003048702642, -.008599620441, 2.442192581404], stn7_home_p_p)), qnear=stn7_home_p_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 1052 "Aufruf reset_jobs"
        reset_jobs()
      end
    end
  end
end
